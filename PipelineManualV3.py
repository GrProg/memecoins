import os
import sys
import shutil
import glob
import subprocess
import time
from datetime import datetime
import traceback

class PipelineV3:
    def __init__(self, coin_address):
        self.coin_address = coin_address
        self.project_dir = os.getcwd()
        self.all_dir = os.path.join(self.project_dir, 'all')
        self.testt_dir = os.path.join(self.project_dir, 'testt')
        self.testt_yes_dir = os.path.join(self.testt_dir, 'yes')
        self.pameligo_dir = os.path.join(self.project_dir, 'pameligo')
        
        # Ensure required directories exist
        os.makedirs(self.all_dir, exist_ok=True)
        os.makedirs(self.testt_yes_dir, exist_ok=True)
        os.makedirs(self.pameligo_dir, exist_ok=True)
        
        # Initialize logging
        self.setup_logging()

    def setup_logging(self):
        """Set up logging for the pipeline"""
        log_file = f'pipeline_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        self.log_path = os.path.join(self.project_dir, log_file)
        
    def log(self, message):
        """Log a message with timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        with open(self.log_path, 'a') as f:
            f.write(log_message + '\n')

    def run_jupyterv2(self):
        """Run jupyterV2.py to fetch new transaction data"""
        self.log("\nStep 1: Running jupyterV2.py...")
        
        try:
            subprocess.run([sys.executable, 'jupyterV2.py', self.coin_address], check=True)
            
            # Check if transaction file exists
            transaction_file = os.path.join(self.all_dir, f"transactions_{self.coin_address}.json")
            if os.path.exists(transaction_file):
                file_size = os.path.getsize(transaction_file)
                self.log(f"Transaction file updated: {os.path.basename(transaction_file)} ({file_size/1024:.1f} KB)")
                return True
            else:
                self.log("Error: Transaction file not found after jupyterV2.py execution")
                return False
                
        except subprocess.CalledProcessError as e:
            self.log(f"Error running jupyterV2.py: {str(e)}")
            return False
        except Exception as e:
            self.log(f"Unexpected error in jupyterV2.py: {str(e)}")
            return False

    def run_convertv2(self):
        """Run convertV2.py to process transaction data"""
        self.log("\nStep 2: Running convertV2.py...")
        
        try:
            subprocess.run([
                sys.executable, 
                'convertv2.py', 
                '--input', 'all',
                '--output', 'testt/yes'
            ], check=True)
            
            # Look for generated files
            enhanced_files = glob.glob(os.path.join(self.testt_yes_dir, f'enhanced_{self.coin_address}_*.json'))
            price_files = glob.glob(os.path.join(self.testt_yes_dir, f'price_history_{self.coin_address}_*.json'))
            
            if enhanced_files and price_files:
                self.log(f"Generated files:")
                self.log(f"Enhanced: {os.path.basename(enhanced_files[0])}")
                self.log(f"Price history: {os.path.basename(price_files[0])}")
                return enhanced_files[0], price_files[0]
            else:
                self.log("Error: No files generated by convertV2.py")
                return None, None
                
        except subprocess.CalledProcessError as e:
            self.log(f"Error running convertV2.py: {str(e)}")
            return None, None
        except Exception as e:
            self.log(f"Unexpected error in convertV2.py: {str(e)}")
            return None, None

    def move_files_to_pameligo(self, enhanced_file, price_file):
        """Move generated files to pameligo directory"""
        self.log("\nStep 3: Moving files to pameligo directory...")
        
        try:
            if not enhanced_file or not price_file:
                self.log("No files to move!")
                return None, None
                
            # Get just the filenames
            enhanced_filename = os.path.basename(enhanced_file)
            price_filename = os.path.basename(price_file)
            
            # Move files to pameligo
            new_enhanced = os.path.join(self.pameligo_dir, enhanced_filename)
            new_price = os.path.join(self.pameligo_dir, price_filename)
            
            shutil.copy2(enhanced_file, new_enhanced)
            shutil.copy2(price_file, new_price)
            
            self.log(f"Files moved successfully to pameligo directory")
            return enhanced_filename, price_filename
            
        except Exception as e:
            self.log(f"Error moving files: {str(e)}")
            return None, None

    def run_predictorv3(self, enhanced_filename, price_filename):
        """Run PredictorV3 for analysis"""
        self.log("\nStep 4: Running PredictorV3...")
        
        try:
            if not enhanced_filename or not price_filename:
                self.log("Missing required files for prediction!")
                return False
                
            os.chdir(self.pameligo_dir)
            result = subprocess.run([
                sys.executable, 
                'PredictorV3.py',
                enhanced_filename,
                price_filename
            ], capture_output=True, text=True)
            
            os.chdir(self.project_dir)
            
            if result.returncode == 0:
                self.log("Prediction completed successfully")
                self.log(result.stdout)
                return True
            else:
                self.log(f"Prediction error: {result.stderr}")
                return False
                
        except Exception as e:
            self.log(f"Error in prediction: {str(e)}")
            return False
        finally:
            os.chdir(self.project_dir)

    def run_pipeline(self):
        """Run the complete pipeline in a continuous loop"""
        self.log(f"Starting continuous pipeline for coin address: {self.coin_address}")
        
        iteration = 1
        while True:
            try:
                self.log(f"\n=== Starting iteration {iteration} ===")
                
                # Step 1: Run jupyterV2
                if not self.run_jupyterv2():
                    self.log("Failed to fetch new transactions, waiting before retry...")
                    time.sleep(60)  # Wait 1 minute before retry
                    continue
                
                # Step 2: Run convertV2
                enhanced_file, price_file = self.run_convertv2()
                if not enhanced_file or not price_file:
                    self.log("Failed to convert data, waiting before retry...")
                    time.sleep(60)
                    continue
                
                # Step 3: Move files to pameligo
                enhanced_filename, price_filename = self.move_files_to_pameligo(
                    enhanced_file, price_file
                )
                if not enhanced_filename or not price_filename:
                    self.log("Failed to move files, waiting before retry...")
                    time.sleep(60)
                    continue
                
                # Step 4: Run PredictorV3
                if not self.run_predictorv3(enhanced_filename, price_filename):
                    self.log("Prediction failed, waiting before retry...")
                    time.sleep(60)
                    continue
                
                self.log(f"=== Completed iteration {iteration} ===")
                iteration += 1
                
                # Wait before starting next iteration
                self.log("Waiting 30 seconds before next iteration...")
                time.sleep(5)
                
            except KeyboardInterrupt:
                self.log("\nPipeline stopped by user")
                break
            except Exception as e:
                self.log(f"\nUnexpected error in pipeline: {str(e)}")
                self.log(traceback.format_exc())
                self.log("Waiting 60 seconds before retry...")
                time.sleep(60)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python PipelineManualV3.py [coin address]")
        sys.exit(1)
        
    pipeline = PipelineV3(sys.argv[1])
    pipeline.run_pipeline()