import os
import sys
import shutil
import glob
import subprocess
import time
from datetime import datetime
import traceback

class PipelineV4:
    def __init__(self, coin_address: str):
        self.coin_address = coin_address
        self.project_dir = os.getcwd()
        self.all_dir = os.path.join(self.project_dir, 'all')
        self.botfucker_dir = os.path.join(self.project_dir, 'botfucker')
        self.giatora_dir = os.path.join(self.botfucker_dir, 'giatora')
        
        # Ensure required directories exist
        os.makedirs(self.all_dir, exist_ok=True)
        os.makedirs(self.giatora_dir, exist_ok=True)
        
        # Initialize logging
        self.setup_logging()

    def setup_logging(self):
        """Set up logging for the pipeline"""
        log_file = f'pipeline_v4_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        self.log_path = os.path.join(self.project_dir, log_file)
        
    def log(self, message):
        """Log a message with timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        with open(self.log_path, 'a') as f:
            f.write(log_message + '\n')

    def run_jupyterv2(self) -> bool:
        """Run jupyterV2.py to fetch new transaction data"""
        self.log("\nStep 1: Running jupyterV2.py...")
        
        try:
            # Run jupyterV2.py with coin address
            subprocess.run([sys.executable, 'jupyterV2.py', self.coin_address], check=True)
            
            # Check if transaction file exists
            transaction_file = os.path.join(self.all_dir, f"transactions_{self.coin_address}.json")
            if os.path.exists(transaction_file):
                file_size = os.path.getsize(transaction_file)
                self.log(f"Transaction file created: {os.path.basename(transaction_file)} ({file_size/1024:.1f} KB)")
                return True
            else:
                self.log("Error: Transaction file not found after jupyterV2.py execution")
                return False
                
        except subprocess.CalledProcessError as e:
            self.log(f"Error running jupyterV2.py: {str(e)}")
            return False
        except Exception as e:
            self.log(f"Unexpected error in jupyterV2.py: {str(e)}")
            return False

    def run_convertv3bots(self) -> tuple[str, str]:
        """Run convertV3Bots.py to process transaction data"""
        self.log("\nStep 2: Running convertV3Bots.py...")
        
        try:
            # Run convertV3Bots with input/output directories
            subprocess.run([
                sys.executable, 
                'convertV3Bots.py',
                '--input', 'all',
                '--output', 'testt/yes'
            ], check=True)
            
            # Look for generated files matching our coin address
            enhanced_files = glob.glob(os.path.join('testt/yes', f'enhanced_{self.coin_address}_*.json'))
            price_files = glob.glob(os.path.join('testt/yes', f'price_history_{self.coin_address}_*.json'))
            
            if enhanced_files and price_files:
                enhanced_file = enhanced_files[0]
                price_file = price_files[0]
                self.log(f"Generated files:")
                self.log(f"Enhanced: {os.path.basename(enhanced_file)}")
                self.log(f"Price history: {os.path.basename(price_file)}")
                return enhanced_file, price_file
            else:
                self.log("Error: No files generated by convertV3Bots.py")
                return None, None
                
        except subprocess.CalledProcessError as e:
            self.log(f"Error running convertV3Bots.py: {str(e)}")
            return None, None
        except Exception as e:
            self.log(f"Unexpected error in convertV3Bots.py: {str(e)}")
            return None, None

    def copy_to_botfucker(self, enhanced_file: str, price_file: str) -> str:
        """Copy files to botfucker/giatora directory"""
        self.log("\nStep 3: Copying files to botfucker/giatora...")
        
        try:
            if not enhanced_file or not price_file:
                self.log("No files to copy!")
                return None
                
            # Copy both files to giatora directory
            enhanced_dest = os.path.join(self.giatora_dir, os.path.basename(enhanced_file))
            price_dest = os.path.join(self.giatora_dir, os.path.basename(price_file))
            
            shutil.copy2(enhanced_file, enhanced_dest)
            shutil.copy2(price_file, price_dest)
            
            self.log(f"Files copied successfully to botfucker/giatora directory")
            return price_dest  # Return price file path for rename.py
            
        except Exception as e:
            self.log(f"Error copying files: {str(e)}")
            return None

    def run_rename(self, price_file: str) -> bool:
        """Run rename.py on the price history file"""
        self.log("\nStep 4: Running rename.py...")
        
        try:
            if not price_file:
                self.log("No price file to rename!")
                return False
                
            # Change to botfucker directory to run rename.py
            os.chdir(self.botfucker_dir)
            
            # Use the full path to the price file in giatora directory
            full_price_path = os.path.join('giatora', os.path.basename(price_file))
            
            result = subprocess.run([
                sys.executable,
                'rename.py',
                full_price_path
            ], capture_output=True, text=True)
            
            # Change back to project directory
            os.chdir(self.project_dir)
            
            if result.returncode == 0:
                self.log("File renamed successfully")
                self.log(result.stdout)
                return True
            else:
                self.log(f"Error in rename.py: {result.stderr}")
                return False
                
        except Exception as e:
            self.log(f"Error running rename.py: {str(e)}")
            return False
        finally:
            # Ensure we're back in the project directory
            os.chdir(self.project_dir)

    def run_pipeline(self):
        """Run the complete pipeline"""
        try:
            self.log(f"Starting pipeline for coin address: {self.coin_address}")
            
            # Step 1: Run jupyterV2
            if not self.run_jupyterv2():
                self.log("Pipeline failed at Step 1")
                return False
                
            # Step 2: Run convertV3Bots
            enhanced_file, price_file = self.run_convertv3bots()
            if not enhanced_file or not price_file:
                self.log("Pipeline failed at Step 2")
                return False
                
            # Step 3: Copy files to botfucker/giatora
            price_dest = self.copy_to_botfucker(enhanced_file, price_file)
            if not price_dest:
                self.log("Pipeline failed at Step 3")
                return False
                
            # Step 4: Run rename.py
            if not self.run_rename(price_dest):
                self.log("Pipeline failed at Step 4")
                return False
            
            self.log("Pipeline completed successfully!")
            return True
            
        except Exception as e:
            self.log(f"Unexpected error in pipeline: {str(e)}")
            self.log(traceback.format_exc())
            return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python PipelineV4.py [coin address]")
        sys.exit(1)
        
    pipeline = PipelineV4(sys.argv[1])
    pipeline.run_pipeline()