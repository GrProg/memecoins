2024-11-02 23:39:28,086:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:39:28,086:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:39:28,087:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:39:28,087:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:39:29,686:INFO:Initializing load_model()
2024-11-02 23:39:29,688:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-02 23:39:29,821:INFO:Initializing predict_model()
2024-11-02 23:39:29,821:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E8B5163A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018E90B94F70>)
2024-11-02 23:39:29,821:INFO:Checking exceptions
2024-11-02 23:39:29,821:INFO:Preloading libraries
2024-11-02 23:39:29,822:INFO:Set up data.
2024-11-02 23:39:29,828:INFO:Set up index.
2024-11-02 23:42:13,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:42:13,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:42:13,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:42:13,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:42:14,943:INFO:PyCaret ClassificationExperiment
2024-11-02 23:42:14,943:INFO:Logging name: clf-default-name
2024-11-02 23:42:14,944:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-02 23:42:14,944:INFO:version 3.3.2
2024-11-02 23:42:14,944:INFO:Initializing setup()
2024-11-02 23:42:14,944:INFO:self.USI: 4481
2024-11-02 23:42:14,944:INFO:self._variable_keys: {'target_param', '_available_plots', 'html_param', 'y_train', 'seed', 'gpu_param', 'fold_groups_param', 'gpu_n_jobs_param', 'n_jobs_param', 'is_multiclass', 'fix_imbalance', 'data', 'y', 'idx', 'X_test', '_ml_usecase', 'fold_shuffle_param', 'X_train', 'log_plots_param', 'X', 'y_test', 'fold_generator', 'USI', 'logging_param', 'exp_id', 'memory', 'pipeline', 'exp_name_log'}
2024-11-02 23:42:14,944:INFO:Checking environment
2024-11-02 23:42:14,944:INFO:python_version: 3.9.5
2024-11-02 23:42:14,944:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-02 23:42:14,944:INFO:machine: AMD64
2024-11-02 23:42:14,956:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-02 23:42:14,959:INFO:Memory: svmem(total=17098203136, available=4968620032, percent=70.9, used=12129583104, free=4968620032)
2024-11-02 23:42:14,959:INFO:Physical Core: 4
2024-11-02 23:42:14,959:INFO:Logical Core: 4
2024-11-02 23:42:14,959:INFO:Checking libraries
2024-11-02 23:42:14,959:INFO:System:
2024-11-02 23:42:14,960:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-02 23:42:14,960:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-02 23:42:14,960:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-02 23:42:14,960:INFO:PyCaret required dependencies:
2024-11-02 23:42:15,020:INFO:                 pip: 21.1.3
2024-11-02 23:42:15,020:INFO:          setuptools: 52.0.0.post20210125
2024-11-02 23:42:15,020:INFO:             pycaret: 3.3.2
2024-11-02 23:42:15,021:INFO:             IPython: 8.14.0
2024-11-02 23:42:15,021:INFO:          ipywidgets: 8.1.5
2024-11-02 23:42:15,021:INFO:                tqdm: 4.66.6
2024-11-02 23:42:15,021:INFO:               numpy: 1.26.4
2024-11-02 23:42:15,021:INFO:              pandas: 2.1.4
2024-11-02 23:42:15,021:INFO:              jinja2: 3.1.4
2024-11-02 23:42:15,021:INFO:               scipy: 1.11.4
2024-11-02 23:42:15,021:INFO:              joblib: 1.3.2
2024-11-02 23:42:15,021:INFO:             sklearn: 1.4.2
2024-11-02 23:42:15,021:INFO:                pyod: 2.0.2
2024-11-02 23:42:15,021:INFO:            imblearn: 0.12.4
2024-11-02 23:42:15,021:INFO:   category_encoders: 2.6.4
2024-11-02 23:42:15,021:INFO:            lightgbm: 4.5.0
2024-11-02 23:42:15,021:INFO:               numba: 0.60.0
2024-11-02 23:42:15,021:INFO:            requests: 2.32.3
2024-11-02 23:42:15,021:INFO:          matplotlib: 3.7.5
2024-11-02 23:42:15,021:INFO:          scikitplot: 0.3.7
2024-11-02 23:42:15,021:INFO:         yellowbrick: 1.5
2024-11-02 23:42:15,021:INFO:              plotly: 5.24.1
2024-11-02 23:42:15,022:INFO:    plotly-resampler: Not installed
2024-11-02 23:42:15,022:INFO:             kaleido: 0.2.1
2024-11-02 23:42:15,022:INFO:           schemdraw: 0.15
2024-11-02 23:42:15,022:INFO:         statsmodels: 0.14.4
2024-11-02 23:42:15,022:INFO:              sktime: 0.26.0
2024-11-02 23:42:15,022:INFO:               tbats: 1.1.3
2024-11-02 23:42:15,022:INFO:            pmdarima: 2.0.4
2024-11-02 23:42:15,022:INFO:              psutil: 5.9.5
2024-11-02 23:42:15,022:INFO:          markupsafe: 3.0.2
2024-11-02 23:42:15,022:INFO:             pickle5: Not installed
2024-11-02 23:42:15,022:INFO:         cloudpickle: 3.1.0
2024-11-02 23:42:15,022:INFO:         deprecation: 2.1.0
2024-11-02 23:42:15,022:INFO:              xxhash: 3.5.0
2024-11-02 23:42:15,022:INFO:           wurlitzer: Not installed
2024-11-02 23:42:15,022:INFO:PyCaret optional dependencies:
2024-11-02 23:42:15,044:INFO:                shap: Not installed
2024-11-02 23:42:15,044:INFO:           interpret: Not installed
2024-11-02 23:42:15,044:INFO:                umap: Not installed
2024-11-02 23:42:15,045:INFO:     ydata_profiling: Not installed
2024-11-02 23:42:15,045:INFO:  explainerdashboard: Not installed
2024-11-02 23:42:15,045:INFO:             autoviz: Not installed
2024-11-02 23:42:15,045:INFO:           fairlearn: Not installed
2024-11-02 23:42:15,045:INFO:          deepchecks: Not installed
2024-11-02 23:42:15,045:INFO:             xgboost: Not installed
2024-11-02 23:42:15,045:INFO:            catboost: Not installed
2024-11-02 23:42:15,045:INFO:              kmodes: Not installed
2024-11-02 23:42:15,045:INFO:             mlxtend: Not installed
2024-11-02 23:42:15,045:INFO:       statsforecast: Not installed
2024-11-02 23:42:15,045:INFO:        tune_sklearn: Not installed
2024-11-02 23:42:15,045:INFO:                 ray: Not installed
2024-11-02 23:42:15,045:INFO:            hyperopt: Not installed
2024-11-02 23:42:15,045:INFO:              optuna: Not installed
2024-11-02 23:42:15,045:INFO:               skopt: Not installed
2024-11-02 23:42:15,045:INFO:              mlflow: Not installed
2024-11-02 23:42:15,045:INFO:              gradio: Not installed
2024-11-02 23:42:15,045:INFO:             fastapi: Not installed
2024-11-02 23:42:15,046:INFO:             uvicorn: Not installed
2024-11-02 23:42:15,046:INFO:              m2cgen: Not installed
2024-11-02 23:42:15,046:INFO:           evidently: Not installed
2024-11-02 23:42:15,046:INFO:               fugue: Not installed
2024-11-02 23:42:15,046:INFO:           streamlit: Not installed
2024-11-02 23:42:15,046:INFO:             prophet: Not installed
2024-11-02 23:42:15,046:INFO:None
2024-11-02 23:42:15,046:INFO:Set up data.
2024-11-02 23:42:15,053:INFO:Set up folding strategy.
2024-11-02 23:42:15,054:INFO:Set up train/test split.
2024-11-02 23:42:15,059:INFO:Set up index.
2024-11-02 23:42:15,060:INFO:Assigning column types.
2024-11-02 23:42:15,064:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-02 23:42:15,115:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-02 23:42:15,119:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:42:15,160:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,210:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-02 23:42:15,211:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:42:15,241:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,242:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,242:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-02 23:42:15,297:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:42:15,330:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,331:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,379:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:42:15,408:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,409:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,409:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-02 23:42:15,491:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,492:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,573:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,575:INFO:Preparing preprocessing pipeline...
2024-11-02 23:42:15,577:INFO:Set up simple imputation.
2024-11-02 23:42:15,614:INFO:Finished creating preprocessing pipeline.
2024-11-02 23:42:15,620:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-11-02 23:42:15,620:INFO:Creating final display dataframe.
2024-11-02 23:42:15,708:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (43, 14)
4        Transformed data shape          (43, 14)
5   Transformed train set shape          (30, 14)
6    Transformed test set shape          (13, 14)
7              Numeric features                13
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              4481
2024-11-02 23:42:15,800:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,800:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,881:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,882:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:42:15,883:INFO:setup() successfully completed in 0.94s...............
2024-11-02 23:42:15,884:INFO:Initializing compare_models()
2024-11-02 23:42:15,884:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-02 23:42:15,884:INFO:Checking exceptions
2024-11-02 23:42:15,889:INFO:Preparing display monitor
2024-11-02 23:42:15,894:INFO:Initializing Logistic Regression
2024-11-02 23:42:15,894:INFO:Total runtime is 0.0 minutes
2024-11-02 23:42:15,894:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:15,894:INFO:Initializing create_model()
2024-11-02 23:42:15,895:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:15,895:INFO:Checking exceptions
2024-11-02 23:42:15,895:INFO:Importing libraries
2024-11-02 23:42:15,895:INFO:Copying training dataset
2024-11-02 23:42:15,899:INFO:Defining folds
2024-11-02 23:42:15,899:INFO:Declaring metric variables
2024-11-02 23:42:15,899:INFO:Importing untrained model
2024-11-02 23:42:15,899:INFO:Logistic Regression Imported successfully
2024-11-02 23:42:15,900:INFO:Starting cross validation
2024-11-02 23:42:15,900:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:19,434:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,492:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-11-02 23:42:19,542:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,557:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,598:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,652:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,661:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,670:INFO:Calculating mean and std
2024-11-02 23:42:19,672:INFO:Creating metrics dataframe
2024-11-02 23:42:19,675:INFO:Uploading results into container
2024-11-02 23:42:19,675:INFO:Uploading model into container now
2024-11-02 23:42:19,675:INFO:_master_model_container: 1
2024-11-02 23:42:19,676:INFO:_display_container: 2
2024-11-02 23:42:19,676:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-02 23:42:19,676:INFO:create_model() successfully completed......................................
2024-11-02 23:42:19,734:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:19,734:INFO:Creating metrics dataframe
2024-11-02 23:42:19,738:INFO:Initializing K Neighbors Classifier
2024-11-02 23:42:19,738:INFO:Total runtime is 0.06407298644383748 minutes
2024-11-02 23:42:19,738:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:19,739:INFO:Initializing create_model()
2024-11-02 23:42:19,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:19,739:INFO:Checking exceptions
2024-11-02 23:42:19,739:INFO:Importing libraries
2024-11-02 23:42:19,739:INFO:Copying training dataset
2024-11-02 23:42:19,744:INFO:Defining folds
2024-11-02 23:42:19,744:INFO:Declaring metric variables
2024-11-02 23:42:19,745:INFO:Importing untrained model
2024-11-02 23:42:19,745:INFO:K Neighbors Classifier Imported successfully
2024-11-02 23:42:19,745:INFO:Starting cross validation
2024-11-02 23:42:19,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:19,832:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,849:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,851:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:19,897:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,011:INFO:Calculating mean and std
2024-11-02 23:42:20,013:INFO:Creating metrics dataframe
2024-11-02 23:42:20,015:INFO:Uploading results into container
2024-11-02 23:42:20,015:INFO:Uploading model into container now
2024-11-02 23:42:20,015:INFO:_master_model_container: 2
2024-11-02 23:42:20,015:INFO:_display_container: 2
2024-11-02 23:42:20,015:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-02 23:42:20,016:INFO:create_model() successfully completed......................................
2024-11-02 23:42:20,066:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:20,066:INFO:Creating metrics dataframe
2024-11-02 23:42:20,069:INFO:Initializing Naive Bayes
2024-11-02 23:42:20,069:INFO:Total runtime is 0.0695933977762858 minutes
2024-11-02 23:42:20,069:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:20,069:INFO:Initializing create_model()
2024-11-02 23:42:20,069:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:20,070:INFO:Checking exceptions
2024-11-02 23:42:20,070:INFO:Importing libraries
2024-11-02 23:42:20,070:INFO:Copying training dataset
2024-11-02 23:42:20,075:INFO:Defining folds
2024-11-02 23:42:20,075:INFO:Declaring metric variables
2024-11-02 23:42:20,076:INFO:Importing untrained model
2024-11-02 23:42:20,076:INFO:Naive Bayes Imported successfully
2024-11-02 23:42:20,076:INFO:Starting cross validation
2024-11-02 23:42:20,077:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:20,184:INFO:Calculating mean and std
2024-11-02 23:42:20,185:INFO:Creating metrics dataframe
2024-11-02 23:42:20,187:INFO:Uploading results into container
2024-11-02 23:42:20,187:INFO:Uploading model into container now
2024-11-02 23:42:20,188:INFO:_master_model_container: 3
2024-11-02 23:42:20,188:INFO:_display_container: 2
2024-11-02 23:42:20,188:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-02 23:42:20,188:INFO:create_model() successfully completed......................................
2024-11-02 23:42:20,236:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:20,236:INFO:Creating metrics dataframe
2024-11-02 23:42:20,239:INFO:Initializing Decision Tree Classifier
2024-11-02 23:42:20,239:INFO:Total runtime is 0.07242128054300943 minutes
2024-11-02 23:42:20,239:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:20,240:INFO:Initializing create_model()
2024-11-02 23:42:20,240:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:20,240:INFO:Checking exceptions
2024-11-02 23:42:20,240:INFO:Importing libraries
2024-11-02 23:42:20,240:INFO:Copying training dataset
2024-11-02 23:42:20,244:INFO:Defining folds
2024-11-02 23:42:20,244:INFO:Declaring metric variables
2024-11-02 23:42:20,244:INFO:Importing untrained model
2024-11-02 23:42:20,244:INFO:Decision Tree Classifier Imported successfully
2024-11-02 23:42:20,245:INFO:Starting cross validation
2024-11-02 23:42:20,245:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:20,280:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,286:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,354:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,370:INFO:Calculating mean and std
2024-11-02 23:42:20,371:INFO:Creating metrics dataframe
2024-11-02 23:42:20,373:INFO:Uploading results into container
2024-11-02 23:42:20,374:INFO:Uploading model into container now
2024-11-02 23:42:20,375:INFO:_master_model_container: 4
2024-11-02 23:42:20,375:INFO:_display_container: 2
2024-11-02 23:42:20,376:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-02 23:42:20,376:INFO:create_model() successfully completed......................................
2024-11-02 23:42:20,464:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:20,464:INFO:Creating metrics dataframe
2024-11-02 23:42:20,467:INFO:Initializing SVM - Linear Kernel
2024-11-02 23:42:20,468:INFO:Total runtime is 0.07623323996861775 minutes
2024-11-02 23:42:20,468:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:20,468:INFO:Initializing create_model()
2024-11-02 23:42:20,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:20,468:INFO:Checking exceptions
2024-11-02 23:42:20,468:INFO:Importing libraries
2024-11-02 23:42:20,468:INFO:Copying training dataset
2024-11-02 23:42:20,488:INFO:Defining folds
2024-11-02 23:42:20,488:INFO:Declaring metric variables
2024-11-02 23:42:20,489:INFO:Importing untrained model
2024-11-02 23:42:20,489:INFO:SVM - Linear Kernel Imported successfully
2024-11-02 23:42:20,489:INFO:Starting cross validation
2024-11-02 23:42:20,495:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:20,542:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-11-02 23:42:20,554:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-11-02 23:42:20,557:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,567:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,573:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,586:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,597:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,627:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,635:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,642:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,647:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,668:INFO:Calculating mean and std
2024-11-02 23:42:20,669:INFO:Creating metrics dataframe
2024-11-02 23:42:20,672:INFO:Uploading results into container
2024-11-02 23:42:20,673:INFO:Uploading model into container now
2024-11-02 23:42:20,673:INFO:_master_model_container: 5
2024-11-02 23:42:20,673:INFO:_display_container: 2
2024-11-02 23:42:20,674:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-02 23:42:20,674:INFO:create_model() successfully completed......................................
2024-11-02 23:42:20,733:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:20,733:INFO:Creating metrics dataframe
2024-11-02 23:42:20,737:INFO:Initializing Ridge Classifier
2024-11-02 23:42:20,737:INFO:Total runtime is 0.08072094519933064 minutes
2024-11-02 23:42:20,737:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:20,738:INFO:Initializing create_model()
2024-11-02 23:42:20,738:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:20,738:INFO:Checking exceptions
2024-11-02 23:42:20,738:INFO:Importing libraries
2024-11-02 23:42:20,738:INFO:Copying training dataset
2024-11-02 23:42:20,744:INFO:Defining folds
2024-11-02 23:42:20,744:INFO:Declaring metric variables
2024-11-02 23:42:20,744:INFO:Importing untrained model
2024-11-02 23:42:20,744:INFO:Ridge Classifier Imported successfully
2024-11-02 23:42:20,745:INFO:Starting cross validation
2024-11-02 23:42:20,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:20,790:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.61422e-23): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-11-02 23:42:20,798:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,834:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,881:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.61423e-23): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-11-02 23:42:20,897:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:20,918:INFO:Calculating mean and std
2024-11-02 23:42:20,919:INFO:Creating metrics dataframe
2024-11-02 23:42:20,922:INFO:Uploading results into container
2024-11-02 23:42:20,922:INFO:Uploading model into container now
2024-11-02 23:42:20,923:INFO:_master_model_container: 6
2024-11-02 23:42:20,923:INFO:_display_container: 2
2024-11-02 23:42:20,923:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-02 23:42:20,923:INFO:create_model() successfully completed......................................
2024-11-02 23:42:20,981:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:20,981:INFO:Creating metrics dataframe
2024-11-02 23:42:20,985:INFO:Initializing Random Forest Classifier
2024-11-02 23:42:20,985:INFO:Total runtime is 0.08485995133717854 minutes
2024-11-02 23:42:20,985:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:20,985:INFO:Initializing create_model()
2024-11-02 23:42:20,985:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:20,985:INFO:Checking exceptions
2024-11-02 23:42:20,985:INFO:Importing libraries
2024-11-02 23:42:20,986:INFO:Copying training dataset
2024-11-02 23:42:20,992:INFO:Defining folds
2024-11-02 23:42:20,992:INFO:Declaring metric variables
2024-11-02 23:42:20,992:INFO:Importing untrained model
2024-11-02 23:42:20,993:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:42:20,993:INFO:Starting cross validation
2024-11-02 23:42:20,993:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:21,327:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:21,365:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:21,844:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:21,853:INFO:Calculating mean and std
2024-11-02 23:42:21,854:INFO:Creating metrics dataframe
2024-11-02 23:42:21,856:INFO:Uploading results into container
2024-11-02 23:42:21,856:INFO:Uploading model into container now
2024-11-02 23:42:21,856:INFO:_master_model_container: 7
2024-11-02 23:42:21,856:INFO:_display_container: 2
2024-11-02 23:42:21,857:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:42:21,857:INFO:create_model() successfully completed......................................
2024-11-02 23:42:21,908:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:21,908:INFO:Creating metrics dataframe
2024-11-02 23:42:21,910:INFO:Initializing Quadratic Discriminant Analysis
2024-11-02 23:42:21,910:INFO:Total runtime is 0.10027714172999064 minutes
2024-11-02 23:42:21,911:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:21,911:INFO:Initializing create_model()
2024-11-02 23:42:21,911:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:21,911:INFO:Checking exceptions
2024-11-02 23:42:21,911:INFO:Importing libraries
2024-11-02 23:42:21,911:INFO:Copying training dataset
2024-11-02 23:42:21,915:INFO:Defining folds
2024-11-02 23:42:21,915:INFO:Declaring metric variables
2024-11-02 23:42:21,915:INFO:Importing untrained model
2024-11-02 23:42:21,915:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-02 23:42:21,916:INFO:Starting cross validation
2024-11-02 23:42:21,918:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:21,946:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,946:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,946:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,953:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,960:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:21,960:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:21,974:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,979:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,982:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:21,992:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:21,996:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:22,003:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:22,009:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:42:22,043:INFO:Calculating mean and std
2024-11-02 23:42:22,044:INFO:Creating metrics dataframe
2024-11-02 23:42:22,046:INFO:Uploading results into container
2024-11-02 23:42:22,046:INFO:Uploading model into container now
2024-11-02 23:42:22,046:INFO:_master_model_container: 8
2024-11-02 23:42:22,047:INFO:_display_container: 2
2024-11-02 23:42:22,047:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-02 23:42:22,047:INFO:create_model() successfully completed......................................
2024-11-02 23:42:22,094:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:22,094:INFO:Creating metrics dataframe
2024-11-02 23:42:22,097:INFO:Initializing Ada Boost Classifier
2024-11-02 23:42:22,097:INFO:Total runtime is 0.10339161952336628 minutes
2024-11-02 23:42:22,097:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:22,097:INFO:Initializing create_model()
2024-11-02 23:42:22,097:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:22,097:INFO:Checking exceptions
2024-11-02 23:42:22,097:INFO:Importing libraries
2024-11-02 23:42:22,097:INFO:Copying training dataset
2024-11-02 23:42:22,101:INFO:Defining folds
2024-11-02 23:42:22,101:INFO:Declaring metric variables
2024-11-02 23:42:22,101:INFO:Importing untrained model
2024-11-02 23:42:22,102:INFO:Ada Boost Classifier Imported successfully
2024-11-02 23:42:22,102:INFO:Starting cross validation
2024-11-02 23:42:22,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:22,123:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,125:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,125:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,128:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,230:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:22,246:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,247:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,247:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,252:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:22,271:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,382:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,388:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:42:22,485:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:22,501:INFO:Calculating mean and std
2024-11-02 23:42:22,502:INFO:Creating metrics dataframe
2024-11-02 23:42:22,504:INFO:Uploading results into container
2024-11-02 23:42:22,504:INFO:Uploading model into container now
2024-11-02 23:42:22,505:INFO:_master_model_container: 9
2024-11-02 23:42:22,505:INFO:_display_container: 2
2024-11-02 23:42:22,505:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-02 23:42:22,505:INFO:create_model() successfully completed......................................
2024-11-02 23:42:22,555:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:22,556:INFO:Creating metrics dataframe
2024-11-02 23:42:22,558:INFO:Initializing Gradient Boosting Classifier
2024-11-02 23:42:22,558:INFO:Total runtime is 0.11107242902119954 minutes
2024-11-02 23:42:22,559:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:22,559:INFO:Initializing create_model()
2024-11-02 23:42:22,559:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:22,559:INFO:Checking exceptions
2024-11-02 23:42:22,559:INFO:Importing libraries
2024-11-02 23:42:22,559:INFO:Copying training dataset
2024-11-02 23:42:22,563:INFO:Defining folds
2024-11-02 23:42:22,564:INFO:Declaring metric variables
2024-11-02 23:42:22,564:INFO:Importing untrained model
2024-11-02 23:42:22,564:INFO:Gradient Boosting Classifier Imported successfully
2024-11-02 23:42:22,564:INFO:Starting cross validation
2024-11-02 23:42:22,565:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:22,692:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:22,699:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:22,912:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:22,939:INFO:Calculating mean and std
2024-11-02 23:42:22,941:INFO:Creating metrics dataframe
2024-11-02 23:42:22,943:INFO:Uploading results into container
2024-11-02 23:42:22,943:INFO:Uploading model into container now
2024-11-02 23:42:22,944:INFO:_master_model_container: 10
2024-11-02 23:42:22,944:INFO:_display_container: 2
2024-11-02 23:42:22,944:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-02 23:42:22,945:INFO:create_model() successfully completed......................................
2024-11-02 23:42:22,995:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:22,995:INFO:Creating metrics dataframe
2024-11-02 23:42:22,998:INFO:Initializing Linear Discriminant Analysis
2024-11-02 23:42:22,998:INFO:Total runtime is 0.1183943231900533 minutes
2024-11-02 23:42:22,998:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:22,998:INFO:Initializing create_model()
2024-11-02 23:42:22,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:22,998:INFO:Checking exceptions
2024-11-02 23:42:22,998:INFO:Importing libraries
2024-11-02 23:42:22,998:INFO:Copying training dataset
2024-11-02 23:42:23,001:INFO:Defining folds
2024-11-02 23:42:23,001:INFO:Declaring metric variables
2024-11-02 23:42:23,002:INFO:Importing untrained model
2024-11-02 23:42:23,002:INFO:Linear Discriminant Analysis Imported successfully
2024-11-02 23:42:23,002:INFO:Starting cross validation
2024-11-02 23:42:23,003:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:23,035:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:23,064:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:23,098:INFO:Calculating mean and std
2024-11-02 23:42:23,099:INFO:Creating metrics dataframe
2024-11-02 23:42:23,101:INFO:Uploading results into container
2024-11-02 23:42:23,101:INFO:Uploading model into container now
2024-11-02 23:42:23,102:INFO:_master_model_container: 11
2024-11-02 23:42:23,102:INFO:_display_container: 2
2024-11-02 23:42:23,102:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-02 23:42:23,102:INFO:create_model() successfully completed......................................
2024-11-02 23:42:23,150:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:23,150:INFO:Creating metrics dataframe
2024-11-02 23:42:23,152:INFO:Initializing Extra Trees Classifier
2024-11-02 23:42:23,152:INFO:Total runtime is 0.12097750902175904 minutes
2024-11-02 23:42:23,152:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:23,152:INFO:Initializing create_model()
2024-11-02 23:42:23,152:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:23,153:INFO:Checking exceptions
2024-11-02 23:42:23,153:INFO:Importing libraries
2024-11-02 23:42:23,153:INFO:Copying training dataset
2024-11-02 23:42:23,156:INFO:Defining folds
2024-11-02 23:42:23,157:INFO:Declaring metric variables
2024-11-02 23:42:23,157:INFO:Importing untrained model
2024-11-02 23:42:23,157:INFO:Extra Trees Classifier Imported successfully
2024-11-02 23:42:23,157:INFO:Starting cross validation
2024-11-02 23:42:23,158:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:23,399:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:23,771:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:23,811:INFO:Calculating mean and std
2024-11-02 23:42:23,812:INFO:Creating metrics dataframe
2024-11-02 23:42:23,814:INFO:Uploading results into container
2024-11-02 23:42:23,814:INFO:Uploading model into container now
2024-11-02 23:42:23,815:INFO:_master_model_container: 12
2024-11-02 23:42:23,815:INFO:_display_container: 2
2024-11-02 23:42:23,815:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-02 23:42:23,815:INFO:create_model() successfully completed......................................
2024-11-02 23:42:23,864:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:23,864:INFO:Creating metrics dataframe
2024-11-02 23:42:23,867:INFO:Initializing Light Gradient Boosting Machine
2024-11-02 23:42:23,867:INFO:Total runtime is 0.1328913648923238 minutes
2024-11-02 23:42:23,867:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:23,867:INFO:Initializing create_model()
2024-11-02 23:42:23,867:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:23,867:INFO:Checking exceptions
2024-11-02 23:42:23,867:INFO:Importing libraries
2024-11-02 23:42:23,867:INFO:Copying training dataset
2024-11-02 23:42:23,872:INFO:Defining folds
2024-11-02 23:42:23,872:INFO:Declaring metric variables
2024-11-02 23:42:23,872:INFO:Importing untrained model
2024-11-02 23:42:23,872:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-02 23:42:23,872:INFO:Starting cross validation
2024-11-02 23:42:23,873:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:24,092:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,096:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,109:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,130:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,324:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,325:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,347:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,393:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,456:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,471:INFO:Calculating mean and std
2024-11-02 23:42:24,472:INFO:Creating metrics dataframe
2024-11-02 23:42:24,474:INFO:Uploading results into container
2024-11-02 23:42:24,474:INFO:Uploading model into container now
2024-11-02 23:42:24,475:INFO:_master_model_container: 13
2024-11-02 23:42:24,475:INFO:_display_container: 2
2024-11-02 23:42:24,475:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-02 23:42:24,475:INFO:create_model() successfully completed......................................
2024-11-02 23:42:24,525:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:24,525:INFO:Creating metrics dataframe
2024-11-02 23:42:24,528:INFO:Initializing Dummy Classifier
2024-11-02 23:42:24,528:INFO:Total runtime is 0.14390688737233479 minutes
2024-11-02 23:42:24,528:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:24,529:INFO:Initializing create_model()
2024-11-02 23:42:24,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6970E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:24,529:INFO:Checking exceptions
2024-11-02 23:42:24,529:INFO:Importing libraries
2024-11-02 23:42:24,529:INFO:Copying training dataset
2024-11-02 23:42:24,532:INFO:Defining folds
2024-11-02 23:42:24,533:INFO:Declaring metric variables
2024-11-02 23:42:24,533:INFO:Importing untrained model
2024-11-02 23:42:24,533:INFO:Dummy Classifier Imported successfully
2024-11-02 23:42:24,533:INFO:Starting cross validation
2024-11-02 23:42:24,534:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:24,561:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,563:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,563:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,571:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,586:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,589:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,592:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,611:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,613:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,614:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:24,627:INFO:Calculating mean and std
2024-11-02 23:42:24,628:INFO:Creating metrics dataframe
2024-11-02 23:42:24,629:INFO:Uploading results into container
2024-11-02 23:42:24,629:INFO:Uploading model into container now
2024-11-02 23:42:24,630:INFO:_master_model_container: 14
2024-11-02 23:42:24,630:INFO:_display_container: 2
2024-11-02 23:42:24,630:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-02 23:42:24,630:INFO:create_model() successfully completed......................................
2024-11-02 23:42:24,679:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:24,679:INFO:Creating metrics dataframe
2024-11-02 23:42:24,683:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-02 23:42:24,685:INFO:Initializing create_model()
2024-11-02 23:42:24,685:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:24,685:INFO:Checking exceptions
2024-11-02 23:42:24,686:INFO:Importing libraries
2024-11-02 23:42:24,686:INFO:Copying training dataset
2024-11-02 23:42:24,691:INFO:Defining folds
2024-11-02 23:42:24,691:INFO:Declaring metric variables
2024-11-02 23:42:24,691:INFO:Importing untrained model
2024-11-02 23:42:24,691:INFO:Declaring custom model
2024-11-02 23:42:24,692:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:42:24,692:INFO:Cross validation set to False
2024-11-02 23:42:24,692:INFO:Fitting Model
2024-11-02 23:42:24,862:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:42:24,862:INFO:create_model() successfully completed......................................
2024-11-02 23:42:24,938:INFO:_master_model_container: 14
2024-11-02 23:42:24,938:INFO:_display_container: 2
2024-11-02 23:42:24,939:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:42:24,939:INFO:compare_models() successfully completed......................................
2024-11-02 23:42:24,940:INFO:Initializing tune_model()
2024-11-02 23:42:24,940:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>)
2024-11-02 23:42:24,940:INFO:Checking exceptions
2024-11-02 23:42:24,945:INFO:Copying training dataset
2024-11-02 23:42:24,950:INFO:Checking base model
2024-11-02 23:42:24,950:INFO:Base model : Random Forest Classifier
2024-11-02 23:42:24,951:INFO:Declaring metric variables
2024-11-02 23:42:24,951:INFO:Defining Hyperparameters
2024-11-02 23:42:25,014:INFO:Tuning with n_jobs=-1
2024-11-02 23:42:25,014:INFO:Initializing RandomizedSearchCV
2024-11-02 23:42:32,460:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2024-11-02 23:42:32,461:INFO:Hyperparameter search completed
2024-11-02 23:42:32,461:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:32,461:INFO:Initializing create_model()
2024-11-02 23:42:32,462:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A1D6512580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2024-11-02 23:42:32,462:INFO:Checking exceptions
2024-11-02 23:42:32,462:INFO:Importing libraries
2024-11-02 23:42:32,462:INFO:Copying training dataset
2024-11-02 23:42:32,466:INFO:Defining folds
2024-11-02 23:42:32,466:INFO:Declaring metric variables
2024-11-02 23:42:32,466:INFO:Importing untrained model
2024-11-02 23:42:32,466:INFO:Declaring custom model
2024-11-02 23:42:32,467:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:42:32,467:INFO:Starting cross validation
2024-11-02 23:42:32,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:32,883:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:33,593:INFO:Calculating mean and std
2024-11-02 23:42:33,594:INFO:Creating metrics dataframe
2024-11-02 23:42:33,596:INFO:Finalizing model
2024-11-02 23:42:33,878:INFO:Uploading results into container
2024-11-02 23:42:33,879:INFO:Uploading model into container now
2024-11-02 23:42:33,880:INFO:_master_model_container: 15
2024-11-02 23:42:33,880:INFO:_display_container: 3
2024-11-02 23:42:33,880:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-02 23:42:33,880:INFO:create_model() successfully completed......................................
2024-11-02 23:42:33,930:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:33,930:INFO:choose_better activated
2024-11-02 23:42:33,930:INFO:SubProcess create_model() called ==================================
2024-11-02 23:42:33,931:INFO:Initializing create_model()
2024-11-02 23:42:33,931:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:33,931:INFO:Checking exceptions
2024-11-02 23:42:33,931:INFO:Importing libraries
2024-11-02 23:42:33,931:INFO:Copying training dataset
2024-11-02 23:42:33,937:INFO:Defining folds
2024-11-02 23:42:33,937:INFO:Declaring metric variables
2024-11-02 23:42:33,937:INFO:Importing untrained model
2024-11-02 23:42:33,938:INFO:Declaring custom model
2024-11-02 23:42:33,938:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:42:33,938:INFO:Starting cross validation
2024-11-02 23:42:33,939:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:42:34,197:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:34,244:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:34,710:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:42:34,764:INFO:Calculating mean and std
2024-11-02 23:42:34,765:INFO:Creating metrics dataframe
2024-11-02 23:42:34,767:INFO:Finalizing model
2024-11-02 23:42:34,937:INFO:Uploading results into container
2024-11-02 23:42:34,938:INFO:Uploading model into container now
2024-11-02 23:42:34,938:INFO:_master_model_container: 16
2024-11-02 23:42:34,938:INFO:_display_container: 4
2024-11-02 23:42:34,938:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:42:34,938:INFO:create_model() successfully completed......................................
2024-11-02 23:42:34,986:INFO:SubProcess create_model() end ==================================
2024-11-02 23:42:34,987:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.8667
2024-11-02 23:42:34,987:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.9333
2024-11-02 23:42:34,988:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2024-11-02 23:42:34,988:INFO:choose_better completed
2024-11-02 23:42:35,002:INFO:_master_model_container: 16
2024-11-02 23:42:35,002:INFO:_display_container: 3
2024-11-02 23:42:35,002:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-02 23:42:35,002:INFO:tune_model() successfully completed......................................
2024-11-02 23:42:35,056:INFO:Initializing finalize_model()
2024-11-02 23:42:35,056:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-02 23:42:35,056:INFO:Finalizing RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-02 23:42:35,060:INFO:Initializing create_model()
2024-11-02 23:42:35,060:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A1BF3F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:42:35,060:INFO:Checking exceptions
2024-11-02 23:42:35,061:INFO:Importing libraries
2024-11-02 23:42:35,061:INFO:Copying training dataset
2024-11-02 23:42:35,061:INFO:Defining folds
2024-11-02 23:42:35,061:INFO:Declaring metric variables
2024-11-02 23:42:35,061:INFO:Importing untrained model
2024-11-02 23:42:35,061:INFO:Declaring custom model
2024-11-02 23:42:35,062:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:42:35,062:INFO:Cross validation set to False
2024-11-02 23:42:35,063:INFO:Fitting Model
2024-11-02 23:42:35,350:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-02 23:42:35,350:INFO:create_model() successfully completed......................................
2024-11-02 23:42:35,399:INFO:_master_model_container: 16
2024-11-02 23:42:35,399:INFO:_display_container: 3
2024-11-02 23:42:35,404:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-02 23:42:35,404:INFO:finalize_model() successfully completed......................................
2024-11-02 23:42:35,459:INFO:Initializing save_model()
2024-11-02 23:42:35,459:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=pump_detector_final, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-02 23:42:35,459:INFO:Adding model into prep_pipe
2024-11-02 23:42:35,459:WARNING:Only Model saved as it was a pipeline.
2024-11-02 23:42:35,517:INFO:pump_detector_final.pkl saved in current working directory
2024-11-02 23:42:35,522:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-02 23:42:35,522:INFO:save_model() successfully completed......................................
2024-11-02 23:43:06,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:43:06,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:43:06,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:43:06,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:43:07,883:INFO:Initializing load_model()
2024-11-02 23:43:07,883:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-02 23:43:08,005:INFO:Initializing predict_model()
2024-11-02 23:43:08,005:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002DE93E4D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002DE99522F70>)
2024-11-02 23:43:08,005:INFO:Checking exceptions
2024-11-02 23:43:08,005:INFO:Preloading libraries
2024-11-02 23:43:08,006:INFO:Set up data.
2024-11-02 23:43:08,009:INFO:Set up index.
2024-11-02 23:45:30,514:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:45:30,514:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:45:30,514:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:45:30,514:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:45:32,101:INFO:PyCaret ClassificationExperiment
2024-11-02 23:45:32,101:INFO:Logging name: clf-default-name
2024-11-02 23:45:32,101:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-02 23:45:32,101:INFO:version 3.3.2
2024-11-02 23:45:32,101:INFO:Initializing setup()
2024-11-02 23:45:32,101:INFO:self.USI: df2f
2024-11-02 23:45:32,101:INFO:self._variable_keys: {'X_train', '_available_plots', 'html_param', 'gpu_n_jobs_param', '_ml_usecase', 'idx', 'is_multiclass', 'seed', 'logging_param', 'exp_id', 'USI', 'exp_name_log', 'fix_imbalance', 'y', 'gpu_param', 'y_train', 'pipeline', 'X', 'fold_generator', 'y_test', 'fold_shuffle_param', 'data', 'memory', 'target_param', 'fold_groups_param', 'n_jobs_param', 'X_test', 'log_plots_param'}
2024-11-02 23:45:32,101:INFO:Checking environment
2024-11-02 23:45:32,102:INFO:python_version: 3.9.5
2024-11-02 23:45:32,102:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-02 23:45:32,102:INFO:machine: AMD64
2024-11-02 23:45:32,116:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-02 23:45:32,120:INFO:Memory: svmem(total=17098203136, available=5406564352, percent=68.4, used=11691638784, free=5406564352)
2024-11-02 23:45:32,120:INFO:Physical Core: 4
2024-11-02 23:45:32,120:INFO:Logical Core: 4
2024-11-02 23:45:32,120:INFO:Checking libraries
2024-11-02 23:45:32,120:INFO:System:
2024-11-02 23:45:32,120:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-02 23:45:32,120:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-02 23:45:32,120:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-02 23:45:32,120:INFO:PyCaret required dependencies:
2024-11-02 23:45:32,179:INFO:                 pip: 21.1.3
2024-11-02 23:45:32,179:INFO:          setuptools: 52.0.0.post20210125
2024-11-02 23:45:32,179:INFO:             pycaret: 3.3.2
2024-11-02 23:45:32,179:INFO:             IPython: 8.14.0
2024-11-02 23:45:32,179:INFO:          ipywidgets: 8.1.5
2024-11-02 23:45:32,179:INFO:                tqdm: 4.66.6
2024-11-02 23:45:32,179:INFO:               numpy: 1.26.4
2024-11-02 23:45:32,180:INFO:              pandas: 2.1.4
2024-11-02 23:45:32,180:INFO:              jinja2: 3.1.4
2024-11-02 23:45:32,180:INFO:               scipy: 1.11.4
2024-11-02 23:45:32,180:INFO:              joblib: 1.3.2
2024-11-02 23:45:32,180:INFO:             sklearn: 1.4.2
2024-11-02 23:45:32,180:INFO:                pyod: 2.0.2
2024-11-02 23:45:32,180:INFO:            imblearn: 0.12.4
2024-11-02 23:45:32,180:INFO:   category_encoders: 2.6.4
2024-11-02 23:45:32,180:INFO:            lightgbm: 4.5.0
2024-11-02 23:45:32,180:INFO:               numba: 0.60.0
2024-11-02 23:45:32,180:INFO:            requests: 2.32.3
2024-11-02 23:45:32,180:INFO:          matplotlib: 3.7.5
2024-11-02 23:45:32,180:INFO:          scikitplot: 0.3.7
2024-11-02 23:45:32,180:INFO:         yellowbrick: 1.5
2024-11-02 23:45:32,180:INFO:              plotly: 5.24.1
2024-11-02 23:45:32,180:INFO:    plotly-resampler: Not installed
2024-11-02 23:45:32,180:INFO:             kaleido: 0.2.1
2024-11-02 23:45:32,180:INFO:           schemdraw: 0.15
2024-11-02 23:45:32,180:INFO:         statsmodels: 0.14.4
2024-11-02 23:45:32,180:INFO:              sktime: 0.26.0
2024-11-02 23:45:32,181:INFO:               tbats: 1.1.3
2024-11-02 23:45:32,181:INFO:            pmdarima: 2.0.4
2024-11-02 23:45:32,181:INFO:              psutil: 5.9.5
2024-11-02 23:45:32,181:INFO:          markupsafe: 3.0.2
2024-11-02 23:45:32,181:INFO:             pickle5: Not installed
2024-11-02 23:45:32,181:INFO:         cloudpickle: 3.1.0
2024-11-02 23:45:32,181:INFO:         deprecation: 2.1.0
2024-11-02 23:45:32,181:INFO:              xxhash: 3.5.0
2024-11-02 23:45:32,181:INFO:           wurlitzer: Not installed
2024-11-02 23:45:32,181:INFO:PyCaret optional dependencies:
2024-11-02 23:45:32,209:INFO:                shap: Not installed
2024-11-02 23:45:32,209:INFO:           interpret: Not installed
2024-11-02 23:45:32,209:INFO:                umap: Not installed
2024-11-02 23:45:32,209:INFO:     ydata_profiling: Not installed
2024-11-02 23:45:32,209:INFO:  explainerdashboard: Not installed
2024-11-02 23:45:32,209:INFO:             autoviz: Not installed
2024-11-02 23:45:32,210:INFO:           fairlearn: Not installed
2024-11-02 23:45:32,210:INFO:          deepchecks: Not installed
2024-11-02 23:45:32,210:INFO:             xgboost: Not installed
2024-11-02 23:45:32,210:INFO:            catboost: Not installed
2024-11-02 23:45:32,210:INFO:              kmodes: Not installed
2024-11-02 23:45:32,210:INFO:             mlxtend: Not installed
2024-11-02 23:45:32,210:INFO:       statsforecast: Not installed
2024-11-02 23:45:32,210:INFO:        tune_sklearn: Not installed
2024-11-02 23:45:32,210:INFO:                 ray: Not installed
2024-11-02 23:45:32,210:INFO:            hyperopt: Not installed
2024-11-02 23:45:32,210:INFO:              optuna: Not installed
2024-11-02 23:45:32,210:INFO:               skopt: Not installed
2024-11-02 23:45:32,210:INFO:              mlflow: Not installed
2024-11-02 23:45:32,210:INFO:              gradio: Not installed
2024-11-02 23:45:32,210:INFO:             fastapi: Not installed
2024-11-02 23:45:32,210:INFO:             uvicorn: Not installed
2024-11-02 23:45:32,210:INFO:              m2cgen: Not installed
2024-11-02 23:45:32,210:INFO:           evidently: Not installed
2024-11-02 23:45:32,210:INFO:               fugue: Not installed
2024-11-02 23:45:32,210:INFO:           streamlit: Not installed
2024-11-02 23:45:32,210:INFO:             prophet: Not installed
2024-11-02 23:45:32,211:INFO:None
2024-11-02 23:45:32,211:INFO:Set up data.
2024-11-02 23:45:32,220:INFO:Set up folding strategy.
2024-11-02 23:45:32,220:INFO:Set up train/test split.
2024-11-02 23:45:32,226:INFO:Set up index.
2024-11-02 23:45:32,227:INFO:Assigning column types.
2024-11-02 23:45:32,232:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-02 23:45:32,294:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-02 23:45:32,299:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:45:32,345:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,347:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,405:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-02 23:45:32,407:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:45:32,449:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,450:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,451:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-02 23:45:32,518:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:45:32,556:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,556:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,642:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-02 23:45:32,707:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,707:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,708:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-02 23:45:32,877:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,989:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:32,991:INFO:Preparing preprocessing pipeline...
2024-11-02 23:45:32,992:INFO:Set up simple imputation.
2024-11-02 23:45:33,019:INFO:Finished creating preprocessing pipeline.
2024-11-02 23:45:33,024:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-11-02 23:45:33,024:INFO:Creating final display dataframe.
2024-11-02 23:45:33,112:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (43, 14)
4        Transformed data shape          (43, 14)
5   Transformed train set shape          (30, 14)
6    Transformed test set shape          (13, 14)
7              Numeric features                13
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              df2f
2024-11-02 23:45:33,211:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:33,211:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:33,298:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:33,298:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-02 23:45:33,300:INFO:setup() successfully completed in 1.2s...............
2024-11-02 23:45:33,301:INFO:Initializing compare_models()
2024-11-02 23:45:33,301:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-02 23:45:33,301:INFO:Checking exceptions
2024-11-02 23:45:33,305:INFO:Preparing display monitor
2024-11-02 23:45:33,309:INFO:Initializing Logistic Regression
2024-11-02 23:45:33,309:INFO:Total runtime is 0.0 minutes
2024-11-02 23:45:33,309:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:33,309:INFO:Initializing create_model()
2024-11-02 23:45:33,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:33,309:INFO:Checking exceptions
2024-11-02 23:45:33,309:INFO:Importing libraries
2024-11-02 23:45:33,309:INFO:Copying training dataset
2024-11-02 23:45:33,314:INFO:Defining folds
2024-11-02 23:45:33,315:INFO:Declaring metric variables
2024-11-02 23:45:33,315:INFO:Importing untrained model
2024-11-02 23:45:33,315:INFO:Logistic Regression Imported successfully
2024-11-02 23:45:33,316:INFO:Starting cross validation
2024-11-02 23:45:33,316:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:36,845:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:36,850:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:36,924:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-11-02 23:45:36,949:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,003:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,017:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,029:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,050:INFO:Calculating mean and std
2024-11-02 23:45:37,051:INFO:Creating metrics dataframe
2024-11-02 23:45:37,053:INFO:Uploading results into container
2024-11-02 23:45:37,054:INFO:Uploading model into container now
2024-11-02 23:45:37,054:INFO:_master_model_container: 1
2024-11-02 23:45:37,054:INFO:_display_container: 2
2024-11-02 23:45:37,054:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-02 23:45:37,054:INFO:create_model() successfully completed......................................
2024-11-02 23:45:37,110:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:37,110:INFO:Creating metrics dataframe
2024-11-02 23:45:37,112:INFO:Initializing K Neighbors Classifier
2024-11-02 23:45:37,112:INFO:Total runtime is 0.06337939500808716 minutes
2024-11-02 23:45:37,112:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:37,113:INFO:Initializing create_model()
2024-11-02 23:45:37,113:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:37,113:INFO:Checking exceptions
2024-11-02 23:45:37,113:INFO:Importing libraries
2024-11-02 23:45:37,113:INFO:Copying training dataset
2024-11-02 23:45:37,117:INFO:Defining folds
2024-11-02 23:45:37,117:INFO:Declaring metric variables
2024-11-02 23:45:37,117:INFO:Importing untrained model
2024-11-02 23:45:37,118:INFO:K Neighbors Classifier Imported successfully
2024-11-02 23:45:37,118:INFO:Starting cross validation
2024-11-02 23:45:37,119:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:37,200:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,200:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,202:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,281:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,349:INFO:Calculating mean and std
2024-11-02 23:45:37,350:INFO:Creating metrics dataframe
2024-11-02 23:45:37,352:INFO:Uploading results into container
2024-11-02 23:45:37,352:INFO:Uploading model into container now
2024-11-02 23:45:37,352:INFO:_master_model_container: 2
2024-11-02 23:45:37,352:INFO:_display_container: 2
2024-11-02 23:45:37,353:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-02 23:45:37,353:INFO:create_model() successfully completed......................................
2024-11-02 23:45:37,405:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:37,405:INFO:Creating metrics dataframe
2024-11-02 23:45:37,408:INFO:Initializing Naive Bayes
2024-11-02 23:45:37,408:INFO:Total runtime is 0.06831640005111694 minutes
2024-11-02 23:45:37,408:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:37,409:INFO:Initializing create_model()
2024-11-02 23:45:37,409:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:37,409:INFO:Checking exceptions
2024-11-02 23:45:37,409:INFO:Importing libraries
2024-11-02 23:45:37,409:INFO:Copying training dataset
2024-11-02 23:45:37,414:INFO:Defining folds
2024-11-02 23:45:37,414:INFO:Declaring metric variables
2024-11-02 23:45:37,414:INFO:Importing untrained model
2024-11-02 23:45:37,414:INFO:Naive Bayes Imported successfully
2024-11-02 23:45:37,414:INFO:Starting cross validation
2024-11-02 23:45:37,415:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:37,524:INFO:Calculating mean and std
2024-11-02 23:45:37,525:INFO:Creating metrics dataframe
2024-11-02 23:45:37,526:INFO:Uploading results into container
2024-11-02 23:45:37,527:INFO:Uploading model into container now
2024-11-02 23:45:37,527:INFO:_master_model_container: 3
2024-11-02 23:45:37,527:INFO:_display_container: 2
2024-11-02 23:45:37,527:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-02 23:45:37,528:INFO:create_model() successfully completed......................................
2024-11-02 23:45:37,580:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:37,581:INFO:Creating metrics dataframe
2024-11-02 23:45:37,583:INFO:Initializing Decision Tree Classifier
2024-11-02 23:45:37,583:INFO:Total runtime is 0.07123861312866211 minutes
2024-11-02 23:45:37,583:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:37,584:INFO:Initializing create_model()
2024-11-02 23:45:37,584:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:37,584:INFO:Checking exceptions
2024-11-02 23:45:37,584:INFO:Importing libraries
2024-11-02 23:45:37,584:INFO:Copying training dataset
2024-11-02 23:45:37,588:INFO:Defining folds
2024-11-02 23:45:37,589:INFO:Declaring metric variables
2024-11-02 23:45:37,589:INFO:Importing untrained model
2024-11-02 23:45:37,589:INFO:Decision Tree Classifier Imported successfully
2024-11-02 23:45:37,589:INFO:Starting cross validation
2024-11-02 23:45:37,590:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:37,621:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,628:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,678:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,697:INFO:Calculating mean and std
2024-11-02 23:45:37,698:INFO:Creating metrics dataframe
2024-11-02 23:45:37,700:INFO:Uploading results into container
2024-11-02 23:45:37,700:INFO:Uploading model into container now
2024-11-02 23:45:37,701:INFO:_master_model_container: 4
2024-11-02 23:45:37,701:INFO:_display_container: 2
2024-11-02 23:45:37,701:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-02 23:45:37,701:INFO:create_model() successfully completed......................................
2024-11-02 23:45:37,754:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:37,754:INFO:Creating metrics dataframe
2024-11-02 23:45:37,756:INFO:Initializing SVM - Linear Kernel
2024-11-02 23:45:37,757:INFO:Total runtime is 0.07412744363149008 minutes
2024-11-02 23:45:37,757:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:37,757:INFO:Initializing create_model()
2024-11-02 23:45:37,757:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:37,757:INFO:Checking exceptions
2024-11-02 23:45:37,757:INFO:Importing libraries
2024-11-02 23:45:37,757:INFO:Copying training dataset
2024-11-02 23:45:37,762:INFO:Defining folds
2024-11-02 23:45:37,762:INFO:Declaring metric variables
2024-11-02 23:45:37,762:INFO:Importing untrained model
2024-11-02 23:45:37,762:INFO:SVM - Linear Kernel Imported successfully
2024-11-02 23:45:37,763:INFO:Starting cross validation
2024-11-02 23:45:37,763:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:37,787:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-11-02 23:45:37,789:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-11-02 23:45:37,799:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,803:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,814:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,828:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,832:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,840:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,852:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,861:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,863:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:37,870:INFO:Calculating mean and std
2024-11-02 23:45:37,871:INFO:Creating metrics dataframe
2024-11-02 23:45:37,873:INFO:Uploading results into container
2024-11-02 23:45:37,873:INFO:Uploading model into container now
2024-11-02 23:45:37,873:INFO:_master_model_container: 5
2024-11-02 23:45:37,873:INFO:_display_container: 2
2024-11-02 23:45:37,874:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-02 23:45:37,874:INFO:create_model() successfully completed......................................
2024-11-02 23:45:37,928:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:37,928:INFO:Creating metrics dataframe
2024-11-02 23:45:37,932:INFO:Initializing Ridge Classifier
2024-11-02 23:45:37,932:INFO:Total runtime is 0.07704695860544841 minutes
2024-11-02 23:45:37,932:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:37,933:INFO:Initializing create_model()
2024-11-02 23:45:37,933:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:37,933:INFO:Checking exceptions
2024-11-02 23:45:37,933:INFO:Importing libraries
2024-11-02 23:45:37,933:INFO:Copying training dataset
2024-11-02 23:45:37,937:INFO:Defining folds
2024-11-02 23:45:37,937:INFO:Declaring metric variables
2024-11-02 23:45:37,937:INFO:Importing untrained model
2024-11-02 23:45:37,937:INFO:Ridge Classifier Imported successfully
2024-11-02 23:45:37,938:INFO:Starting cross validation
2024-11-02 23:45:37,938:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:37,966:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.61422e-23): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-11-02 23:45:37,972:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:38,002:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:38,020:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.61423e-23): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-11-02 23:45:38,032:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:38,042:INFO:Calculating mean and std
2024-11-02 23:45:38,043:INFO:Creating metrics dataframe
2024-11-02 23:45:38,045:INFO:Uploading results into container
2024-11-02 23:45:38,046:INFO:Uploading model into container now
2024-11-02 23:45:38,046:INFO:_master_model_container: 6
2024-11-02 23:45:38,046:INFO:_display_container: 2
2024-11-02 23:45:38,047:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-02 23:45:38,047:INFO:create_model() successfully completed......................................
2024-11-02 23:45:38,099:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:38,099:INFO:Creating metrics dataframe
2024-11-02 23:45:38,102:INFO:Initializing Random Forest Classifier
2024-11-02 23:45:38,102:INFO:Total runtime is 0.07987825473149618 minutes
2024-11-02 23:45:38,102:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:38,102:INFO:Initializing create_model()
2024-11-02 23:45:38,102:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:38,102:INFO:Checking exceptions
2024-11-02 23:45:38,102:INFO:Importing libraries
2024-11-02 23:45:38,102:INFO:Copying training dataset
2024-11-02 23:45:38,107:INFO:Defining folds
2024-11-02 23:45:38,107:INFO:Declaring metric variables
2024-11-02 23:45:38,107:INFO:Importing untrained model
2024-11-02 23:45:38,107:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:45:38,108:INFO:Starting cross validation
2024-11-02 23:45:38,108:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:38,483:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:38,488:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:38,933:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:38,971:INFO:Calculating mean and std
2024-11-02 23:45:38,972:INFO:Creating metrics dataframe
2024-11-02 23:45:38,974:INFO:Uploading results into container
2024-11-02 23:45:38,974:INFO:Uploading model into container now
2024-11-02 23:45:38,975:INFO:_master_model_container: 7
2024-11-02 23:45:38,975:INFO:_display_container: 2
2024-11-02 23:45:38,975:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:45:38,976:INFO:create_model() successfully completed......................................
2024-11-02 23:45:39,026:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:39,027:INFO:Creating metrics dataframe
2024-11-02 23:45:39,029:INFO:Initializing Quadratic Discriminant Analysis
2024-11-02 23:45:39,029:INFO:Total runtime is 0.09533652464548747 minutes
2024-11-02 23:45:39,030:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:39,030:INFO:Initializing create_model()
2024-11-02 23:45:39,030:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:39,030:INFO:Checking exceptions
2024-11-02 23:45:39,030:INFO:Importing libraries
2024-11-02 23:45:39,030:INFO:Copying training dataset
2024-11-02 23:45:39,034:INFO:Defining folds
2024-11-02 23:45:39,034:INFO:Declaring metric variables
2024-11-02 23:45:39,035:INFO:Importing untrained model
2024-11-02 23:45:39,035:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-02 23:45:39,035:INFO:Starting cross validation
2024-11-02 23:45:39,036:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:39,057:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,058:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,060:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,063:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,073:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,075:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,092:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,095:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,097:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,109:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,113:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,121:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,125:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-02 23:45:39,159:INFO:Calculating mean and std
2024-11-02 23:45:39,160:INFO:Creating metrics dataframe
2024-11-02 23:45:39,162:INFO:Uploading results into container
2024-11-02 23:45:39,163:INFO:Uploading model into container now
2024-11-02 23:45:39,163:INFO:_master_model_container: 8
2024-11-02 23:45:39,163:INFO:_display_container: 2
2024-11-02 23:45:39,164:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-02 23:45:39,164:INFO:create_model() successfully completed......................................
2024-11-02 23:45:39,222:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:39,222:INFO:Creating metrics dataframe
2024-11-02 23:45:39,227:INFO:Initializing Ada Boost Classifier
2024-11-02 23:45:39,227:INFO:Total runtime is 0.09864365259806315 minutes
2024-11-02 23:45:39,227:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:39,227:INFO:Initializing create_model()
2024-11-02 23:45:39,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:39,227:INFO:Checking exceptions
2024-11-02 23:45:39,228:INFO:Importing libraries
2024-11-02 23:45:39,228:INFO:Copying training dataset
2024-11-02 23:45:39,234:INFO:Defining folds
2024-11-02 23:45:39,234:INFO:Declaring metric variables
2024-11-02 23:45:39,235:INFO:Importing untrained model
2024-11-02 23:45:39,235:INFO:Ada Boost Classifier Imported successfully
2024-11-02 23:45:39,235:INFO:Starting cross validation
2024-11-02 23:45:39,236:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:39,266:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,269:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,280:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,297:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,428:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,440:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,442:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,462:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,477:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,477:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,567:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,569:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-02 23:45:39,671:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,689:INFO:Calculating mean and std
2024-11-02 23:45:39,690:INFO:Creating metrics dataframe
2024-11-02 23:45:39,692:INFO:Uploading results into container
2024-11-02 23:45:39,692:INFO:Uploading model into container now
2024-11-02 23:45:39,692:INFO:_master_model_container: 9
2024-11-02 23:45:39,692:INFO:_display_container: 2
2024-11-02 23:45:39,693:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-02 23:45:39,693:INFO:create_model() successfully completed......................................
2024-11-02 23:45:39,745:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:39,745:INFO:Creating metrics dataframe
2024-11-02 23:45:39,747:INFO:Initializing Gradient Boosting Classifier
2024-11-02 23:45:39,747:INFO:Total runtime is 0.10730868975321452 minutes
2024-11-02 23:45:39,747:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:39,748:INFO:Initializing create_model()
2024-11-02 23:45:39,748:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:39,748:INFO:Checking exceptions
2024-11-02 23:45:39,748:INFO:Importing libraries
2024-11-02 23:45:39,748:INFO:Copying training dataset
2024-11-02 23:45:39,752:INFO:Defining folds
2024-11-02 23:45:39,752:INFO:Declaring metric variables
2024-11-02 23:45:39,752:INFO:Importing untrained model
2024-11-02 23:45:39,753:INFO:Gradient Boosting Classifier Imported successfully
2024-11-02 23:45:39,753:INFO:Starting cross validation
2024-11-02 23:45:39,754:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:39,867:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:39,868:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:40,079:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:40,095:INFO:Calculating mean and std
2024-11-02 23:45:40,096:INFO:Creating metrics dataframe
2024-11-02 23:45:40,098:INFO:Uploading results into container
2024-11-02 23:45:40,098:INFO:Uploading model into container now
2024-11-02 23:45:40,098:INFO:_master_model_container: 10
2024-11-02 23:45:40,098:INFO:_display_container: 2
2024-11-02 23:45:40,099:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-02 23:45:40,099:INFO:create_model() successfully completed......................................
2024-11-02 23:45:40,152:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:40,153:INFO:Creating metrics dataframe
2024-11-02 23:45:40,155:INFO:Initializing Linear Discriminant Analysis
2024-11-02 23:45:40,155:INFO:Total runtime is 0.11410980224609375 minutes
2024-11-02 23:45:40,155:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:40,156:INFO:Initializing create_model()
2024-11-02 23:45:40,156:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:40,156:INFO:Checking exceptions
2024-11-02 23:45:40,156:INFO:Importing libraries
2024-11-02 23:45:40,156:INFO:Copying training dataset
2024-11-02 23:45:40,160:INFO:Defining folds
2024-11-02 23:45:40,160:INFO:Declaring metric variables
2024-11-02 23:45:40,161:INFO:Importing untrained model
2024-11-02 23:45:40,161:INFO:Linear Discriminant Analysis Imported successfully
2024-11-02 23:45:40,161:INFO:Starting cross validation
2024-11-02 23:45:40,162:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:40,196:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:40,221:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:40,264:INFO:Calculating mean and std
2024-11-02 23:45:40,265:INFO:Creating metrics dataframe
2024-11-02 23:45:40,267:INFO:Uploading results into container
2024-11-02 23:45:40,267:INFO:Uploading model into container now
2024-11-02 23:45:40,268:INFO:_master_model_container: 11
2024-11-02 23:45:40,268:INFO:_display_container: 2
2024-11-02 23:45:40,268:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-02 23:45:40,268:INFO:create_model() successfully completed......................................
2024-11-02 23:45:40,322:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:40,322:INFO:Creating metrics dataframe
2024-11-02 23:45:40,324:INFO:Initializing Extra Trees Classifier
2024-11-02 23:45:40,324:INFO:Total runtime is 0.11692194938659668 minutes
2024-11-02 23:45:40,325:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:40,325:INFO:Initializing create_model()
2024-11-02 23:45:40,325:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:40,325:INFO:Checking exceptions
2024-11-02 23:45:40,325:INFO:Importing libraries
2024-11-02 23:45:40,325:INFO:Copying training dataset
2024-11-02 23:45:40,329:INFO:Defining folds
2024-11-02 23:45:40,329:INFO:Declaring metric variables
2024-11-02 23:45:40,329:INFO:Importing untrained model
2024-11-02 23:45:40,330:INFO:Extra Trees Classifier Imported successfully
2024-11-02 23:45:40,330:INFO:Starting cross validation
2024-11-02 23:45:40,331:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:40,553:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:40,932:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:40,940:INFO:Calculating mean and std
2024-11-02 23:45:40,941:INFO:Creating metrics dataframe
2024-11-02 23:45:40,943:INFO:Uploading results into container
2024-11-02 23:45:40,943:INFO:Uploading model into container now
2024-11-02 23:45:40,944:INFO:_master_model_container: 12
2024-11-02 23:45:40,944:INFO:_display_container: 2
2024-11-02 23:45:40,944:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-02 23:45:40,944:INFO:create_model() successfully completed......................................
2024-11-02 23:45:40,995:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:40,995:INFO:Creating metrics dataframe
2024-11-02 23:45:40,998:INFO:Initializing Light Gradient Boosting Machine
2024-11-02 23:45:40,998:INFO:Total runtime is 0.1281462828318278 minutes
2024-11-02 23:45:40,998:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:40,998:INFO:Initializing create_model()
2024-11-02 23:45:40,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:40,998:INFO:Checking exceptions
2024-11-02 23:45:40,998:INFO:Importing libraries
2024-11-02 23:45:40,998:INFO:Copying training dataset
2024-11-02 23:45:41,002:INFO:Defining folds
2024-11-02 23:45:41,002:INFO:Declaring metric variables
2024-11-02 23:45:41,003:INFO:Importing untrained model
2024-11-02 23:45:41,003:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-02 23:45:41,003:INFO:Starting cross validation
2024-11-02 23:45:41,004:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:41,292:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,292:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,301:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,316:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,488:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,498:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,503:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,525:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,599:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,602:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,610:INFO:Calculating mean and std
2024-11-02 23:45:41,611:INFO:Creating metrics dataframe
2024-11-02 23:45:41,613:INFO:Uploading results into container
2024-11-02 23:45:41,614:INFO:Uploading model into container now
2024-11-02 23:45:41,614:INFO:_master_model_container: 13
2024-11-02 23:45:41,615:INFO:_display_container: 2
2024-11-02 23:45:41,616:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-02 23:45:41,616:INFO:create_model() successfully completed......................................
2024-11-02 23:45:41,664:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:41,664:INFO:Creating metrics dataframe
2024-11-02 23:45:41,666:INFO:Initializing Dummy Classifier
2024-11-02 23:45:41,666:INFO:Total runtime is 0.13929447730382283 minutes
2024-11-02 23:45:41,667:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:41,667:INFO:Initializing create_model()
2024-11-02 23:45:41,667:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D4CC0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:41,667:INFO:Checking exceptions
2024-11-02 23:45:41,667:INFO:Importing libraries
2024-11-02 23:45:41,667:INFO:Copying training dataset
2024-11-02 23:45:41,671:INFO:Defining folds
2024-11-02 23:45:41,671:INFO:Declaring metric variables
2024-11-02 23:45:41,671:INFO:Importing untrained model
2024-11-02 23:45:41,671:INFO:Dummy Classifier Imported successfully
2024-11-02 23:45:41,672:INFO:Starting cross validation
2024-11-02 23:45:41,673:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:41,700:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,702:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,702:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,713:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,725:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,729:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,730:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,744:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,751:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,756:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:41,767:INFO:Calculating mean and std
2024-11-02 23:45:41,768:INFO:Creating metrics dataframe
2024-11-02 23:45:41,770:INFO:Uploading results into container
2024-11-02 23:45:41,770:INFO:Uploading model into container now
2024-11-02 23:45:41,771:INFO:_master_model_container: 14
2024-11-02 23:45:41,771:INFO:_display_container: 2
2024-11-02 23:45:41,771:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-02 23:45:41,771:INFO:create_model() successfully completed......................................
2024-11-02 23:45:41,823:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:41,823:INFO:Creating metrics dataframe
2024-11-02 23:45:41,827:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-02 23:45:41,829:INFO:Initializing create_model()
2024-11-02 23:45:41,829:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:41,829:INFO:Checking exceptions
2024-11-02 23:45:41,830:INFO:Importing libraries
2024-11-02 23:45:41,830:INFO:Copying training dataset
2024-11-02 23:45:41,834:INFO:Defining folds
2024-11-02 23:45:41,834:INFO:Declaring metric variables
2024-11-02 23:45:41,834:INFO:Importing untrained model
2024-11-02 23:45:41,834:INFO:Declaring custom model
2024-11-02 23:45:41,834:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:45:41,835:INFO:Cross validation set to False
2024-11-02 23:45:41,835:INFO:Fitting Model
2024-11-02 23:45:42,002:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:45:42,002:INFO:create_model() successfully completed......................................
2024-11-02 23:45:42,070:INFO:_master_model_container: 14
2024-11-02 23:45:42,070:INFO:_display_container: 2
2024-11-02 23:45:42,070:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:45:42,070:INFO:compare_models() successfully completed......................................
2024-11-02 23:45:42,071:INFO:Initializing tune_model()
2024-11-02 23:45:42,071:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>)
2024-11-02 23:45:42,071:INFO:Checking exceptions
2024-11-02 23:45:42,076:INFO:Copying training dataset
2024-11-02 23:45:42,081:INFO:Checking base model
2024-11-02 23:45:42,082:INFO:Base model : Random Forest Classifier
2024-11-02 23:45:42,082:INFO:Declaring metric variables
2024-11-02 23:45:42,083:INFO:Defining Hyperparameters
2024-11-02 23:45:42,138:INFO:Tuning with n_jobs=-1
2024-11-02 23:45:42,138:INFO:Initializing RandomizedSearchCV
2024-11-02 23:45:49,184:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2024-11-02 23:45:49,185:INFO:Hyperparameter search completed
2024-11-02 23:45:49,185:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:49,186:INFO:Initializing create_model()
2024-11-02 23:45:49,186:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000218D486D6A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2024-11-02 23:45:49,186:INFO:Checking exceptions
2024-11-02 23:45:49,186:INFO:Importing libraries
2024-11-02 23:45:49,186:INFO:Copying training dataset
2024-11-02 23:45:49,190:INFO:Defining folds
2024-11-02 23:45:49,190:INFO:Declaring metric variables
2024-11-02 23:45:49,191:INFO:Importing untrained model
2024-11-02 23:45:49,191:INFO:Declaring custom model
2024-11-02 23:45:49,192:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:45:49,192:INFO:Starting cross validation
2024-11-02 23:45:49,193:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:49,629:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:50,230:INFO:Calculating mean and std
2024-11-02 23:45:50,231:INFO:Creating metrics dataframe
2024-11-02 23:45:50,233:INFO:Finalizing model
2024-11-02 23:45:50,511:INFO:Uploading results into container
2024-11-02 23:45:50,512:INFO:Uploading model into container now
2024-11-02 23:45:50,512:INFO:_master_model_container: 15
2024-11-02 23:45:50,512:INFO:_display_container: 3
2024-11-02 23:45:50,513:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-02 23:45:50,513:INFO:create_model() successfully completed......................................
2024-11-02 23:45:50,570:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:50,570:INFO:choose_better activated
2024-11-02 23:45:50,570:INFO:SubProcess create_model() called ==================================
2024-11-02 23:45:50,571:INFO:Initializing create_model()
2024-11-02 23:45:50,571:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:50,571:INFO:Checking exceptions
2024-11-02 23:45:50,572:INFO:Importing libraries
2024-11-02 23:45:50,572:INFO:Copying training dataset
2024-11-02 23:45:50,576:INFO:Defining folds
2024-11-02 23:45:50,576:INFO:Declaring metric variables
2024-11-02 23:45:50,576:INFO:Importing untrained model
2024-11-02 23:45:50,576:INFO:Declaring custom model
2024-11-02 23:45:50,577:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:45:50,577:INFO:Starting cross validation
2024-11-02 23:45:50,578:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-02 23:45:50,801:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:50,831:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:51,283:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-02 23:45:51,290:INFO:Calculating mean and std
2024-11-02 23:45:51,290:INFO:Creating metrics dataframe
2024-11-02 23:45:51,292:INFO:Finalizing model
2024-11-02 23:45:51,463:INFO:Uploading results into container
2024-11-02 23:45:51,463:INFO:Uploading model into container now
2024-11-02 23:45:51,464:INFO:_master_model_container: 16
2024-11-02 23:45:51,464:INFO:_display_container: 4
2024-11-02 23:45:51,464:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-02 23:45:51,465:INFO:create_model() successfully completed......................................
2024-11-02 23:45:51,512:INFO:SubProcess create_model() end ==================================
2024-11-02 23:45:51,513:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.8667
2024-11-02 23:45:51,513:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.9333
2024-11-02 23:45:51,514:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2024-11-02 23:45:51,514:INFO:choose_better completed
2024-11-02 23:45:51,527:INFO:_master_model_container: 16
2024-11-02 23:45:51,527:INFO:_display_container: 3
2024-11-02 23:45:51,527:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-02 23:45:51,527:INFO:tune_model() successfully completed......................................
2024-11-02 23:45:51,582:INFO:Initializing finalize_model()
2024-11-02 23:45:51,582:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-02 23:45:51,582:INFO:Finalizing RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-02 23:45:51,586:INFO:Initializing create_model()
2024-11-02 23:45:51,586:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218BD6F6580>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-02 23:45:51,586:INFO:Checking exceptions
2024-11-02 23:45:51,587:INFO:Importing libraries
2024-11-02 23:45:51,587:INFO:Copying training dataset
2024-11-02 23:45:51,587:INFO:Defining folds
2024-11-02 23:45:51,587:INFO:Declaring metric variables
2024-11-02 23:45:51,587:INFO:Importing untrained model
2024-11-02 23:45:51,587:INFO:Declaring custom model
2024-11-02 23:45:51,588:INFO:Random Forest Classifier Imported successfully
2024-11-02 23:45:51,589:INFO:Cross validation set to False
2024-11-02 23:45:51,589:INFO:Fitting Model
2024-11-02 23:45:51,864:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-02 23:45:51,865:INFO:create_model() successfully completed......................................
2024-11-02 23:45:51,913:INFO:_master_model_container: 16
2024-11-02 23:45:51,913:INFO:_display_container: 3
2024-11-02 23:45:51,918:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-02 23:45:51,918:INFO:finalize_model() successfully completed......................................
2024-11-02 23:45:51,973:INFO:Initializing save_model()
2024-11-02 23:45:51,973:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=pump_detector_final, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-02 23:45:51,973:INFO:Adding model into prep_pipe
2024-11-02 23:45:51,973:WARNING:Only Model saved as it was a pipeline.
2024-11-02 23:45:52,030:INFO:pump_detector_final.pkl saved in current working directory
2024-11-02 23:45:52,035:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=Simpl...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=130,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-02 23:45:52,035:INFO:save_model() successfully completed......................................
2024-11-02 23:46:36,634:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:46:36,634:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:46:36,634:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:46:36,634:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-02 23:46:37,642:INFO:Initializing load_model()
2024-11-02 23:46:37,642:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-02 23:46:37,762:INFO:Initializing predict_model()
2024-11-02 23:46:37,762:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000167B419D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000167B9862F70>)
2024-11-02 23:46:37,762:INFO:Checking exceptions
2024-11-02 23:46:37,762:INFO:Preloading libraries
2024-11-02 23:46:37,762:INFO:Set up data.
2024-11-02 23:46:37,766:INFO:Set up index.
2024-11-02 23:46:37,890:INFO:Initializing predict_model()
2024-11-02 23:46:37,891:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000167B419DC40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000167B4163D30>)
2024-11-02 23:46:37,891:INFO:Checking exceptions
2024-11-02 23:46:37,891:INFO:Preloading libraries
2024-11-02 23:46:37,891:INFO:Set up data.
2024-11-02 23:46:37,896:INFO:Set up index.
2024-11-03 01:08:56,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:08:56,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:08:56,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:08:56,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:08:57,694:INFO:Initializing load_model()
2024-11-03 01:08:57,694:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 01:08:57,820:INFO:Initializing predict_model()
2024-11-03 01:08:57,820:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029B579AD3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029B5D082F70>)
2024-11-03 01:08:57,820:INFO:Checking exceptions
2024-11-03 01:08:57,820:INFO:Preloading libraries
2024-11-03 01:08:57,820:INFO:Set up data.
2024-11-03 01:08:57,826:INFO:Set up index.
2024-11-03 01:16:29,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:16:29,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:16:29,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:16:29,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:16:30,644:INFO:Initializing load_model()
2024-11-03 01:16:30,644:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 01:16:30,769:INFO:Initializing predict_model()
2024-11-03 01:16:30,769:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000147A5FFD3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000147AB6C2F70>)
2024-11-03 01:16:30,769:INFO:Checking exceptions
2024-11-03 01:16:30,769:INFO:Preloading libraries
2024-11-03 01:16:30,770:INFO:Set up data.
2024-11-03 01:16:30,774:INFO:Set up index.
2024-11-03 01:22:12,877:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:22:12,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:22:12,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:22:12,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:23:52,327:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:23:52,327:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:23:52,328:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:23:52,328:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:23:53,633:WARNING:C:\Users\haris\Desktop\Rich\brain.py:114: RuntimeWarning: divide by zero encountered in divide
  volume_changes = np.diff(volumes) / volumes[:-1] if len(volumes) > 1 else [0]

2024-11-03 01:23:53,912:WARNING:C:\Users\haris\Desktop\Rich\brain.py:114: RuntimeWarning: invalid value encountered in divide
  volume_changes = np.diff(volumes) / volumes[:-1] if len(volumes) > 1 else [0]

2024-11-03 01:25:16,125:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:25:16,125:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:25:16,125:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:25:16,125:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:25:17,346:WARNING:C:\Users\haris\Desktop\Rich\brain.py:114: RuntimeWarning: divide by zero encountered in divide
  volume_changes = np.diff(volumes) / volumes[:-1] if len(volumes) > 1 else [0]

2024-11-03 01:25:17,503:WARNING:C:\Users\haris\Desktop\Rich\brain.py:114: RuntimeWarning: invalid value encountered in divide
  volume_changes = np.diff(volumes) / volumes[:-1] if len(volumes) > 1 else [0]

2024-11-03 01:26:31,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:26:31,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:26:31,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:26:31,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:26:32,172:WARNING:C:\Users\haris\Desktop\Rich\brain.py:114: RuntimeWarning: divide by zero encountered in divide
  volume_changes = np.diff(volumes) / volumes[:-1] if len(volumes) > 1 else [0]

2024-11-03 01:26:32,318:WARNING:C:\Users\haris\Desktop\Rich\brain.py:114: RuntimeWarning: invalid value encountered in divide
  volume_changes = np.diff(volumes) / volumes[:-1] if len(volumes) > 1 else [0]

2024-11-03 01:26:32,736:INFO:PyCaret ClassificationExperiment
2024-11-03 01:26:32,736:INFO:Logging name: clf-default-name
2024-11-03 01:26:32,736:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 01:26:32,736:INFO:version 3.3.2
2024-11-03 01:26:32,736:INFO:Initializing setup()
2024-11-03 01:26:32,736:INFO:self.USI: d1a8
2024-11-03 01:26:32,737:INFO:self._variable_keys: {'_ml_usecase', 'log_plots_param', 'fix_imbalance', 'y_train', 'X_train', 'seed', 'gpu_param', 'exp_name_log', 'memory', 'y_test', '_available_plots', 'idx', 'X_test', 'y', 'fold_generator', 'fold_groups_param', 'target_param', 'is_multiclass', 'USI', 'fold_shuffle_param', 'X', 'pipeline', 'logging_param', 'exp_id', 'data', 'n_jobs_param', 'html_param', 'gpu_n_jobs_param'}
2024-11-03 01:26:32,737:INFO:Checking environment
2024-11-03 01:26:32,737:INFO:python_version: 3.9.5
2024-11-03 01:26:32,737:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 01:26:32,737:INFO:machine: AMD64
2024-11-03 01:26:32,748:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 01:26:32,751:INFO:Memory: svmem(total=17098203136, available=2932944896, percent=82.8, used=14165258240, free=2932944896)
2024-11-03 01:26:32,751:INFO:Physical Core: 4
2024-11-03 01:26:32,751:INFO:Logical Core: 4
2024-11-03 01:26:32,751:INFO:Checking libraries
2024-11-03 01:26:32,751:INFO:System:
2024-11-03 01:26:32,751:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 01:26:32,751:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 01:26:32,751:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 01:26:32,751:INFO:PyCaret required dependencies:
2024-11-03 01:26:32,811:INFO:                 pip: 21.1.3
2024-11-03 01:26:32,811:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 01:26:32,811:INFO:             pycaret: 3.3.2
2024-11-03 01:26:32,811:INFO:             IPython: 8.14.0
2024-11-03 01:26:32,811:INFO:          ipywidgets: 8.1.5
2024-11-03 01:26:32,811:INFO:                tqdm: 4.66.6
2024-11-03 01:26:32,811:INFO:               numpy: 1.26.4
2024-11-03 01:26:32,811:INFO:              pandas: 2.1.4
2024-11-03 01:26:32,811:INFO:              jinja2: 3.1.4
2024-11-03 01:26:32,811:INFO:               scipy: 1.11.4
2024-11-03 01:26:32,812:INFO:              joblib: 1.3.2
2024-11-03 01:26:32,812:INFO:             sklearn: 1.4.2
2024-11-03 01:26:32,812:INFO:                pyod: 2.0.2
2024-11-03 01:26:32,812:INFO:            imblearn: 0.12.4
2024-11-03 01:26:32,812:INFO:   category_encoders: 2.6.4
2024-11-03 01:26:32,812:INFO:            lightgbm: 4.5.0
2024-11-03 01:26:32,812:INFO:               numba: 0.60.0
2024-11-03 01:26:32,812:INFO:            requests: 2.32.3
2024-11-03 01:26:32,812:INFO:          matplotlib: 3.7.5
2024-11-03 01:26:32,812:INFO:          scikitplot: 0.3.7
2024-11-03 01:26:32,812:INFO:         yellowbrick: 1.5
2024-11-03 01:26:32,812:INFO:              plotly: 5.24.1
2024-11-03 01:26:32,812:INFO:    plotly-resampler: Not installed
2024-11-03 01:26:32,812:INFO:             kaleido: 0.2.1
2024-11-03 01:26:32,812:INFO:           schemdraw: 0.15
2024-11-03 01:26:32,812:INFO:         statsmodels: 0.14.4
2024-11-03 01:26:32,812:INFO:              sktime: 0.26.0
2024-11-03 01:26:32,812:INFO:               tbats: 1.1.3
2024-11-03 01:26:32,812:INFO:            pmdarima: 2.0.4
2024-11-03 01:26:32,812:INFO:              psutil: 5.9.5
2024-11-03 01:26:32,812:INFO:          markupsafe: 3.0.2
2024-11-03 01:26:32,813:INFO:             pickle5: Not installed
2024-11-03 01:26:32,813:INFO:         cloudpickle: 3.1.0
2024-11-03 01:26:32,813:INFO:         deprecation: 2.1.0
2024-11-03 01:26:32,813:INFO:              xxhash: 3.5.0
2024-11-03 01:26:32,813:INFO:           wurlitzer: Not installed
2024-11-03 01:26:32,813:INFO:PyCaret optional dependencies:
2024-11-03 01:26:32,833:INFO:                shap: Not installed
2024-11-03 01:26:32,833:INFO:           interpret: Not installed
2024-11-03 01:26:32,833:INFO:                umap: Not installed
2024-11-03 01:26:32,833:INFO:     ydata_profiling: Not installed
2024-11-03 01:26:32,833:INFO:  explainerdashboard: Not installed
2024-11-03 01:26:32,833:INFO:             autoviz: Not installed
2024-11-03 01:26:32,834:INFO:           fairlearn: Not installed
2024-11-03 01:26:32,834:INFO:          deepchecks: Not installed
2024-11-03 01:26:32,834:INFO:             xgboost: Not installed
2024-11-03 01:26:32,834:INFO:            catboost: Not installed
2024-11-03 01:26:32,834:INFO:              kmodes: Not installed
2024-11-03 01:26:32,834:INFO:             mlxtend: Not installed
2024-11-03 01:26:32,834:INFO:       statsforecast: Not installed
2024-11-03 01:26:32,834:INFO:        tune_sklearn: Not installed
2024-11-03 01:26:32,834:INFO:                 ray: Not installed
2024-11-03 01:26:32,834:INFO:            hyperopt: Not installed
2024-11-03 01:26:32,834:INFO:              optuna: Not installed
2024-11-03 01:26:32,834:INFO:               skopt: Not installed
2024-11-03 01:26:32,834:INFO:              mlflow: Not installed
2024-11-03 01:26:32,834:INFO:              gradio: Not installed
2024-11-03 01:26:32,834:INFO:             fastapi: Not installed
2024-11-03 01:26:32,834:INFO:             uvicorn: Not installed
2024-11-03 01:26:32,834:INFO:              m2cgen: Not installed
2024-11-03 01:26:32,834:INFO:           evidently: Not installed
2024-11-03 01:26:32,834:INFO:               fugue: Not installed
2024-11-03 01:26:32,834:INFO:           streamlit: Not installed
2024-11-03 01:26:32,835:INFO:             prophet: Not installed
2024-11-03 01:26:32,835:INFO:None
2024-11-03 01:26:32,835:INFO:Set up data.
2024-11-03 01:26:32,842:INFO:Set up folding strategy.
2024-11-03 01:26:32,842:INFO:Set up train/test split.
2024-11-03 01:26:32,848:INFO:Set up index.
2024-11-03 01:26:32,848:INFO:Assigning column types.
2024-11-03 01:26:32,853:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 01:26:32,899:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 01:26:32,903:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:26:32,939:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:32,940:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:32,985:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 01:26:32,986:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:26:33,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,016:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 01:26:33,063:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:26:33,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,095:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,143:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:26:33,172:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,172:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,172:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 01:26:33,254:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,254:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,335:INFO:Preparing preprocessing pipeline...
2024-11-03 01:26:33,336:INFO:Set up simple imputation.
2024-11-03 01:26:33,336:INFO:Set up feature normalization.
2024-11-03 01:26:33,336:INFO:Set up feature selection.
2024-11-03 01:26:33,413:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:26:33,413:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:44,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:29:44,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:29:44,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:29:44,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:29:45,822:INFO:PyCaret ClassificationExperiment
2024-11-03 01:29:45,823:INFO:Logging name: clf-default-name
2024-11-03 01:29:45,823:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 01:29:45,823:INFO:version 3.3.2
2024-11-03 01:29:45,823:INFO:Initializing setup()
2024-11-03 01:29:45,823:INFO:self.USI: 6d37
2024-11-03 01:29:45,823:INFO:self._variable_keys: {'gpu_n_jobs_param', 'html_param', 'exp_name_log', 'exp_id', 'pipeline', 'target_param', 'y_train', 'fold_shuffle_param', 'USI', 'data', 'n_jobs_param', 'fold_groups_param', 'logging_param', 'gpu_param', 'is_multiclass', 'y', 'X', 'X_train', '_available_plots', 'X_test', 'fold_generator', 'fix_imbalance', 'memory', 'idx', 'seed', '_ml_usecase', 'y_test', 'log_plots_param'}
2024-11-03 01:29:45,823:INFO:Checking environment
2024-11-03 01:29:45,823:INFO:python_version: 3.9.5
2024-11-03 01:29:45,823:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 01:29:45,823:INFO:machine: AMD64
2024-11-03 01:29:45,841:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 01:29:45,844:INFO:Memory: svmem(total=17098203136, available=2812534784, percent=83.6, used=14285668352, free=2812534784)
2024-11-03 01:29:45,844:INFO:Physical Core: 4
2024-11-03 01:29:45,844:INFO:Logical Core: 4
2024-11-03 01:29:45,844:INFO:Checking libraries
2024-11-03 01:29:45,844:INFO:System:
2024-11-03 01:29:45,844:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 01:29:45,844:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 01:29:45,844:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 01:29:45,844:INFO:PyCaret required dependencies:
2024-11-03 01:29:45,898:INFO:                 pip: 21.1.3
2024-11-03 01:29:45,899:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 01:29:45,899:INFO:             pycaret: 3.3.2
2024-11-03 01:29:45,899:INFO:             IPython: 8.14.0
2024-11-03 01:29:45,899:INFO:          ipywidgets: 8.1.5
2024-11-03 01:29:45,899:INFO:                tqdm: 4.66.6
2024-11-03 01:29:45,899:INFO:               numpy: 1.26.4
2024-11-03 01:29:45,899:INFO:              pandas: 2.1.4
2024-11-03 01:29:45,899:INFO:              jinja2: 3.1.4
2024-11-03 01:29:45,899:INFO:               scipy: 1.11.4
2024-11-03 01:29:45,899:INFO:              joblib: 1.3.2
2024-11-03 01:29:45,899:INFO:             sklearn: 1.4.2
2024-11-03 01:29:45,899:INFO:                pyod: 2.0.2
2024-11-03 01:29:45,899:INFO:            imblearn: 0.12.4
2024-11-03 01:29:45,899:INFO:   category_encoders: 2.6.4
2024-11-03 01:29:45,899:INFO:            lightgbm: 4.5.0
2024-11-03 01:29:45,899:INFO:               numba: 0.60.0
2024-11-03 01:29:45,899:INFO:            requests: 2.32.3
2024-11-03 01:29:45,899:INFO:          matplotlib: 3.7.5
2024-11-03 01:29:45,899:INFO:          scikitplot: 0.3.7
2024-11-03 01:29:45,900:INFO:         yellowbrick: 1.5
2024-11-03 01:29:45,900:INFO:              plotly: 5.24.1
2024-11-03 01:29:45,900:INFO:    plotly-resampler: Not installed
2024-11-03 01:29:45,900:INFO:             kaleido: 0.2.1
2024-11-03 01:29:45,900:INFO:           schemdraw: 0.15
2024-11-03 01:29:45,900:INFO:         statsmodels: 0.14.4
2024-11-03 01:29:45,900:INFO:              sktime: 0.26.0
2024-11-03 01:29:45,900:INFO:               tbats: 1.1.3
2024-11-03 01:29:45,900:INFO:            pmdarima: 2.0.4
2024-11-03 01:29:45,900:INFO:              psutil: 5.9.5
2024-11-03 01:29:45,900:INFO:          markupsafe: 3.0.2
2024-11-03 01:29:45,900:INFO:             pickle5: Not installed
2024-11-03 01:29:45,900:INFO:         cloudpickle: 3.1.0
2024-11-03 01:29:45,900:INFO:         deprecation: 2.1.0
2024-11-03 01:29:45,900:INFO:              xxhash: 3.5.0
2024-11-03 01:29:45,900:INFO:           wurlitzer: Not installed
2024-11-03 01:29:45,900:INFO:PyCaret optional dependencies:
2024-11-03 01:29:45,923:INFO:                shap: Not installed
2024-11-03 01:29:45,923:INFO:           interpret: Not installed
2024-11-03 01:29:45,923:INFO:                umap: Not installed
2024-11-03 01:29:45,923:INFO:     ydata_profiling: Not installed
2024-11-03 01:29:45,923:INFO:  explainerdashboard: Not installed
2024-11-03 01:29:45,923:INFO:             autoviz: Not installed
2024-11-03 01:29:45,923:INFO:           fairlearn: Not installed
2024-11-03 01:29:45,923:INFO:          deepchecks: Not installed
2024-11-03 01:29:45,923:INFO:             xgboost: Not installed
2024-11-03 01:29:45,923:INFO:            catboost: Not installed
2024-11-03 01:29:45,923:INFO:              kmodes: Not installed
2024-11-03 01:29:45,923:INFO:             mlxtend: Not installed
2024-11-03 01:29:45,923:INFO:       statsforecast: Not installed
2024-11-03 01:29:45,923:INFO:        tune_sklearn: Not installed
2024-11-03 01:29:45,924:INFO:                 ray: Not installed
2024-11-03 01:29:45,924:INFO:            hyperopt: Not installed
2024-11-03 01:29:45,924:INFO:              optuna: Not installed
2024-11-03 01:29:45,924:INFO:               skopt: Not installed
2024-11-03 01:29:45,924:INFO:              mlflow: Not installed
2024-11-03 01:29:45,924:INFO:              gradio: Not installed
2024-11-03 01:29:45,924:INFO:             fastapi: Not installed
2024-11-03 01:29:45,924:INFO:             uvicorn: Not installed
2024-11-03 01:29:45,924:INFO:              m2cgen: Not installed
2024-11-03 01:29:45,924:INFO:           evidently: Not installed
2024-11-03 01:29:45,924:INFO:               fugue: Not installed
2024-11-03 01:29:45,924:INFO:           streamlit: Not installed
2024-11-03 01:29:45,924:INFO:             prophet: Not installed
2024-11-03 01:29:45,924:INFO:None
2024-11-03 01:29:45,924:INFO:Set up data.
2024-11-03 01:29:45,945:INFO:Set up folding strategy.
2024-11-03 01:29:45,945:INFO:Set up train/test split.
2024-11-03 01:29:45,951:INFO:Set up index.
2024-11-03 01:29:45,951:INFO:Assigning column types.
2024-11-03 01:29:45,957:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 01:29:46,049:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 01:29:46,052:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:29:46,088:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,088:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,137:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 01:29:46,138:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:29:46,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,177:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 01:29:46,229:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:29:46,261:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,310:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:29:46,341:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,341:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,341:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 01:29:46,422:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,422:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,500:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,501:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,504:INFO:Preparing preprocessing pipeline...
2024-11-03 01:29:46,505:INFO:Set up simple imputation.
2024-11-03 01:29:46,505:INFO:Set up feature normalization.
2024-11-03 01:29:46,505:INFO:Set up feature selection.
2024-11-03 01:29:46,581:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:46,818:INFO:Finished creating preprocessing pipeline.
2024-11-03 01:29:46,829:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 01:29:46,829:INFO:Creating final display dataframe.
2024-11-03 01:29:46,980:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (43, 20)
4        Transformed data shape           (43, 4)
5   Transformed train set shape           (30, 4)
6    Transformed test set shape           (13, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              6d37
2024-11-03 01:29:47,078:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:47,078:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:47,159:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:47,159:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:29:47,160:INFO:setup() successfully completed in 1.34s...............
2024-11-03 01:29:47,161:INFO:Initializing compare_models()
2024-11-03 01:29:47,161:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 01:29:47,161:INFO:Checking exceptions
2024-11-03 01:29:47,165:INFO:Preparing display monitor
2024-11-03 01:29:47,168:INFO:Initializing Logistic Regression
2024-11-03 01:29:47,168:INFO:Total runtime is 0.0 minutes
2024-11-03 01:29:47,168:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:47,168:INFO:Initializing create_model()
2024-11-03 01:29:47,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:47,169:INFO:Checking exceptions
2024-11-03 01:29:47,169:INFO:Importing libraries
2024-11-03 01:29:47,169:INFO:Copying training dataset
2024-11-03 01:29:47,174:INFO:Defining folds
2024-11-03 01:29:47,174:INFO:Declaring metric variables
2024-11-03 01:29:47,174:INFO:Importing untrained model
2024-11-03 01:29:47,174:INFO:Logistic Regression Imported successfully
2024-11-03 01:29:47,175:INFO:Starting cross validation
2024-11-03 01:29:47,176:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:51,304:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:51,547:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:51,670:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:51,690:INFO:Calculating mean and std
2024-11-03 01:29:51,691:INFO:Creating metrics dataframe
2024-11-03 01:29:51,693:INFO:Uploading results into container
2024-11-03 01:29:51,693:INFO:Uploading model into container now
2024-11-03 01:29:51,694:INFO:_master_model_container: 1
2024-11-03 01:29:51,694:INFO:_display_container: 2
2024-11-03 01:29:51,694:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:29:51,694:INFO:create_model() successfully completed......................................
2024-11-03 01:29:51,754:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:51,755:INFO:Creating metrics dataframe
2024-11-03 01:29:51,757:INFO:Initializing K Neighbors Classifier
2024-11-03 01:29:51,758:INFO:Total runtime is 0.0764952023824056 minutes
2024-11-03 01:29:51,758:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:51,758:INFO:Initializing create_model()
2024-11-03 01:29:51,758:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:51,758:INFO:Checking exceptions
2024-11-03 01:29:51,758:INFO:Importing libraries
2024-11-03 01:29:51,758:INFO:Copying training dataset
2024-11-03 01:29:51,764:INFO:Defining folds
2024-11-03 01:29:51,764:INFO:Declaring metric variables
2024-11-03 01:29:51,765:INFO:Importing untrained model
2024-11-03 01:29:51,765:INFO:K Neighbors Classifier Imported successfully
2024-11-03 01:29:51,765:INFO:Starting cross validation
2024-11-03 01:29:51,767:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:52,029:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:52,292:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:52,431:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:52,440:INFO:Calculating mean and std
2024-11-03 01:29:52,441:INFO:Creating metrics dataframe
2024-11-03 01:29:52,443:INFO:Uploading results into container
2024-11-03 01:29:52,443:INFO:Uploading model into container now
2024-11-03 01:29:52,443:INFO:_master_model_container: 2
2024-11-03 01:29:52,443:INFO:_display_container: 2
2024-11-03 01:29:52,444:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 01:29:52,444:INFO:create_model() successfully completed......................................
2024-11-03 01:29:52,500:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:52,501:INFO:Creating metrics dataframe
2024-11-03 01:29:52,506:INFO:Initializing Naive Bayes
2024-11-03 01:29:52,506:INFO:Total runtime is 0.08896093368530274 minutes
2024-11-03 01:29:52,506:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:52,506:INFO:Initializing create_model()
2024-11-03 01:29:52,507:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:52,507:INFO:Checking exceptions
2024-11-03 01:29:52,507:INFO:Importing libraries
2024-11-03 01:29:52,507:INFO:Copying training dataset
2024-11-03 01:29:52,516:INFO:Defining folds
2024-11-03 01:29:52,516:INFO:Declaring metric variables
2024-11-03 01:29:52,516:INFO:Importing untrained model
2024-11-03 01:29:52,516:INFO:Naive Bayes Imported successfully
2024-11-03 01:29:52,516:INFO:Starting cross validation
2024-11-03 01:29:52,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:52,706:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:52,899:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:53,001:INFO:Calculating mean and std
2024-11-03 01:29:53,002:INFO:Creating metrics dataframe
2024-11-03 01:29:53,003:INFO:Uploading results into container
2024-11-03 01:29:53,004:INFO:Uploading model into container now
2024-11-03 01:29:53,004:INFO:_master_model_container: 3
2024-11-03 01:29:53,004:INFO:_display_container: 2
2024-11-03 01:29:53,004:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 01:29:53,005:INFO:create_model() successfully completed......................................
2024-11-03 01:29:53,055:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:53,055:INFO:Creating metrics dataframe
2024-11-03 01:29:53,057:INFO:Initializing Decision Tree Classifier
2024-11-03 01:29:53,058:INFO:Total runtime is 0.09816712538401286 minutes
2024-11-03 01:29:53,058:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:53,058:INFO:Initializing create_model()
2024-11-03 01:29:53,058:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:53,058:INFO:Checking exceptions
2024-11-03 01:29:53,058:INFO:Importing libraries
2024-11-03 01:29:53,058:INFO:Copying training dataset
2024-11-03 01:29:53,066:INFO:Defining folds
2024-11-03 01:29:53,066:INFO:Declaring metric variables
2024-11-03 01:29:53,066:INFO:Importing untrained model
2024-11-03 01:29:53,067:INFO:Decision Tree Classifier Imported successfully
2024-11-03 01:29:53,067:INFO:Starting cross validation
2024-11-03 01:29:53,069:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:53,273:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:53,545:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:53,552:INFO:Calculating mean and std
2024-11-03 01:29:53,553:INFO:Creating metrics dataframe
2024-11-03 01:29:53,554:INFO:Uploading results into container
2024-11-03 01:29:53,555:INFO:Uploading model into container now
2024-11-03 01:29:53,555:INFO:_master_model_container: 4
2024-11-03 01:29:53,555:INFO:_display_container: 2
2024-11-03 01:29:53,556:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 01:29:53,556:INFO:create_model() successfully completed......................................
2024-11-03 01:29:53,605:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:53,605:INFO:Creating metrics dataframe
2024-11-03 01:29:53,608:INFO:Initializing SVM - Linear Kernel
2024-11-03 01:29:53,608:INFO:Total runtime is 0.10734086036682129 minutes
2024-11-03 01:29:53,608:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:53,609:INFO:Initializing create_model()
2024-11-03 01:29:53,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:53,609:INFO:Checking exceptions
2024-11-03 01:29:53,609:INFO:Importing libraries
2024-11-03 01:29:53,609:INFO:Copying training dataset
2024-11-03 01:29:53,614:INFO:Defining folds
2024-11-03 01:29:53,614:INFO:Declaring metric variables
2024-11-03 01:29:53,614:INFO:Importing untrained model
2024-11-03 01:29:53,615:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 01:29:53,615:INFO:Starting cross validation
2024-11-03 01:29:53,617:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:53,907:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:54,073:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:54,105:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:54,269:INFO:Calculating mean and std
2024-11-03 01:29:54,270:INFO:Creating metrics dataframe
2024-11-03 01:29:54,272:INFO:Uploading results into container
2024-11-03 01:29:54,272:INFO:Uploading model into container now
2024-11-03 01:29:54,272:INFO:_master_model_container: 5
2024-11-03 01:29:54,272:INFO:_display_container: 2
2024-11-03 01:29:54,273:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 01:29:54,273:INFO:create_model() successfully completed......................................
2024-11-03 01:29:54,323:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:54,323:INFO:Creating metrics dataframe
2024-11-03 01:29:54,326:INFO:Initializing Ridge Classifier
2024-11-03 01:29:54,326:INFO:Total runtime is 0.11930744647979737 minutes
2024-11-03 01:29:54,327:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:54,327:INFO:Initializing create_model()
2024-11-03 01:29:54,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:54,327:INFO:Checking exceptions
2024-11-03 01:29:54,327:INFO:Importing libraries
2024-11-03 01:29:54,327:INFO:Copying training dataset
2024-11-03 01:29:54,334:INFO:Defining folds
2024-11-03 01:29:54,334:INFO:Declaring metric variables
2024-11-03 01:29:54,334:INFO:Importing untrained model
2024-11-03 01:29:54,334:INFO:Ridge Classifier Imported successfully
2024-11-03 01:29:54,335:INFO:Starting cross validation
2024-11-03 01:29:54,337:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:54,532:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:54,702:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:54,864:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:54,879:INFO:Calculating mean and std
2024-11-03 01:29:54,880:INFO:Creating metrics dataframe
2024-11-03 01:29:54,882:INFO:Uploading results into container
2024-11-03 01:29:54,882:INFO:Uploading model into container now
2024-11-03 01:29:54,883:INFO:_master_model_container: 6
2024-11-03 01:29:54,883:INFO:_display_container: 2
2024-11-03 01:29:54,883:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 01:29:54,883:INFO:create_model() successfully completed......................................
2024-11-03 01:29:54,934:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:54,934:INFO:Creating metrics dataframe
2024-11-03 01:29:54,937:INFO:Initializing Random Forest Classifier
2024-11-03 01:29:54,937:INFO:Total runtime is 0.12948447863260906 minutes
2024-11-03 01:29:54,937:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:54,938:INFO:Initializing create_model()
2024-11-03 01:29:54,938:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:54,938:INFO:Checking exceptions
2024-11-03 01:29:54,938:INFO:Importing libraries
2024-11-03 01:29:54,938:INFO:Copying training dataset
2024-11-03 01:29:54,944:INFO:Defining folds
2024-11-03 01:29:54,944:INFO:Declaring metric variables
2024-11-03 01:29:54,945:INFO:Importing untrained model
2024-11-03 01:29:54,945:INFO:Random Forest Classifier Imported successfully
2024-11-03 01:29:54,945:INFO:Starting cross validation
2024-11-03 01:29:54,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:55,357:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:55,761:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:55,832:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:56,070:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:56,094:INFO:Calculating mean and std
2024-11-03 01:29:56,095:INFO:Creating metrics dataframe
2024-11-03 01:29:56,097:INFO:Uploading results into container
2024-11-03 01:29:56,097:INFO:Uploading model into container now
2024-11-03 01:29:56,098:INFO:_master_model_container: 7
2024-11-03 01:29:56,098:INFO:_display_container: 2
2024-11-03 01:29:56,098:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 01:29:56,098:INFO:create_model() successfully completed......................................
2024-11-03 01:29:56,154:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:56,155:INFO:Creating metrics dataframe
2024-11-03 01:29:56,158:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 01:29:56,158:INFO:Total runtime is 0.14983925819396973 minutes
2024-11-03 01:29:56,158:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:56,158:INFO:Initializing create_model()
2024-11-03 01:29:56,158:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:56,158:INFO:Checking exceptions
2024-11-03 01:29:56,158:INFO:Importing libraries
2024-11-03 01:29:56,159:INFO:Copying training dataset
2024-11-03 01:29:56,164:INFO:Defining folds
2024-11-03 01:29:56,164:INFO:Declaring metric variables
2024-11-03 01:29:56,164:INFO:Importing untrained model
2024-11-03 01:29:56,165:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 01:29:56,165:INFO:Starting cross validation
2024-11-03 01:29:56,167:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:56,362:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:56,533:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:56,620:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-03 01:29:56,630:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-11-03 01:29:56,630:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-11-03 01:29:56,630:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-11-03 01:29:56,633:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-11-03 01:29:56,634:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-11-03 01:29:56,634:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-11-03 01:29:56,641:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "C:\Users\haris\miniconda3\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "C:\Users\haris\miniconda3\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "C:\Users\haris\miniconda3\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "C:\Users\haris\miniconda3\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-11-03 01:29:56,657:INFO:Calculating mean and std
2024-11-03 01:29:56,658:INFO:Creating metrics dataframe
2024-11-03 01:29:56,660:INFO:Uploading results into container
2024-11-03 01:29:56,660:INFO:Uploading model into container now
2024-11-03 01:29:56,660:INFO:_master_model_container: 8
2024-11-03 01:29:56,660:INFO:_display_container: 2
2024-11-03 01:29:56,661:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 01:29:56,661:INFO:create_model() successfully completed......................................
2024-11-03 01:29:56,710:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:56,711:INFO:Creating metrics dataframe
2024-11-03 01:29:56,713:INFO:Initializing Ada Boost Classifier
2024-11-03 01:29:56,713:INFO:Total runtime is 0.15907880465189617 minutes
2024-11-03 01:29:56,714:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:56,714:INFO:Initializing create_model()
2024-11-03 01:29:56,714:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:56,714:INFO:Checking exceptions
2024-11-03 01:29:56,714:INFO:Importing libraries
2024-11-03 01:29:56,714:INFO:Copying training dataset
2024-11-03 01:29:56,719:INFO:Defining folds
2024-11-03 01:29:56,720:INFO:Declaring metric variables
2024-11-03 01:29:56,720:INFO:Importing untrained model
2024-11-03 01:29:56,720:INFO:Ada Boost Classifier Imported successfully
2024-11-03 01:29:56,720:INFO:Starting cross validation
2024-11-03 01:29:56,722:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:56,980:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:56,984:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:56,989:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:56,997:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,255:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,265:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,279:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,296:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,415:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:57,490:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,492:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:29:57,595:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:57,613:INFO:Calculating mean and std
2024-11-03 01:29:57,614:INFO:Creating metrics dataframe
2024-11-03 01:29:57,616:INFO:Uploading results into container
2024-11-03 01:29:57,616:INFO:Uploading model into container now
2024-11-03 01:29:57,617:INFO:_master_model_container: 9
2024-11-03 01:29:57,617:INFO:_display_container: 2
2024-11-03 01:29:57,617:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 01:29:57,617:INFO:create_model() successfully completed......................................
2024-11-03 01:29:57,675:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:57,675:INFO:Creating metrics dataframe
2024-11-03 01:29:57,678:INFO:Initializing Gradient Boosting Classifier
2024-11-03 01:29:57,678:INFO:Total runtime is 0.17517148653666179 minutes
2024-11-03 01:29:57,678:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:57,679:INFO:Initializing create_model()
2024-11-03 01:29:57,679:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:57,679:INFO:Checking exceptions
2024-11-03 01:29:57,679:INFO:Importing libraries
2024-11-03 01:29:57,679:INFO:Copying training dataset
2024-11-03 01:29:57,684:INFO:Defining folds
2024-11-03 01:29:57,684:INFO:Declaring metric variables
2024-11-03 01:29:57,684:INFO:Importing untrained model
2024-11-03 01:29:57,685:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 01:29:57,685:INFO:Starting cross validation
2024-11-03 01:29:57,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:57,979:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:58,451:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:58,462:INFO:Calculating mean and std
2024-11-03 01:29:58,463:INFO:Creating metrics dataframe
2024-11-03 01:29:58,465:INFO:Uploading results into container
2024-11-03 01:29:58,465:INFO:Uploading model into container now
2024-11-03 01:29:58,466:INFO:_master_model_container: 10
2024-11-03 01:29:58,466:INFO:_display_container: 2
2024-11-03 01:29:58,466:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 01:29:58,466:INFO:create_model() successfully completed......................................
2024-11-03 01:29:58,522:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:58,522:INFO:Creating metrics dataframe
2024-11-03 01:29:58,525:INFO:Initializing Linear Discriminant Analysis
2024-11-03 01:29:58,525:INFO:Total runtime is 0.18928449153900145 minutes
2024-11-03 01:29:58,525:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:58,526:INFO:Initializing create_model()
2024-11-03 01:29:58,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:58,526:INFO:Checking exceptions
2024-11-03 01:29:58,526:INFO:Importing libraries
2024-11-03 01:29:58,526:INFO:Copying training dataset
2024-11-03 01:29:58,531:INFO:Defining folds
2024-11-03 01:29:58,531:INFO:Declaring metric variables
2024-11-03 01:29:58,532:INFO:Importing untrained model
2024-11-03 01:29:58,532:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 01:29:58,532:INFO:Starting cross validation
2024-11-03 01:29:58,534:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:58,727:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:58,896:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:59,012:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:59,023:INFO:Calculating mean and std
2024-11-03 01:29:59,024:INFO:Creating metrics dataframe
2024-11-03 01:29:59,026:INFO:Uploading results into container
2024-11-03 01:29:59,026:INFO:Uploading model into container now
2024-11-03 01:29:59,027:INFO:_master_model_container: 11
2024-11-03 01:29:59,027:INFO:_display_container: 2
2024-11-03 01:29:59,027:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 01:29:59,027:INFO:create_model() successfully completed......................................
2024-11-03 01:29:59,078:INFO:SubProcess create_model() end ==================================
2024-11-03 01:29:59,078:INFO:Creating metrics dataframe
2024-11-03 01:29:59,081:INFO:Initializing Extra Trees Classifier
2024-11-03 01:29:59,081:INFO:Total runtime is 0.1985435366630554 minutes
2024-11-03 01:29:59,081:INFO:SubProcess create_model() called ==================================
2024-11-03 01:29:59,082:INFO:Initializing create_model()
2024-11-03 01:29:59,082:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:29:59,082:INFO:Checking exceptions
2024-11-03 01:29:59,082:INFO:Importing libraries
2024-11-03 01:29:59,082:INFO:Copying training dataset
2024-11-03 01:29:59,088:INFO:Defining folds
2024-11-03 01:29:59,088:INFO:Declaring metric variables
2024-11-03 01:29:59,088:INFO:Importing untrained model
2024-11-03 01:29:59,088:INFO:Extra Trees Classifier Imported successfully
2024-11-03 01:29:59,089:INFO:Starting cross validation
2024-11-03 01:29:59,090:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:29:59,467:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:59,793:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:29:59,829:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,183:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,190:INFO:Calculating mean and std
2024-11-03 01:30:00,191:INFO:Creating metrics dataframe
2024-11-03 01:30:00,193:INFO:Uploading results into container
2024-11-03 01:30:00,193:INFO:Uploading model into container now
2024-11-03 01:30:00,193:INFO:_master_model_container: 12
2024-11-03 01:30:00,193:INFO:_display_container: 2
2024-11-03 01:30:00,194:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 01:30:00,194:INFO:create_model() successfully completed......................................
2024-11-03 01:30:00,251:INFO:SubProcess create_model() end ==================================
2024-11-03 01:30:00,251:INFO:Creating metrics dataframe
2024-11-03 01:30:00,254:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 01:30:00,254:INFO:Total runtime is 0.21809470256169636 minutes
2024-11-03 01:30:00,254:INFO:SubProcess create_model() called ==================================
2024-11-03 01:30:00,254:INFO:Initializing create_model()
2024-11-03 01:30:00,254:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:30:00,254:INFO:Checking exceptions
2024-11-03 01:30:00,254:INFO:Importing libraries
2024-11-03 01:30:00,254:INFO:Copying training dataset
2024-11-03 01:30:00,260:INFO:Defining folds
2024-11-03 01:30:00,260:INFO:Declaring metric variables
2024-11-03 01:30:00,260:INFO:Importing untrained model
2024-11-03 01:30:00,261:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 01:30:00,261:INFO:Starting cross validation
2024-11-03 01:30:00,263:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:30:00,584:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,586:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,590:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,593:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,895:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,895:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,896:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:00,904:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,055:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,056:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,067:INFO:Calculating mean and std
2024-11-03 01:30:01,068:INFO:Creating metrics dataframe
2024-11-03 01:30:01,070:INFO:Uploading results into container
2024-11-03 01:30:01,070:INFO:Uploading model into container now
2024-11-03 01:30:01,070:INFO:_master_model_container: 13
2024-11-03 01:30:01,070:INFO:_display_container: 2
2024-11-03 01:30:01,071:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 01:30:01,071:INFO:create_model() successfully completed......................................
2024-11-03 01:30:01,121:INFO:SubProcess create_model() end ==================================
2024-11-03 01:30:01,121:INFO:Creating metrics dataframe
2024-11-03 01:30:01,124:INFO:Initializing Dummy Classifier
2024-11-03 01:30:01,124:INFO:Total runtime is 0.23259670734405516 minutes
2024-11-03 01:30:01,124:INFO:SubProcess create_model() called ==================================
2024-11-03 01:30:01,124:INFO:Initializing create_model()
2024-11-03 01:30:01,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA54F5B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:30:01,124:INFO:Checking exceptions
2024-11-03 01:30:01,124:INFO:Importing libraries
2024-11-03 01:30:01,125:INFO:Copying training dataset
2024-11-03 01:30:01,129:INFO:Defining folds
2024-11-03 01:30:01,130:INFO:Declaring metric variables
2024-11-03 01:30:01,130:INFO:Importing untrained model
2024-11-03 01:30:01,130:INFO:Dummy Classifier Imported successfully
2024-11-03 01:30:01,130:INFO:Starting cross validation
2024-11-03 01:30:01,132:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:30:01,327:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,329:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,329:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,329:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,502:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,504:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,505:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,517:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,611:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,611:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:01,630:INFO:Calculating mean and std
2024-11-03 01:30:01,631:INFO:Creating metrics dataframe
2024-11-03 01:30:01,632:INFO:Uploading results into container
2024-11-03 01:30:01,633:INFO:Uploading model into container now
2024-11-03 01:30:01,633:INFO:_master_model_container: 14
2024-11-03 01:30:01,633:INFO:_display_container: 2
2024-11-03 01:30:01,633:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 01:30:01,634:INFO:create_model() successfully completed......................................
2024-11-03 01:30:01,684:INFO:SubProcess create_model() end ==================================
2024-11-03 01:30:01,684:INFO:Creating metrics dataframe
2024-11-03 01:30:01,688:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-03 01:30:01,689:INFO:Initializing create_model()
2024-11-03 01:30:01,689:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:30:01,689:INFO:Checking exceptions
2024-11-03 01:30:01,690:INFO:Importing libraries
2024-11-03 01:30:01,690:INFO:Copying training dataset
2024-11-03 01:30:01,695:INFO:Defining folds
2024-11-03 01:30:01,695:INFO:Declaring metric variables
2024-11-03 01:30:01,696:INFO:Importing untrained model
2024-11-03 01:30:01,696:INFO:Declaring custom model
2024-11-03 01:30:01,696:INFO:Logistic Regression Imported successfully
2024-11-03 01:30:01,698:INFO:Cross validation set to False
2024-11-03 01:30:01,698:INFO:Fitting Model
2024-11-03 01:30:01,710:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 01:30:01,710:INFO:[LightGBM] [Info] Number of positive: 10, number of negative: 20
2024-11-03 01:30:01,710:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 01:30:01,710:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 01:30:01,711:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.333333 -> initscore=-0.693147
2024-11-03 01:30:01,711:INFO:[LightGBM] [Info] Start training from score -0.693147
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,711:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,712:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,713:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,714:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,715:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,716:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,717:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,718:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:01,724:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:30:01,724:INFO:create_model() successfully completed......................................
2024-11-03 01:30:01,790:INFO:_master_model_container: 14
2024-11-03 01:30:01,790:INFO:_display_container: 2
2024-11-03 01:30:01,790:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:30:01,790:INFO:compare_models() successfully completed......................................
2024-11-03 01:30:01,791:INFO:Initializing tune_model()
2024-11-03 01:30:01,791:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>)
2024-11-03 01:30:01,791:INFO:Checking exceptions
2024-11-03 01:30:01,797:INFO:Copying training dataset
2024-11-03 01:30:01,801:INFO:Checking base model
2024-11-03 01:30:01,801:INFO:Base model : Logistic Regression
2024-11-03 01:30:01,802:INFO:Declaring metric variables
2024-11-03 01:30:01,802:INFO:Defining Hyperparameters
2024-11-03 01:30:01,861:INFO:Tuning with n_jobs=-1
2024-11-03 01:30:01,861:INFO:Initializing RandomizedSearchCV
2024-11-03 01:30:07,270:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 7.863}
2024-11-03 01:30:07,270:INFO:Hyperparameter search completed
2024-11-03 01:30:07,271:INFO:SubProcess create_model() called ==================================
2024-11-03 01:30:07,272:INFO:Initializing create_model()
2024-11-03 01:30:07,272:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EBFA364F40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 7.863})
2024-11-03 01:30:07,272:INFO:Checking exceptions
2024-11-03 01:30:07,272:INFO:Importing libraries
2024-11-03 01:30:07,272:INFO:Copying training dataset
2024-11-03 01:30:07,280:INFO:Defining folds
2024-11-03 01:30:07,280:INFO:Declaring metric variables
2024-11-03 01:30:07,280:INFO:Importing untrained model
2024-11-03 01:30:07,281:INFO:Declaring custom model
2024-11-03 01:30:07,281:INFO:Logistic Regression Imported successfully
2024-11-03 01:30:07,282:INFO:Starting cross validation
2024-11-03 01:30:07,284:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:30:07,509:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:07,792:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:07,900:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:07,907:INFO:Calculating mean and std
2024-11-03 01:30:07,908:INFO:Creating metrics dataframe
2024-11-03 01:30:07,910:INFO:Finalizing model
2024-11-03 01:30:07,925:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 01:30:07,925:INFO:[LightGBM] [Info] Number of positive: 10, number of negative: 20
2024-11-03 01:30:07,926:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 01:30:07,926:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 01:30:07,926:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.333333 -> initscore=-0.693147
2024-11-03 01:30:07,926:INFO:[LightGBM] [Info] Start training from score -0.693147
2024-11-03 01:30:07,926:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,926:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,926:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,926:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,927:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,928:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,929:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,930:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,930:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,930:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,930:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,931:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,931:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,932:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,933:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,934:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,934:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,934:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,934:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,934:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,935:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:07,946:INFO:Uploading results into container
2024-11-03 01:30:07,947:INFO:Uploading model into container now
2024-11-03 01:30:07,947:INFO:_master_model_container: 15
2024-11-03 01:30:07,947:INFO:_display_container: 3
2024-11-03 01:30:07,947:INFO:LogisticRegression(C=7.863, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:30:07,948:INFO:create_model() successfully completed......................................
2024-11-03 01:30:08,004:INFO:SubProcess create_model() end ==================================
2024-11-03 01:30:08,004:INFO:choose_better activated
2024-11-03 01:30:08,005:INFO:SubProcess create_model() called ==================================
2024-11-03 01:30:08,005:INFO:Initializing create_model()
2024-11-03 01:30:08,005:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBE2FFF640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:30:08,005:INFO:Checking exceptions
2024-11-03 01:30:08,006:INFO:Importing libraries
2024-11-03 01:30:08,006:INFO:Copying training dataset
2024-11-03 01:30:08,012:INFO:Defining folds
2024-11-03 01:30:08,012:INFO:Declaring metric variables
2024-11-03 01:30:08,012:INFO:Importing untrained model
2024-11-03 01:30:08,012:INFO:Declaring custom model
2024-11-03 01:30:08,013:INFO:Logistic Regression Imported successfully
2024-11-03 01:30:08,013:INFO:Starting cross validation
2024-11-03 01:30:08,015:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:30:08,203:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:08,396:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:08,485:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:30:08,502:INFO:Calculating mean and std
2024-11-03 01:30:08,502:INFO:Creating metrics dataframe
2024-11-03 01:30:08,505:INFO:Finalizing model
2024-11-03 01:30:08,517:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 01:30:08,518:INFO:[LightGBM] [Info] Number of positive: 10, number of negative: 20
2024-11-03 01:30:08,518:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 01:30:08,518:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 01:30:08,518:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.333333 -> initscore=-0.693147
2024-11-03 01:30:08,519:INFO:[LightGBM] [Info] Start training from score -0.693147
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,521:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,524:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,526:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:30:08,534:INFO:Uploading results into container
2024-11-03 01:30:08,534:INFO:Uploading model into container now
2024-11-03 01:30:08,535:INFO:_master_model_container: 16
2024-11-03 01:30:08,535:INFO:_display_container: 4
2024-11-03 01:30:08,535:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:30:08,535:INFO:create_model() successfully completed......................................
2024-11-03 01:30:08,589:INFO:SubProcess create_model() end ==================================
2024-11-03 01:30:08,589:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8
2024-11-03 01:30:08,590:INFO:LogisticRegression(C=7.863, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8
2024-11-03 01:30:08,590:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-03 01:30:08,590:INFO:choose_better completed
2024-11-03 01:30:08,591:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 01:30:08,603:INFO:_master_model_container: 16
2024-11-03 01:30:08,604:INFO:_display_container: 3
2024-11-03 01:30:08,604:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:30:08,604:INFO:tune_model() successfully completed......................................
2024-11-03 01:31:59,453:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:31:59,453:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:31:59,453:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:31:59,453:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:32:01,211:INFO:PyCaret ClassificationExperiment
2024-11-03 01:32:01,211:INFO:Logging name: clf-default-name
2024-11-03 01:32:01,211:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 01:32:01,212:INFO:version 3.3.2
2024-11-03 01:32:01,212:INFO:Initializing setup()
2024-11-03 01:32:01,212:INFO:self.USI: a886
2024-11-03 01:32:01,212:INFO:self._variable_keys: {'y_train', 'fold_groups_param', 'fold_shuffle_param', 'n_jobs_param', 'target_param', 'is_multiclass', 'USI', 'y_test', 'data', 'log_plots_param', '_available_plots', 'fold_generator', 'y', 'idx', 'logging_param', '_ml_usecase', 'exp_id', 'X_train', 'gpu_n_jobs_param', 'exp_name_log', 'fix_imbalance', 'html_param', 'X_test', 'memory', 'X', 'pipeline', 'gpu_param', 'seed'}
2024-11-03 01:32:01,212:INFO:Checking environment
2024-11-03 01:32:01,212:INFO:python_version: 3.9.5
2024-11-03 01:32:01,212:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 01:32:01,212:INFO:machine: AMD64
2024-11-03 01:32:01,226:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 01:32:01,230:INFO:Memory: svmem(total=17098203136, available=3634126848, percent=78.7, used=13464076288, free=3634126848)
2024-11-03 01:32:01,231:INFO:Physical Core: 4
2024-11-03 01:32:01,231:INFO:Logical Core: 4
2024-11-03 01:32:01,231:INFO:Checking libraries
2024-11-03 01:32:01,231:INFO:System:
2024-11-03 01:32:01,231:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 01:32:01,231:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 01:32:01,231:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 01:32:01,231:INFO:PyCaret required dependencies:
2024-11-03 01:32:01,283:INFO:                 pip: 21.1.3
2024-11-03 01:32:01,283:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 01:32:01,284:INFO:             pycaret: 3.3.2
2024-11-03 01:32:01,284:INFO:             IPython: 8.14.0
2024-11-03 01:32:01,284:INFO:          ipywidgets: 8.1.5
2024-11-03 01:32:01,284:INFO:                tqdm: 4.66.6
2024-11-03 01:32:01,284:INFO:               numpy: 1.26.4
2024-11-03 01:32:01,284:INFO:              pandas: 2.1.4
2024-11-03 01:32:01,284:INFO:              jinja2: 3.1.4
2024-11-03 01:32:01,284:INFO:               scipy: 1.11.4
2024-11-03 01:32:01,284:INFO:              joblib: 1.3.2
2024-11-03 01:32:01,284:INFO:             sklearn: 1.4.2
2024-11-03 01:32:01,284:INFO:                pyod: 2.0.2
2024-11-03 01:32:01,284:INFO:            imblearn: 0.12.4
2024-11-03 01:32:01,284:INFO:   category_encoders: 2.6.4
2024-11-03 01:32:01,284:INFO:            lightgbm: 4.5.0
2024-11-03 01:32:01,284:INFO:               numba: 0.60.0
2024-11-03 01:32:01,284:INFO:            requests: 2.32.3
2024-11-03 01:32:01,284:INFO:          matplotlib: 3.7.5
2024-11-03 01:32:01,284:INFO:          scikitplot: 0.3.7
2024-11-03 01:32:01,284:INFO:         yellowbrick: 1.5
2024-11-03 01:32:01,284:INFO:              plotly: 5.24.1
2024-11-03 01:32:01,284:INFO:    plotly-resampler: Not installed
2024-11-03 01:32:01,284:INFO:             kaleido: 0.2.1
2024-11-03 01:32:01,285:INFO:           schemdraw: 0.15
2024-11-03 01:32:01,285:INFO:         statsmodels: 0.14.4
2024-11-03 01:32:01,285:INFO:              sktime: 0.26.0
2024-11-03 01:32:01,285:INFO:               tbats: 1.1.3
2024-11-03 01:32:01,285:INFO:            pmdarima: 2.0.4
2024-11-03 01:32:01,285:INFO:              psutil: 5.9.5
2024-11-03 01:32:01,285:INFO:          markupsafe: 3.0.2
2024-11-03 01:32:01,285:INFO:             pickle5: Not installed
2024-11-03 01:32:01,285:INFO:         cloudpickle: 3.1.0
2024-11-03 01:32:01,285:INFO:         deprecation: 2.1.0
2024-11-03 01:32:01,285:INFO:              xxhash: 3.5.0
2024-11-03 01:32:01,285:INFO:           wurlitzer: Not installed
2024-11-03 01:32:01,285:INFO:PyCaret optional dependencies:
2024-11-03 01:32:01,307:INFO:                shap: Not installed
2024-11-03 01:32:01,308:INFO:           interpret: Not installed
2024-11-03 01:32:01,308:INFO:                umap: Not installed
2024-11-03 01:32:01,308:INFO:     ydata_profiling: Not installed
2024-11-03 01:32:01,308:INFO:  explainerdashboard: Not installed
2024-11-03 01:32:01,308:INFO:             autoviz: Not installed
2024-11-03 01:32:01,308:INFO:           fairlearn: Not installed
2024-11-03 01:32:01,308:INFO:          deepchecks: Not installed
2024-11-03 01:32:01,308:INFO:             xgboost: Not installed
2024-11-03 01:32:01,308:INFO:            catboost: Not installed
2024-11-03 01:32:01,308:INFO:              kmodes: Not installed
2024-11-03 01:32:01,308:INFO:             mlxtend: Not installed
2024-11-03 01:32:01,308:INFO:       statsforecast: Not installed
2024-11-03 01:32:01,308:INFO:        tune_sklearn: Not installed
2024-11-03 01:32:01,308:INFO:                 ray: Not installed
2024-11-03 01:32:01,308:INFO:            hyperopt: Not installed
2024-11-03 01:32:01,308:INFO:              optuna: Not installed
2024-11-03 01:32:01,308:INFO:               skopt: Not installed
2024-11-03 01:32:01,308:INFO:              mlflow: Not installed
2024-11-03 01:32:01,308:INFO:              gradio: Not installed
2024-11-03 01:32:01,308:INFO:             fastapi: Not installed
2024-11-03 01:32:01,308:INFO:             uvicorn: Not installed
2024-11-03 01:32:01,308:INFO:              m2cgen: Not installed
2024-11-03 01:32:01,308:INFO:           evidently: Not installed
2024-11-03 01:32:01,308:INFO:               fugue: Not installed
2024-11-03 01:32:01,308:INFO:           streamlit: Not installed
2024-11-03 01:32:01,308:INFO:             prophet: Not installed
2024-11-03 01:32:01,308:INFO:None
2024-11-03 01:32:01,308:INFO:Set up data.
2024-11-03 01:32:01,314:INFO:Set up folding strategy.
2024-11-03 01:33:28,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:33:28,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:33:28,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:33:28,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 01:33:30,164:INFO:PyCaret ClassificationExperiment
2024-11-03 01:33:30,164:INFO:Logging name: clf-default-name
2024-11-03 01:33:30,164:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 01:33:30,165:INFO:version 3.3.2
2024-11-03 01:33:30,165:INFO:Initializing setup()
2024-11-03 01:33:30,165:INFO:self.USI: 7bd1
2024-11-03 01:33:30,165:INFO:self._variable_keys: {'fold_generator', 'logging_param', '_ml_usecase', 'data', 'X_train', 'seed', 'html_param', 'fix_imbalance', 'y_test', 'gpu_param', 'n_jobs_param', 'log_plots_param', 'exp_name_log', 'pipeline', 'target_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fold_groups_param', '_available_plots', 'y_train', 'idx', 'memory', 'exp_id', 'X_test', 'is_multiclass', 'y', 'USI', 'X'}
2024-11-03 01:33:30,165:INFO:Checking environment
2024-11-03 01:33:30,165:INFO:python_version: 3.9.5
2024-11-03 01:33:30,165:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 01:33:30,166:INFO:machine: AMD64
2024-11-03 01:33:30,180:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 01:33:30,183:INFO:Memory: svmem(total=17098203136, available=2978156544, percent=82.6, used=14120046592, free=2978156544)
2024-11-03 01:33:30,183:INFO:Physical Core: 4
2024-11-03 01:33:30,184:INFO:Logical Core: 4
2024-11-03 01:33:30,184:INFO:Checking libraries
2024-11-03 01:33:30,184:INFO:System:
2024-11-03 01:33:30,184:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 01:33:30,184:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 01:33:30,184:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 01:33:30,184:INFO:PyCaret required dependencies:
2024-11-03 01:33:30,245:INFO:                 pip: 21.1.3
2024-11-03 01:33:30,245:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 01:33:30,245:INFO:             pycaret: 3.3.2
2024-11-03 01:33:30,245:INFO:             IPython: 8.14.0
2024-11-03 01:33:30,245:INFO:          ipywidgets: 8.1.5
2024-11-03 01:33:30,245:INFO:                tqdm: 4.66.6
2024-11-03 01:33:30,245:INFO:               numpy: 1.26.4
2024-11-03 01:33:30,245:INFO:              pandas: 2.1.4
2024-11-03 01:33:30,245:INFO:              jinja2: 3.1.4
2024-11-03 01:33:30,245:INFO:               scipy: 1.11.4
2024-11-03 01:33:30,245:INFO:              joblib: 1.3.2
2024-11-03 01:33:30,246:INFO:             sklearn: 1.4.2
2024-11-03 01:33:30,246:INFO:                pyod: 2.0.2
2024-11-03 01:33:30,246:INFO:            imblearn: 0.12.4
2024-11-03 01:33:30,246:INFO:   category_encoders: 2.6.4
2024-11-03 01:33:30,246:INFO:            lightgbm: 4.5.0
2024-11-03 01:33:30,246:INFO:               numba: 0.60.0
2024-11-03 01:33:30,246:INFO:            requests: 2.32.3
2024-11-03 01:33:30,246:INFO:          matplotlib: 3.7.5
2024-11-03 01:33:30,246:INFO:          scikitplot: 0.3.7
2024-11-03 01:33:30,246:INFO:         yellowbrick: 1.5
2024-11-03 01:33:30,246:INFO:              plotly: 5.24.1
2024-11-03 01:33:30,246:INFO:    plotly-resampler: Not installed
2024-11-03 01:33:30,246:INFO:             kaleido: 0.2.1
2024-11-03 01:33:30,246:INFO:           schemdraw: 0.15
2024-11-03 01:33:30,246:INFO:         statsmodels: 0.14.4
2024-11-03 01:33:30,246:INFO:              sktime: 0.26.0
2024-11-03 01:33:30,246:INFO:               tbats: 1.1.3
2024-11-03 01:33:30,246:INFO:            pmdarima: 2.0.4
2024-11-03 01:33:30,246:INFO:              psutil: 5.9.5
2024-11-03 01:33:30,246:INFO:          markupsafe: 3.0.2
2024-11-03 01:33:30,246:INFO:             pickle5: Not installed
2024-11-03 01:33:30,246:INFO:         cloudpickle: 3.1.0
2024-11-03 01:33:30,247:INFO:         deprecation: 2.1.0
2024-11-03 01:33:30,247:INFO:              xxhash: 3.5.0
2024-11-03 01:33:30,247:INFO:           wurlitzer: Not installed
2024-11-03 01:33:30,247:INFO:PyCaret optional dependencies:
2024-11-03 01:33:30,266:INFO:                shap: Not installed
2024-11-03 01:33:30,267:INFO:           interpret: Not installed
2024-11-03 01:33:30,267:INFO:                umap: Not installed
2024-11-03 01:33:30,267:INFO:     ydata_profiling: Not installed
2024-11-03 01:33:30,267:INFO:  explainerdashboard: Not installed
2024-11-03 01:33:30,267:INFO:             autoviz: Not installed
2024-11-03 01:33:30,267:INFO:           fairlearn: Not installed
2024-11-03 01:33:30,267:INFO:          deepchecks: Not installed
2024-11-03 01:33:30,267:INFO:             xgboost: Not installed
2024-11-03 01:33:30,267:INFO:            catboost: Not installed
2024-11-03 01:33:30,267:INFO:              kmodes: Not installed
2024-11-03 01:33:30,267:INFO:             mlxtend: Not installed
2024-11-03 01:33:30,267:INFO:       statsforecast: Not installed
2024-11-03 01:33:30,267:INFO:        tune_sklearn: Not installed
2024-11-03 01:33:30,267:INFO:                 ray: Not installed
2024-11-03 01:33:30,267:INFO:            hyperopt: Not installed
2024-11-03 01:33:30,267:INFO:              optuna: Not installed
2024-11-03 01:33:30,267:INFO:               skopt: Not installed
2024-11-03 01:33:30,267:INFO:              mlflow: Not installed
2024-11-03 01:33:30,267:INFO:              gradio: Not installed
2024-11-03 01:33:30,268:INFO:             fastapi: Not installed
2024-11-03 01:33:30,268:INFO:             uvicorn: Not installed
2024-11-03 01:33:30,268:INFO:              m2cgen: Not installed
2024-11-03 01:33:30,268:INFO:           evidently: Not installed
2024-11-03 01:33:30,268:INFO:               fugue: Not installed
2024-11-03 01:33:30,268:INFO:           streamlit: Not installed
2024-11-03 01:33:30,268:INFO:             prophet: Not installed
2024-11-03 01:33:30,268:INFO:None
2024-11-03 01:33:30,268:INFO:Set up data.
2024-11-03 01:33:30,275:INFO:Set up folding strategy.
2024-11-03 01:33:30,275:INFO:Set up train/test split.
2024-11-03 01:33:30,281:INFO:Set up index.
2024-11-03 01:33:30,281:INFO:Assigning column types.
2024-11-03 01:33:30,285:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 01:33:30,333:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 01:33:30,336:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:33:30,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,374:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,421:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 01:33:30,422:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:33:30,451:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,452:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,452:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 01:33:30,500:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:33:30,530:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,531:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,580:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 01:33:30,609:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,609:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,610:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 01:33:30,686:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,687:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,765:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,765:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,767:INFO:Preparing preprocessing pipeline...
2024-11-03 01:33:30,768:INFO:Set up simple imputation.
2024-11-03 01:33:30,768:INFO:Set up feature normalization.
2024-11-03 01:33:30,768:INFO:Set up feature selection.
2024-11-03 01:33:30,844:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:30,845:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:31,090:INFO:Finished creating preprocessing pipeline.
2024-11-03 01:33:31,101:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 01:33:31,102:INFO:Creating final display dataframe.
2024-11-03 01:33:31,249:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (30, 20)
4        Transformed data shape           (30, 4)
5   Transformed train set shape           (21, 4)
6    Transformed test set shape            (9, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                 5
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              7bd1
2024-11-03 01:33:31,340:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:31,340:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:31,418:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:31,419:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 01:33:31,420:INFO:setup() successfully completed in 1.26s...............
2024-11-03 01:33:31,420:INFO:Initializing compare_models()
2024-11-03 01:33:31,420:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, include=None, fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 01:33:31,420:INFO:Checking exceptions
2024-11-03 01:33:31,424:INFO:Preparing display monitor
2024-11-03 01:33:31,428:INFO:Initializing Logistic Regression
2024-11-03 01:33:31,428:INFO:Total runtime is 0.0 minutes
2024-11-03 01:33:31,428:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:31,428:INFO:Initializing create_model()
2024-11-03 01:33:31,428:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:31,429:INFO:Checking exceptions
2024-11-03 01:33:31,429:INFO:Importing libraries
2024-11-03 01:33:31,429:INFO:Copying training dataset
2024-11-03 01:33:31,435:INFO:Defining folds
2024-11-03 01:33:31,435:INFO:Declaring metric variables
2024-11-03 01:33:31,435:INFO:Importing untrained model
2024-11-03 01:33:31,435:INFO:Logistic Regression Imported successfully
2024-11-03 01:33:31,436:INFO:Starting cross validation
2024-11-03 01:33:31,437:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:35,299:INFO:Calculating mean and std
2024-11-03 01:33:35,300:INFO:Creating metrics dataframe
2024-11-03 01:33:35,302:INFO:Uploading results into container
2024-11-03 01:33:35,303:INFO:Uploading model into container now
2024-11-03 01:33:35,303:INFO:_master_model_container: 1
2024-11-03 01:33:35,303:INFO:_display_container: 2
2024-11-03 01:33:35,304:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 01:33:35,304:INFO:create_model() successfully completed......................................
2024-11-03 01:33:35,365:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:35,365:INFO:Creating metrics dataframe
2024-11-03 01:33:35,368:INFO:Initializing K Neighbors Classifier
2024-11-03 01:33:35,368:INFO:Total runtime is 0.06565656661987304 minutes
2024-11-03 01:33:35,369:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:35,369:INFO:Initializing create_model()
2024-11-03 01:33:35,369:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:35,369:INFO:Checking exceptions
2024-11-03 01:33:35,369:INFO:Importing libraries
2024-11-03 01:33:35,369:INFO:Copying training dataset
2024-11-03 01:33:35,375:INFO:Defining folds
2024-11-03 01:33:35,375:INFO:Declaring metric variables
2024-11-03 01:33:35,376:INFO:Importing untrained model
2024-11-03 01:33:35,376:INFO:K Neighbors Classifier Imported successfully
2024-11-03 01:33:35,376:INFO:Starting cross validation
2024-11-03 01:33:35,378:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:35,766:INFO:Calculating mean and std
2024-11-03 01:33:35,767:INFO:Creating metrics dataframe
2024-11-03 01:33:35,769:INFO:Uploading results into container
2024-11-03 01:33:35,769:INFO:Uploading model into container now
2024-11-03 01:33:35,770:INFO:_master_model_container: 2
2024-11-03 01:33:35,770:INFO:_display_container: 2
2024-11-03 01:33:35,770:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 01:33:35,770:INFO:create_model() successfully completed......................................
2024-11-03 01:33:35,828:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:35,828:INFO:Creating metrics dataframe
2024-11-03 01:33:35,831:INFO:Initializing Naive Bayes
2024-11-03 01:33:35,831:INFO:Total runtime is 0.07336861292521159 minutes
2024-11-03 01:33:35,831:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:35,832:INFO:Initializing create_model()
2024-11-03 01:33:35,832:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:35,832:INFO:Checking exceptions
2024-11-03 01:33:35,832:INFO:Importing libraries
2024-11-03 01:33:35,832:INFO:Copying training dataset
2024-11-03 01:33:35,837:INFO:Defining folds
2024-11-03 01:33:35,837:INFO:Declaring metric variables
2024-11-03 01:33:35,837:INFO:Importing untrained model
2024-11-03 01:33:35,838:INFO:Naive Bayes Imported successfully
2024-11-03 01:33:35,838:INFO:Starting cross validation
2024-11-03 01:33:35,840:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:36,139:INFO:Calculating mean and std
2024-11-03 01:33:36,140:INFO:Creating metrics dataframe
2024-11-03 01:33:36,142:INFO:Uploading results into container
2024-11-03 01:33:36,142:INFO:Uploading model into container now
2024-11-03 01:33:36,143:INFO:_master_model_container: 3
2024-11-03 01:33:36,143:INFO:_display_container: 2
2024-11-03 01:33:36,143:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 01:33:36,143:INFO:create_model() successfully completed......................................
2024-11-03 01:33:36,196:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:36,197:INFO:Creating metrics dataframe
2024-11-03 01:33:36,199:INFO:Initializing Decision Tree Classifier
2024-11-03 01:33:36,200:INFO:Total runtime is 0.07951863606770833 minutes
2024-11-03 01:33:36,200:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:36,200:INFO:Initializing create_model()
2024-11-03 01:33:36,200:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:36,200:INFO:Checking exceptions
2024-11-03 01:33:36,200:INFO:Importing libraries
2024-11-03 01:33:36,200:INFO:Copying training dataset
2024-11-03 01:33:36,206:INFO:Defining folds
2024-11-03 01:33:36,207:INFO:Declaring metric variables
2024-11-03 01:33:36,207:INFO:Importing untrained model
2024-11-03 01:33:36,207:INFO:Decision Tree Classifier Imported successfully
2024-11-03 01:33:36,207:INFO:Starting cross validation
2024-11-03 01:33:36,209:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:36,497:INFO:Calculating mean and std
2024-11-03 01:33:36,498:INFO:Creating metrics dataframe
2024-11-03 01:33:36,500:INFO:Uploading results into container
2024-11-03 01:33:36,501:INFO:Uploading model into container now
2024-11-03 01:33:36,501:INFO:_master_model_container: 4
2024-11-03 01:33:36,501:INFO:_display_container: 2
2024-11-03 01:33:36,501:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 01:33:36,501:INFO:create_model() successfully completed......................................
2024-11-03 01:33:36,555:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:36,555:INFO:Creating metrics dataframe
2024-11-03 01:33:36,558:INFO:Initializing SVM - Linear Kernel
2024-11-03 01:33:36,558:INFO:Total runtime is 0.08549459377924601 minutes
2024-11-03 01:33:36,558:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:36,558:INFO:Initializing create_model()
2024-11-03 01:33:36,558:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:36,558:INFO:Checking exceptions
2024-11-03 01:33:36,559:INFO:Importing libraries
2024-11-03 01:33:36,559:INFO:Copying training dataset
2024-11-03 01:33:36,565:INFO:Defining folds
2024-11-03 01:33:36,565:INFO:Declaring metric variables
2024-11-03 01:33:36,565:INFO:Importing untrained model
2024-11-03 01:33:36,566:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 01:33:36,566:INFO:Starting cross validation
2024-11-03 01:33:36,568:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:36,873:INFO:Calculating mean and std
2024-11-03 01:33:36,874:INFO:Creating metrics dataframe
2024-11-03 01:33:36,876:INFO:Uploading results into container
2024-11-03 01:33:36,876:INFO:Uploading model into container now
2024-11-03 01:33:36,876:INFO:_master_model_container: 5
2024-11-03 01:33:36,877:INFO:_display_container: 2
2024-11-03 01:33:36,877:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 01:33:36,877:INFO:create_model() successfully completed......................................
2024-11-03 01:33:36,931:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:36,931:INFO:Creating metrics dataframe
2024-11-03 01:33:36,934:INFO:Initializing Ridge Classifier
2024-11-03 01:33:36,934:INFO:Total runtime is 0.0917631189028422 minutes
2024-11-03 01:33:36,934:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:36,935:INFO:Initializing create_model()
2024-11-03 01:33:36,935:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:36,935:INFO:Checking exceptions
2024-11-03 01:33:36,935:INFO:Importing libraries
2024-11-03 01:33:36,935:INFO:Copying training dataset
2024-11-03 01:33:36,941:INFO:Defining folds
2024-11-03 01:33:36,941:INFO:Declaring metric variables
2024-11-03 01:33:36,941:INFO:Importing untrained model
2024-11-03 01:33:36,942:INFO:Ridge Classifier Imported successfully
2024-11-03 01:33:36,942:INFO:Starting cross validation
2024-11-03 01:33:36,944:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:37,234:INFO:Calculating mean and std
2024-11-03 01:33:37,235:INFO:Creating metrics dataframe
2024-11-03 01:33:37,237:INFO:Uploading results into container
2024-11-03 01:33:37,237:INFO:Uploading model into container now
2024-11-03 01:33:37,238:INFO:_master_model_container: 6
2024-11-03 01:33:37,238:INFO:_display_container: 2
2024-11-03 01:33:37,238:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 01:33:37,238:INFO:create_model() successfully completed......................................
2024-11-03 01:33:37,291:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:37,291:INFO:Creating metrics dataframe
2024-11-03 01:33:37,294:INFO:Initializing Random Forest Classifier
2024-11-03 01:33:37,294:INFO:Total runtime is 0.09776057402292887 minutes
2024-11-03 01:33:37,294:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:37,294:INFO:Initializing create_model()
2024-11-03 01:33:37,294:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:37,294:INFO:Checking exceptions
2024-11-03 01:33:37,294:INFO:Importing libraries
2024-11-03 01:33:37,294:INFO:Copying training dataset
2024-11-03 01:33:37,299:INFO:Defining folds
2024-11-03 01:33:37,299:INFO:Declaring metric variables
2024-11-03 01:33:37,300:INFO:Importing untrained model
2024-11-03 01:33:37,300:INFO:Random Forest Classifier Imported successfully
2024-11-03 01:33:37,300:INFO:Starting cross validation
2024-11-03 01:33:37,302:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:38,062:INFO:Calculating mean and std
2024-11-03 01:33:38,063:INFO:Creating metrics dataframe
2024-11-03 01:33:38,065:INFO:Uploading results into container
2024-11-03 01:33:38,065:INFO:Uploading model into container now
2024-11-03 01:33:38,065:INFO:_master_model_container: 7
2024-11-03 01:33:38,065:INFO:_display_container: 2
2024-11-03 01:33:38,066:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 01:33:38,066:INFO:create_model() successfully completed......................................
2024-11-03 01:33:38,118:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:38,118:INFO:Creating metrics dataframe
2024-11-03 01:33:38,121:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 01:33:38,121:INFO:Total runtime is 0.11154693365097046 minutes
2024-11-03 01:33:38,121:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:38,121:INFO:Initializing create_model()
2024-11-03 01:33:38,121:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:38,121:INFO:Checking exceptions
2024-11-03 01:33:38,121:INFO:Importing libraries
2024-11-03 01:33:38,121:INFO:Copying training dataset
2024-11-03 01:33:38,127:INFO:Defining folds
2024-11-03 01:33:38,127:INFO:Declaring metric variables
2024-11-03 01:33:38,127:INFO:Importing untrained model
2024-11-03 01:33:38,127:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 01:33:38,127:INFO:Starting cross validation
2024-11-03 01:33:38,129:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:38,423:INFO:Calculating mean and std
2024-11-03 01:33:38,424:INFO:Creating metrics dataframe
2024-11-03 01:33:38,426:INFO:Uploading results into container
2024-11-03 01:33:38,426:INFO:Uploading model into container now
2024-11-03 01:33:38,427:INFO:_master_model_container: 8
2024-11-03 01:33:38,427:INFO:_display_container: 2
2024-11-03 01:33:38,427:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 01:33:38,427:INFO:create_model() successfully completed......................................
2024-11-03 01:33:38,477:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:38,477:INFO:Creating metrics dataframe
2024-11-03 01:33:38,480:INFO:Initializing Ada Boost Classifier
2024-11-03 01:33:38,480:INFO:Total runtime is 0.11752096811930339 minutes
2024-11-03 01:33:38,480:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:38,480:INFO:Initializing create_model()
2024-11-03 01:33:38,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:38,481:INFO:Checking exceptions
2024-11-03 01:33:38,481:INFO:Importing libraries
2024-11-03 01:33:38,481:INFO:Copying training dataset
2024-11-03 01:33:38,486:INFO:Defining folds
2024-11-03 01:33:38,486:INFO:Declaring metric variables
2024-11-03 01:33:38,486:INFO:Importing untrained model
2024-11-03 01:33:38,486:INFO:Ada Boost Classifier Imported successfully
2024-11-03 01:33:38,486:INFO:Starting cross validation
2024-11-03 01:33:38,488:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:38,655:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:33:38,660:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:33:38,662:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:33:38,663:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:33:38,829:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 01:33:38,956:INFO:Calculating mean and std
2024-11-03 01:33:38,957:INFO:Creating metrics dataframe
2024-11-03 01:33:38,959:INFO:Uploading results into container
2024-11-03 01:33:38,959:INFO:Uploading model into container now
2024-11-03 01:33:38,960:INFO:_master_model_container: 9
2024-11-03 01:33:38,960:INFO:_display_container: 2
2024-11-03 01:33:38,960:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 01:33:38,960:INFO:create_model() successfully completed......................................
2024-11-03 01:33:39,013:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:39,013:INFO:Creating metrics dataframe
2024-11-03 01:33:39,016:INFO:Initializing Gradient Boosting Classifier
2024-11-03 01:33:39,016:INFO:Total runtime is 0.12645352284113567 minutes
2024-11-03 01:33:39,016:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:39,016:INFO:Initializing create_model()
2024-11-03 01:33:39,016:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:39,016:INFO:Checking exceptions
2024-11-03 01:33:39,016:INFO:Importing libraries
2024-11-03 01:33:39,016:INFO:Copying training dataset
2024-11-03 01:33:39,022:INFO:Defining folds
2024-11-03 01:33:39,022:INFO:Declaring metric variables
2024-11-03 01:33:39,023:INFO:Importing untrained model
2024-11-03 01:33:39,023:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 01:33:39,023:INFO:Starting cross validation
2024-11-03 01:33:39,025:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:39,484:INFO:Calculating mean and std
2024-11-03 01:33:39,485:INFO:Creating metrics dataframe
2024-11-03 01:33:39,487:INFO:Uploading results into container
2024-11-03 01:33:39,487:INFO:Uploading model into container now
2024-11-03 01:33:39,488:INFO:_master_model_container: 10
2024-11-03 01:33:39,488:INFO:_display_container: 2
2024-11-03 01:33:39,488:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 01:33:39,488:INFO:create_model() successfully completed......................................
2024-11-03 01:33:39,541:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:39,541:INFO:Creating metrics dataframe
2024-11-03 01:33:39,543:INFO:Initializing Linear Discriminant Analysis
2024-11-03 01:33:39,544:INFO:Total runtime is 0.13525956869125366 minutes
2024-11-03 01:33:39,544:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:39,544:INFO:Initializing create_model()
2024-11-03 01:33:39,544:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:39,544:INFO:Checking exceptions
2024-11-03 01:33:39,544:INFO:Importing libraries
2024-11-03 01:33:39,544:INFO:Copying training dataset
2024-11-03 01:33:39,549:INFO:Defining folds
2024-11-03 01:33:39,549:INFO:Declaring metric variables
2024-11-03 01:33:39,549:INFO:Importing untrained model
2024-11-03 01:33:39,550:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 01:33:39,550:INFO:Starting cross validation
2024-11-03 01:33:39,552:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:39,834:INFO:Calculating mean and std
2024-11-03 01:33:39,835:INFO:Creating metrics dataframe
2024-11-03 01:33:39,836:INFO:Uploading results into container
2024-11-03 01:33:39,837:INFO:Uploading model into container now
2024-11-03 01:33:39,837:INFO:_master_model_container: 11
2024-11-03 01:33:39,837:INFO:_display_container: 2
2024-11-03 01:33:39,838:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 01:33:39,838:INFO:create_model() successfully completed......................................
2024-11-03 01:33:39,889:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:39,889:INFO:Creating metrics dataframe
2024-11-03 01:33:39,892:INFO:Initializing Extra Trees Classifier
2024-11-03 01:33:39,892:INFO:Total runtime is 0.14105078379313152 minutes
2024-11-03 01:33:39,892:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:39,892:INFO:Initializing create_model()
2024-11-03 01:33:39,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:39,892:INFO:Checking exceptions
2024-11-03 01:33:39,893:INFO:Importing libraries
2024-11-03 01:33:39,893:INFO:Copying training dataset
2024-11-03 01:33:39,896:INFO:Defining folds
2024-11-03 01:33:39,897:INFO:Declaring metric variables
2024-11-03 01:33:39,897:INFO:Importing untrained model
2024-11-03 01:33:39,897:INFO:Extra Trees Classifier Imported successfully
2024-11-03 01:33:39,898:INFO:Starting cross validation
2024-11-03 01:33:39,899:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:40,488:INFO:Calculating mean and std
2024-11-03 01:33:40,489:INFO:Creating metrics dataframe
2024-11-03 01:33:40,491:INFO:Uploading results into container
2024-11-03 01:33:40,491:INFO:Uploading model into container now
2024-11-03 01:33:40,492:INFO:_master_model_container: 12
2024-11-03 01:33:40,492:INFO:_display_container: 2
2024-11-03 01:33:40,492:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 01:33:40,492:INFO:create_model() successfully completed......................................
2024-11-03 01:33:40,545:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:40,545:INFO:Creating metrics dataframe
2024-11-03 01:33:40,547:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 01:33:40,548:INFO:Total runtime is 0.15198616186777753 minutes
2024-11-03 01:33:40,548:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:40,548:INFO:Initializing create_model()
2024-11-03 01:33:40,548:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:40,548:INFO:Checking exceptions
2024-11-03 01:33:40,548:INFO:Importing libraries
2024-11-03 01:33:40,548:INFO:Copying training dataset
2024-11-03 01:33:40,553:INFO:Defining folds
2024-11-03 01:33:40,554:INFO:Declaring metric variables
2024-11-03 01:33:40,554:INFO:Importing untrained model
2024-11-03 01:33:40,554:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 01:33:40,555:INFO:Starting cross validation
2024-11-03 01:33:40,556:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:40,889:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:33:41,129:INFO:Calculating mean and std
2024-11-03 01:33:41,130:INFO:Creating metrics dataframe
2024-11-03 01:33:41,132:INFO:Uploading results into container
2024-11-03 01:33:41,132:INFO:Uploading model into container now
2024-11-03 01:33:41,132:INFO:_master_model_container: 13
2024-11-03 01:33:41,133:INFO:_display_container: 2
2024-11-03 01:33:41,133:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 01:33:41,133:INFO:create_model() successfully completed......................................
2024-11-03 01:33:41,183:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:41,184:INFO:Creating metrics dataframe
2024-11-03 01:33:41,186:INFO:Initializing Dummy Classifier
2024-11-03 01:33:41,186:INFO:Total runtime is 0.1626336971918742 minutes
2024-11-03 01:33:41,186:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:41,187:INFO:Initializing create_model()
2024-11-03 01:33:41,187:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E70FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:41,187:INFO:Checking exceptions
2024-11-03 01:33:41,187:INFO:Importing libraries
2024-11-03 01:33:41,187:INFO:Copying training dataset
2024-11-03 01:33:41,192:INFO:Defining folds
2024-11-03 01:33:41,192:INFO:Declaring metric variables
2024-11-03 01:33:41,192:INFO:Importing untrained model
2024-11-03 01:33:41,192:INFO:Dummy Classifier Imported successfully
2024-11-03 01:33:41,193:INFO:Starting cross validation
2024-11-03 01:33:41,194:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:41,395:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 01:33:41,489:INFO:Calculating mean and std
2024-11-03 01:33:41,490:INFO:Creating metrics dataframe
2024-11-03 01:33:41,492:INFO:Uploading results into container
2024-11-03 01:33:41,492:INFO:Uploading model into container now
2024-11-03 01:33:41,493:INFO:_master_model_container: 14
2024-11-03 01:33:41,493:INFO:_display_container: 2
2024-11-03 01:33:41,493:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 01:33:41,493:INFO:create_model() successfully completed......................................
2024-11-03 01:33:41,544:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:41,544:INFO:Creating metrics dataframe
2024-11-03 01:33:41,548:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-03 01:33:41,549:INFO:Initializing create_model()
2024-11-03 01:33:41,549:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:41,550:INFO:Checking exceptions
2024-11-03 01:33:41,550:INFO:Importing libraries
2024-11-03 01:33:41,550:INFO:Copying training dataset
2024-11-03 01:33:41,555:INFO:Defining folds
2024-11-03 01:33:41,555:INFO:Declaring metric variables
2024-11-03 01:33:41,555:INFO:Importing untrained model
2024-11-03 01:33:41,555:INFO:Declaring custom model
2024-11-03 01:33:41,556:INFO:Naive Bayes Imported successfully
2024-11-03 01:33:41,557:INFO:Cross validation set to False
2024-11-03 01:33:41,557:INFO:Fitting Model
2024-11-03 01:33:41,569:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 01:33:41,570:INFO:[LightGBM] [Info] Number of positive: 11, number of negative: 10
2024-11-03 01:33:41,570:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 01:33:41,570:INFO:[LightGBM] [Info] Number of data points in the train set: 21, number of used features: 0
2024-11-03 01:33:41,570:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.523810 -> initscore=0.095310
2024-11-03 01:33:41,570:INFO:[LightGBM] [Info] Start training from score 0.095310
2024-11-03 01:33:41,570:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,570:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,570:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,570:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,570:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,571:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,574:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:41,583:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 01:33:41,583:INFO:create_model() successfully completed......................................
2024-11-03 01:33:41,645:INFO:_master_model_container: 14
2024-11-03 01:33:41,645:INFO:_display_container: 2
2024-11-03 01:33:41,645:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 01:33:41,645:INFO:compare_models() successfully completed......................................
2024-11-03 01:33:41,646:INFO:Initializing tune_model()
2024-11-03 01:33:41,646:INFO:tune_model(estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=None, round=4, n_iter=10, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>)
2024-11-03 01:33:41,646:INFO:Checking exceptions
2024-11-03 01:33:41,654:INFO:Copying training dataset
2024-11-03 01:33:41,658:INFO:Checking base model
2024-11-03 01:33:41,658:INFO:Base model : Naive Bayes
2024-11-03 01:33:41,658:INFO:Declaring metric variables
2024-11-03 01:33:41,658:INFO:Defining Hyperparameters
2024-11-03 01:33:41,714:INFO:Tuning with n_jobs=-1
2024-11-03 01:33:41,715:INFO:Initializing RandomizedSearchCV
2024-11-03 01:33:44,287:INFO:best_params: {'actual_estimator__var_smoothing': 2e-09}
2024-11-03 01:33:44,287:INFO:Hyperparameter search completed
2024-11-03 01:33:44,287:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:44,288:INFO:Initializing create_model()
2024-11-03 01:33:44,288:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EB82E763A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'var_smoothing': 2e-09})
2024-11-03 01:33:44,288:INFO:Checking exceptions
2024-11-03 01:33:44,288:INFO:Importing libraries
2024-11-03 01:33:44,288:INFO:Copying training dataset
2024-11-03 01:33:44,295:INFO:Defining folds
2024-11-03 01:33:44,295:INFO:Declaring metric variables
2024-11-03 01:33:44,296:INFO:Importing untrained model
2024-11-03 01:33:44,296:INFO:Declaring custom model
2024-11-03 01:33:44,296:INFO:Naive Bayes Imported successfully
2024-11-03 01:33:44,296:INFO:Starting cross validation
2024-11-03 01:33:44,298:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:44,582:INFO:Calculating mean and std
2024-11-03 01:33:44,583:INFO:Creating metrics dataframe
2024-11-03 01:33:44,585:INFO:Finalizing model
2024-11-03 01:33:44,595:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 01:33:44,596:INFO:[LightGBM] [Info] Number of positive: 11, number of negative: 10
2024-11-03 01:33:44,596:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 01:33:44,596:INFO:[LightGBM] [Info] Number of data points in the train set: 21, number of used features: 0
2024-11-03 01:33:44,596:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.523810 -> initscore=0.095310
2024-11-03 01:33:44,596:INFO:[LightGBM] [Info] Start training from score 0.095310
2024-11-03 01:33:44,596:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,596:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,596:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,597:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,599:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,599:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,599:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,599:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,601:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,602:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,602:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,602:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,602:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,602:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,604:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,604:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,605:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,606:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,607:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,607:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,607:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,607:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,607:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,607:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,608:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,609:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,610:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,611:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,612:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,612:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,612:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,612:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,617:INFO:Uploading results into container
2024-11-03 01:33:44,618:INFO:Uploading model into container now
2024-11-03 01:33:44,618:INFO:_master_model_container: 15
2024-11-03 01:33:44,618:INFO:_display_container: 3
2024-11-03 01:33:44,619:INFO:GaussianNB(priors=None, var_smoothing=2e-09)
2024-11-03 01:33:44,619:INFO:create_model() successfully completed......................................
2024-11-03 01:33:44,674:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:44,674:INFO:choose_better activated
2024-11-03 01:33:44,675:INFO:SubProcess create_model() called ==================================
2024-11-03 01:33:44,675:INFO:Initializing create_model()
2024-11-03 01:33:44,675:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBEB62F850>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 01:33:44,675:INFO:Checking exceptions
2024-11-03 01:33:44,676:INFO:Importing libraries
2024-11-03 01:33:44,676:INFO:Copying training dataset
2024-11-03 01:33:44,681:INFO:Defining folds
2024-11-03 01:33:44,681:INFO:Declaring metric variables
2024-11-03 01:33:44,681:INFO:Importing untrained model
2024-11-03 01:33:44,681:INFO:Declaring custom model
2024-11-03 01:33:44,682:INFO:Naive Bayes Imported successfully
2024-11-03 01:33:44,682:INFO:Starting cross validation
2024-11-03 01:33:44,684:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 01:33:44,956:INFO:Calculating mean and std
2024-11-03 01:33:44,956:INFO:Creating metrics dataframe
2024-11-03 01:33:44,958:INFO:Finalizing model
2024-11-03 01:33:44,970:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 01:33:44,970:INFO:[LightGBM] [Info] Number of positive: 11, number of negative: 10
2024-11-03 01:33:44,970:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 01:33:44,970:INFO:[LightGBM] [Info] Number of data points in the train set: 21, number of used features: 0
2024-11-03 01:33:44,971:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.523810 -> initscore=0.095310
2024-11-03 01:33:44,971:INFO:[LightGBM] [Info] Start training from score 0.095310
2024-11-03 01:33:44,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,978:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,979:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,980:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 01:33:44,985:INFO:Uploading results into container
2024-11-03 01:33:44,986:INFO:Uploading model into container now
2024-11-03 01:33:44,986:INFO:_master_model_container: 16
2024-11-03 01:33:44,986:INFO:_display_container: 4
2024-11-03 01:33:44,986:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 01:33:44,987:INFO:create_model() successfully completed......................................
2024-11-03 01:33:45,033:INFO:SubProcess create_model() end ==================================
2024-11-03 01:33:45,034:INFO:GaussianNB(priors=None, var_smoothing=1e-09) result for AUC is 0.9
2024-11-03 01:33:45,034:INFO:GaussianNB(priors=None, var_smoothing=2e-09) result for AUC is 0.9
2024-11-03 01:33:45,034:INFO:GaussianNB(priors=None, var_smoothing=1e-09) is best model
2024-11-03 01:33:45,034:INFO:choose_better completed
2024-11-03 01:33:45,035:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 01:33:45,045:INFO:_master_model_container: 16
2024-11-03 01:33:45,045:INFO:_display_container: 3
2024-11-03 01:33:45,046:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 01:33:45,046:INFO:tune_model() successfully completed......................................
2024-11-03 04:55:12,499:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 04:55:12,500:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 04:55:12,500:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 04:55:12,500:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 04:55:14,943:INFO:PyCaret ClassificationExperiment
2024-11-03 04:55:14,943:INFO:Logging name: clf-default-name
2024-11-03 04:55:14,943:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 04:55:14,943:INFO:version 3.3.2
2024-11-03 04:55:14,943:INFO:Initializing setup()
2024-11-03 04:55:14,944:INFO:self.USI: 48c2
2024-11-03 04:55:14,944:INFO:self._variable_keys: {'exp_id', '_ml_usecase', 'gpu_n_jobs_param', 'X', 'y', 'log_plots_param', 'fold_generator', 'is_multiclass', 'html_param', 'pipeline', 'memory', 'seed', '_available_plots', 'fold_groups_param', 'idx', 'fix_imbalance', 'X_test', 'logging_param', 'target_param', 'fold_shuffle_param', 'gpu_param', 'USI', 'n_jobs_param', 'y_train', 'y_test', 'X_train', 'exp_name_log', 'data'}
2024-11-03 04:55:14,944:INFO:Checking environment
2024-11-03 04:55:14,944:INFO:python_version: 3.9.5
2024-11-03 04:55:14,944:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 04:55:14,944:INFO:machine: AMD64
2024-11-03 04:55:14,953:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 04:55:14,958:INFO:Memory: svmem(total=17098203136, available=2427232256, percent=85.8, used=14670970880, free=2427232256)
2024-11-03 04:55:14,958:INFO:Physical Core: 4
2024-11-03 04:55:14,958:INFO:Logical Core: 4
2024-11-03 04:55:14,958:INFO:Checking libraries
2024-11-03 04:55:14,958:INFO:System:
2024-11-03 04:55:14,958:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 04:55:14,958:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 04:55:14,958:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 04:55:14,958:INFO:PyCaret required dependencies:
2024-11-03 04:55:15,050:INFO:                 pip: 21.1.3
2024-11-03 04:55:15,050:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 04:55:15,050:INFO:             pycaret: 3.3.2
2024-11-03 04:55:15,050:INFO:             IPython: 8.14.0
2024-11-03 04:55:15,050:INFO:          ipywidgets: 8.1.5
2024-11-03 04:55:15,050:INFO:                tqdm: 4.66.6
2024-11-03 04:55:15,050:INFO:               numpy: 1.26.4
2024-11-03 04:55:15,050:INFO:              pandas: 2.1.4
2024-11-03 04:55:15,050:INFO:              jinja2: 3.1.4
2024-11-03 04:55:15,050:INFO:               scipy: 1.11.4
2024-11-03 04:55:15,050:INFO:              joblib: 1.3.2
2024-11-03 04:55:15,050:INFO:             sklearn: 1.4.2
2024-11-03 04:55:15,050:INFO:                pyod: 2.0.2
2024-11-03 04:55:15,050:INFO:            imblearn: 0.12.4
2024-11-03 04:55:15,050:INFO:   category_encoders: 2.6.4
2024-11-03 04:55:15,051:INFO:            lightgbm: 4.5.0
2024-11-03 04:55:15,051:INFO:               numba: 0.60.0
2024-11-03 04:55:15,051:INFO:            requests: 2.32.3
2024-11-03 04:55:15,051:INFO:          matplotlib: 3.7.5
2024-11-03 04:55:15,051:INFO:          scikitplot: 0.3.7
2024-11-03 04:55:15,051:INFO:         yellowbrick: 1.5
2024-11-03 04:55:15,051:INFO:              plotly: 5.24.1
2024-11-03 04:55:15,051:INFO:    plotly-resampler: Not installed
2024-11-03 04:55:15,051:INFO:             kaleido: 0.2.1
2024-11-03 04:55:15,051:INFO:           schemdraw: 0.15
2024-11-03 04:55:15,051:INFO:         statsmodels: 0.14.4
2024-11-03 04:55:15,051:INFO:              sktime: 0.26.0
2024-11-03 04:55:15,051:INFO:               tbats: 1.1.3
2024-11-03 04:55:15,051:INFO:            pmdarima: 2.0.4
2024-11-03 04:55:15,051:INFO:              psutil: 5.9.5
2024-11-03 04:55:15,051:INFO:          markupsafe: 3.0.2
2024-11-03 04:55:15,051:INFO:             pickle5: Not installed
2024-11-03 04:55:15,051:INFO:         cloudpickle: 3.1.0
2024-11-03 04:55:15,051:INFO:         deprecation: 2.1.0
2024-11-03 04:55:15,051:INFO:              xxhash: 3.5.0
2024-11-03 04:55:15,052:INFO:           wurlitzer: Not installed
2024-11-03 04:55:15,052:INFO:PyCaret optional dependencies:
2024-11-03 04:55:15,074:INFO:                shap: Not installed
2024-11-03 04:55:15,074:INFO:           interpret: Not installed
2024-11-03 04:55:15,074:INFO:                umap: Not installed
2024-11-03 04:55:15,074:INFO:     ydata_profiling: Not installed
2024-11-03 04:55:15,074:INFO:  explainerdashboard: Not installed
2024-11-03 04:55:15,074:INFO:             autoviz: Not installed
2024-11-03 04:55:15,074:INFO:           fairlearn: Not installed
2024-11-03 04:55:15,074:INFO:          deepchecks: Not installed
2024-11-03 04:55:15,074:INFO:             xgboost: Not installed
2024-11-03 04:55:15,074:INFO:            catboost: Not installed
2024-11-03 04:55:15,075:INFO:              kmodes: Not installed
2024-11-03 04:55:15,075:INFO:             mlxtend: Not installed
2024-11-03 04:55:15,075:INFO:       statsforecast: Not installed
2024-11-03 04:55:15,075:INFO:        tune_sklearn: Not installed
2024-11-03 04:55:15,075:INFO:                 ray: Not installed
2024-11-03 04:55:15,075:INFO:            hyperopt: Not installed
2024-11-03 04:55:15,075:INFO:              optuna: Not installed
2024-11-03 04:55:15,075:INFO:               skopt: Not installed
2024-11-03 04:55:15,075:INFO:              mlflow: Not installed
2024-11-03 04:55:15,075:INFO:              gradio: Not installed
2024-11-03 04:55:15,075:INFO:             fastapi: Not installed
2024-11-03 04:55:15,075:INFO:             uvicorn: Not installed
2024-11-03 04:55:15,075:INFO:              m2cgen: Not installed
2024-11-03 04:55:15,075:INFO:           evidently: Not installed
2024-11-03 04:55:15,075:INFO:               fugue: Not installed
2024-11-03 04:55:15,075:INFO:           streamlit: Not installed
2024-11-03 04:55:15,075:INFO:             prophet: Not installed
2024-11-03 04:55:15,075:INFO:None
2024-11-03 04:55:15,075:INFO:Set up data.
2024-11-03 04:55:15,089:INFO:Set up folding strategy.
2024-11-03 04:55:15,089:INFO:Set up train/test split.
2024-11-03 04:55:15,096:INFO:Set up index.
2024-11-03 04:55:15,097:INFO:Assigning column types.
2024-11-03 04:55:15,102:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 04:55:15,153:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 04:55:15,158:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 04:55:15,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,257:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 04:55:15,258:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 04:55:15,293:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,293:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,293:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 04:55:15,344:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 04:55:15,374:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,375:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,426:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 04:55:15,457:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,458:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,458:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 04:55:15,541:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,541:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,626:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,626:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,629:INFO:Preparing preprocessing pipeline...
2024-11-03 04:55:15,631:INFO:Set up simple imputation.
2024-11-03 04:55:15,631:INFO:Set up feature normalization.
2024-11-03 04:55:15,631:INFO:Set up feature selection.
2024-11-03 04:55:15,718:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,718:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:15,953:INFO:Finished creating preprocessing pipeline.
2024-11-03 04:55:15,965:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 04:55:15,965:INFO:Creating final display dataframe.
2024-11-03 04:55:16,116:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (44, 20)
4        Transformed data shape           (44, 4)
5   Transformed train set shape           (30, 4)
6    Transformed test set shape           (14, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                 5
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              48c2
2024-11-03 04:55:16,212:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:16,212:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:16,301:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:16,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 04:55:16,303:INFO:setup() successfully completed in 1.37s...............
2024-11-03 04:55:16,303:INFO:Initializing compare_models()
2024-11-03 04:55:16,303:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, include=None, fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 04:55:16,303:INFO:Checking exceptions
2024-11-03 04:55:16,309:INFO:Preparing display monitor
2024-11-03 04:55:16,314:INFO:Initializing Logistic Regression
2024-11-03 04:55:16,314:INFO:Total runtime is 0.0 minutes
2024-11-03 04:55:16,315:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:16,315:INFO:Initializing create_model()
2024-11-03 04:55:16,315:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:16,315:INFO:Checking exceptions
2024-11-03 04:55:16,315:INFO:Importing libraries
2024-11-03 04:55:16,315:INFO:Copying training dataset
2024-11-03 04:55:16,321:INFO:Defining folds
2024-11-03 04:55:16,321:INFO:Declaring metric variables
2024-11-03 04:55:16,321:INFO:Importing untrained model
2024-11-03 04:55:16,322:INFO:Logistic Regression Imported successfully
2024-11-03 04:55:16,322:INFO:Starting cross validation
2024-11-03 04:55:16,324:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:20,564:INFO:Calculating mean and std
2024-11-03 04:55:20,565:INFO:Creating metrics dataframe
2024-11-03 04:55:20,568:INFO:Uploading results into container
2024-11-03 04:55:20,568:INFO:Uploading model into container now
2024-11-03 04:55:20,569:INFO:_master_model_container: 1
2024-11-03 04:55:20,569:INFO:_display_container: 2
2024-11-03 04:55:20,569:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 04:55:20,569:INFO:create_model() successfully completed......................................
2024-11-03 04:55:20,630:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:20,630:INFO:Creating metrics dataframe
2024-11-03 04:55:20,635:INFO:Initializing K Neighbors Classifier
2024-11-03 04:55:20,635:INFO:Total runtime is 0.07201559940973917 minutes
2024-11-03 04:55:20,635:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:20,636:INFO:Initializing create_model()
2024-11-03 04:55:20,636:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:20,636:INFO:Checking exceptions
2024-11-03 04:55:20,636:INFO:Importing libraries
2024-11-03 04:55:20,636:INFO:Copying training dataset
2024-11-03 04:55:20,643:INFO:Defining folds
2024-11-03 04:55:20,643:INFO:Declaring metric variables
2024-11-03 04:55:20,643:INFO:Importing untrained model
2024-11-03 04:55:20,644:INFO:K Neighbors Classifier Imported successfully
2024-11-03 04:55:20,644:INFO:Starting cross validation
2024-11-03 04:55:20,646:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:21,016:INFO:Calculating mean and std
2024-11-03 04:55:21,017:INFO:Creating metrics dataframe
2024-11-03 04:55:21,019:INFO:Uploading results into container
2024-11-03 04:55:21,019:INFO:Uploading model into container now
2024-11-03 04:55:21,020:INFO:_master_model_container: 2
2024-11-03 04:55:21,020:INFO:_display_container: 2
2024-11-03 04:55:21,020:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 04:55:21,020:INFO:create_model() successfully completed......................................
2024-11-03 04:55:21,077:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:21,077:INFO:Creating metrics dataframe
2024-11-03 04:55:21,081:INFO:Initializing Naive Bayes
2024-11-03 04:55:21,081:INFO:Total runtime is 0.07945003906885782 minutes
2024-11-03 04:55:21,081:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:21,082:INFO:Initializing create_model()
2024-11-03 04:55:21,082:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:21,082:INFO:Checking exceptions
2024-11-03 04:55:21,082:INFO:Importing libraries
2024-11-03 04:55:21,082:INFO:Copying training dataset
2024-11-03 04:55:21,089:INFO:Defining folds
2024-11-03 04:55:21,089:INFO:Declaring metric variables
2024-11-03 04:55:21,090:INFO:Importing untrained model
2024-11-03 04:55:21,090:INFO:Naive Bayes Imported successfully
2024-11-03 04:55:21,090:INFO:Starting cross validation
2024-11-03 04:55:21,092:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:21,376:INFO:Calculating mean and std
2024-11-03 04:55:21,377:INFO:Creating metrics dataframe
2024-11-03 04:55:21,379:INFO:Uploading results into container
2024-11-03 04:55:21,379:INFO:Uploading model into container now
2024-11-03 04:55:21,379:INFO:_master_model_container: 3
2024-11-03 04:55:21,379:INFO:_display_container: 2
2024-11-03 04:55:21,380:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 04:55:21,380:INFO:create_model() successfully completed......................................
2024-11-03 04:55:21,434:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:21,435:INFO:Creating metrics dataframe
2024-11-03 04:55:21,438:INFO:Initializing Decision Tree Classifier
2024-11-03 04:55:21,438:INFO:Total runtime is 0.08540518681208292 minutes
2024-11-03 04:55:21,439:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:21,439:INFO:Initializing create_model()
2024-11-03 04:55:21,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:21,439:INFO:Checking exceptions
2024-11-03 04:55:21,439:INFO:Importing libraries
2024-11-03 04:55:21,439:INFO:Copying training dataset
2024-11-03 04:55:21,445:INFO:Defining folds
2024-11-03 04:55:21,446:INFO:Declaring metric variables
2024-11-03 04:55:21,446:INFO:Importing untrained model
2024-11-03 04:55:21,446:INFO:Decision Tree Classifier Imported successfully
2024-11-03 04:55:21,447:INFO:Starting cross validation
2024-11-03 04:55:21,449:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:21,718:INFO:Calculating mean and std
2024-11-03 04:55:21,719:INFO:Creating metrics dataframe
2024-11-03 04:55:21,721:INFO:Uploading results into container
2024-11-03 04:55:21,721:INFO:Uploading model into container now
2024-11-03 04:55:21,722:INFO:_master_model_container: 4
2024-11-03 04:55:21,722:INFO:_display_container: 2
2024-11-03 04:55:21,722:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 04:55:21,722:INFO:create_model() successfully completed......................................
2024-11-03 04:55:21,777:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:21,777:INFO:Creating metrics dataframe
2024-11-03 04:55:21,782:INFO:Initializing SVM - Linear Kernel
2024-11-03 04:55:21,782:INFO:Total runtime is 0.09112752278645833 minutes
2024-11-03 04:55:21,782:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:21,782:INFO:Initializing create_model()
2024-11-03 04:55:21,783:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:21,783:INFO:Checking exceptions
2024-11-03 04:55:21,783:INFO:Importing libraries
2024-11-03 04:55:21,783:INFO:Copying training dataset
2024-11-03 04:55:21,788:INFO:Defining folds
2024-11-03 04:55:21,788:INFO:Declaring metric variables
2024-11-03 04:55:21,788:INFO:Importing untrained model
2024-11-03 04:55:21,789:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 04:55:21,789:INFO:Starting cross validation
2024-11-03 04:55:21,791:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:21,973:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:22,059:INFO:Calculating mean and std
2024-11-03 04:55:22,060:INFO:Creating metrics dataframe
2024-11-03 04:55:22,062:INFO:Uploading results into container
2024-11-03 04:55:22,062:INFO:Uploading model into container now
2024-11-03 04:55:22,063:INFO:_master_model_container: 5
2024-11-03 04:55:22,063:INFO:_display_container: 2
2024-11-03 04:55:22,063:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 04:55:22,063:INFO:create_model() successfully completed......................................
2024-11-03 04:55:22,121:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:22,121:INFO:Creating metrics dataframe
2024-11-03 04:55:22,124:INFO:Initializing Ridge Classifier
2024-11-03 04:55:22,124:INFO:Total runtime is 0.0968304713567098 minutes
2024-11-03 04:55:22,125:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:22,125:INFO:Initializing create_model()
2024-11-03 04:55:22,125:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:22,125:INFO:Checking exceptions
2024-11-03 04:55:22,125:INFO:Importing libraries
2024-11-03 04:55:22,125:INFO:Copying training dataset
2024-11-03 04:55:22,131:INFO:Defining folds
2024-11-03 04:55:22,131:INFO:Declaring metric variables
2024-11-03 04:55:22,132:INFO:Importing untrained model
2024-11-03 04:55:22,132:INFO:Ridge Classifier Imported successfully
2024-11-03 04:55:22,132:INFO:Starting cross validation
2024-11-03 04:55:22,134:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:22,407:INFO:Calculating mean and std
2024-11-03 04:55:22,408:INFO:Creating metrics dataframe
2024-11-03 04:55:22,410:INFO:Uploading results into container
2024-11-03 04:55:22,410:INFO:Uploading model into container now
2024-11-03 04:55:22,411:INFO:_master_model_container: 6
2024-11-03 04:55:22,411:INFO:_display_container: 2
2024-11-03 04:55:22,411:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 04:55:22,411:INFO:create_model() successfully completed......................................
2024-11-03 04:55:22,463:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:22,463:INFO:Creating metrics dataframe
2024-11-03 04:55:22,466:INFO:Initializing Random Forest Classifier
2024-11-03 04:55:22,466:INFO:Total runtime is 0.10254158178965252 minutes
2024-11-03 04:55:22,466:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:22,466:INFO:Initializing create_model()
2024-11-03 04:55:22,466:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:22,466:INFO:Checking exceptions
2024-11-03 04:55:22,466:INFO:Importing libraries
2024-11-03 04:55:22,466:INFO:Copying training dataset
2024-11-03 04:55:22,472:INFO:Defining folds
2024-11-03 04:55:22,472:INFO:Declaring metric variables
2024-11-03 04:55:22,472:INFO:Importing untrained model
2024-11-03 04:55:22,472:INFO:Random Forest Classifier Imported successfully
2024-11-03 04:55:22,473:INFO:Starting cross validation
2024-11-03 04:55:22,474:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:23,265:INFO:Calculating mean and std
2024-11-03 04:55:23,266:INFO:Creating metrics dataframe
2024-11-03 04:55:23,268:INFO:Uploading results into container
2024-11-03 04:55:23,268:INFO:Uploading model into container now
2024-11-03 04:55:23,269:INFO:_master_model_container: 7
2024-11-03 04:55:23,269:INFO:_display_container: 2
2024-11-03 04:55:23,269:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 04:55:23,270:INFO:create_model() successfully completed......................................
2024-11-03 04:55:23,329:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:23,329:INFO:Creating metrics dataframe
2024-11-03 04:55:23,332:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 04:55:23,332:INFO:Total runtime is 0.11697032848993938 minutes
2024-11-03 04:55:23,333:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:23,333:INFO:Initializing create_model()
2024-11-03 04:55:23,333:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:23,333:INFO:Checking exceptions
2024-11-03 04:55:23,333:INFO:Importing libraries
2024-11-03 04:55:23,333:INFO:Copying training dataset
2024-11-03 04:55:23,339:INFO:Defining folds
2024-11-03 04:55:23,339:INFO:Declaring metric variables
2024-11-03 04:55:23,339:INFO:Importing untrained model
2024-11-03 04:55:23,339:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 04:55:23,340:INFO:Starting cross validation
2024-11-03 04:55:23,342:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:23,609:INFO:Calculating mean and std
2024-11-03 04:55:23,610:INFO:Creating metrics dataframe
2024-11-03 04:55:23,612:INFO:Uploading results into container
2024-11-03 04:55:23,612:INFO:Uploading model into container now
2024-11-03 04:55:23,613:INFO:_master_model_container: 8
2024-11-03 04:55:23,613:INFO:_display_container: 2
2024-11-03 04:55:23,613:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 04:55:23,613:INFO:create_model() successfully completed......................................
2024-11-03 04:55:23,682:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:23,682:INFO:Creating metrics dataframe
2024-11-03 04:55:23,686:INFO:Initializing Ada Boost Classifier
2024-11-03 04:55:23,686:INFO:Total runtime is 0.12286192576090496 minutes
2024-11-03 04:55:23,686:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:23,687:INFO:Initializing create_model()
2024-11-03 04:55:23,687:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:23,687:INFO:Checking exceptions
2024-11-03 04:55:23,687:INFO:Importing libraries
2024-11-03 04:55:23,687:INFO:Copying training dataset
2024-11-03 04:55:23,694:INFO:Defining folds
2024-11-03 04:55:23,694:INFO:Declaring metric variables
2024-11-03 04:55:23,694:INFO:Importing untrained model
2024-11-03 04:55:23,694:INFO:Ada Boost Classifier Imported successfully
2024-11-03 04:55:23,695:INFO:Starting cross validation
2024-11-03 04:55:23,697:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:23,851:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 04:55:23,854:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 04:55:23,858:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 04:55:23,869:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 04:55:24,031:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 04:55:24,157:INFO:Calculating mean and std
2024-11-03 04:55:24,158:INFO:Creating metrics dataframe
2024-11-03 04:55:24,160:INFO:Uploading results into container
2024-11-03 04:55:24,160:INFO:Uploading model into container now
2024-11-03 04:55:24,161:INFO:_master_model_container: 9
2024-11-03 04:55:24,161:INFO:_display_container: 2
2024-11-03 04:55:24,161:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 04:55:24,161:INFO:create_model() successfully completed......................................
2024-11-03 04:55:24,219:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:24,219:INFO:Creating metrics dataframe
2024-11-03 04:55:24,223:INFO:Initializing Gradient Boosting Classifier
2024-11-03 04:55:24,223:INFO:Total runtime is 0.13181565602620443 minutes
2024-11-03 04:55:24,223:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:24,223:INFO:Initializing create_model()
2024-11-03 04:55:24,223:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:24,223:INFO:Checking exceptions
2024-11-03 04:55:24,223:INFO:Importing libraries
2024-11-03 04:55:24,223:INFO:Copying training dataset
2024-11-03 04:55:24,229:INFO:Defining folds
2024-11-03 04:55:24,229:INFO:Declaring metric variables
2024-11-03 04:55:24,229:INFO:Importing untrained model
2024-11-03 04:55:24,230:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 04:55:24,230:INFO:Starting cross validation
2024-11-03 04:55:24,232:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:24,705:INFO:Calculating mean and std
2024-11-03 04:55:24,706:INFO:Creating metrics dataframe
2024-11-03 04:55:24,708:INFO:Uploading results into container
2024-11-03 04:55:24,708:INFO:Uploading model into container now
2024-11-03 04:55:24,709:INFO:_master_model_container: 10
2024-11-03 04:55:24,709:INFO:_display_container: 2
2024-11-03 04:55:24,709:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 04:55:24,709:INFO:create_model() successfully completed......................................
2024-11-03 04:55:24,769:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:24,769:INFO:Creating metrics dataframe
2024-11-03 04:55:24,773:INFO:Initializing Linear Discriminant Analysis
2024-11-03 04:55:24,773:INFO:Total runtime is 0.1409794251124064 minutes
2024-11-03 04:55:24,773:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:24,774:INFO:Initializing create_model()
2024-11-03 04:55:24,774:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:24,774:INFO:Checking exceptions
2024-11-03 04:55:24,774:INFO:Importing libraries
2024-11-03 04:55:24,774:INFO:Copying training dataset
2024-11-03 04:55:24,780:INFO:Defining folds
2024-11-03 04:55:24,780:INFO:Declaring metric variables
2024-11-03 04:55:24,781:INFO:Importing untrained model
2024-11-03 04:55:24,781:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 04:55:24,781:INFO:Starting cross validation
2024-11-03 04:55:24,784:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:25,064:INFO:Calculating mean and std
2024-11-03 04:55:25,065:INFO:Creating metrics dataframe
2024-11-03 04:55:25,067:INFO:Uploading results into container
2024-11-03 04:55:25,067:INFO:Uploading model into container now
2024-11-03 04:55:25,068:INFO:_master_model_container: 11
2024-11-03 04:55:25,068:INFO:_display_container: 2
2024-11-03 04:55:25,068:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 04:55:25,068:INFO:create_model() successfully completed......................................
2024-11-03 04:55:25,125:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:25,125:INFO:Creating metrics dataframe
2024-11-03 04:55:25,128:INFO:Initializing Extra Trees Classifier
2024-11-03 04:55:25,129:INFO:Total runtime is 0.14692693948745728 minutes
2024-11-03 04:55:25,129:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:25,129:INFO:Initializing create_model()
2024-11-03 04:55:25,129:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:25,129:INFO:Checking exceptions
2024-11-03 04:55:25,129:INFO:Importing libraries
2024-11-03 04:55:25,129:INFO:Copying training dataset
2024-11-03 04:55:25,135:INFO:Defining folds
2024-11-03 04:55:25,135:INFO:Declaring metric variables
2024-11-03 04:55:25,135:INFO:Importing untrained model
2024-11-03 04:55:25,136:INFO:Extra Trees Classifier Imported successfully
2024-11-03 04:55:25,136:INFO:Starting cross validation
2024-11-03 04:55:25,138:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:25,750:INFO:Calculating mean and std
2024-11-03 04:55:25,751:INFO:Creating metrics dataframe
2024-11-03 04:55:25,754:INFO:Uploading results into container
2024-11-03 04:55:25,754:INFO:Uploading model into container now
2024-11-03 04:55:25,755:INFO:_master_model_container: 12
2024-11-03 04:55:25,755:INFO:_display_container: 2
2024-11-03 04:55:25,756:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 04:55:25,756:INFO:create_model() successfully completed......................................
2024-11-03 04:55:25,819:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:25,820:INFO:Creating metrics dataframe
2024-11-03 04:55:25,823:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 04:55:25,823:INFO:Total runtime is 0.15847763220469158 minutes
2024-11-03 04:55:25,823:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:25,823:INFO:Initializing create_model()
2024-11-03 04:55:25,823:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:25,823:INFO:Checking exceptions
2024-11-03 04:55:25,823:INFO:Importing libraries
2024-11-03 04:55:25,823:INFO:Copying training dataset
2024-11-03 04:55:25,829:INFO:Defining folds
2024-11-03 04:55:25,829:INFO:Declaring metric variables
2024-11-03 04:55:25,829:INFO:Importing untrained model
2024-11-03 04:55:25,830:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 04:55:25,830:INFO:Starting cross validation
2024-11-03 04:55:25,832:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:26,132:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,132:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,139:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,140:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,253:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,264:INFO:Calculating mean and std
2024-11-03 04:55:26,265:INFO:Creating metrics dataframe
2024-11-03 04:55:26,267:INFO:Uploading results into container
2024-11-03 04:55:26,268:INFO:Uploading model into container now
2024-11-03 04:55:26,268:INFO:_master_model_container: 13
2024-11-03 04:55:26,268:INFO:_display_container: 2
2024-11-03 04:55:26,269:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 04:55:26,269:INFO:create_model() successfully completed......................................
2024-11-03 04:55:26,323:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:26,323:INFO:Creating metrics dataframe
2024-11-03 04:55:26,326:INFO:Initializing Dummy Classifier
2024-11-03 04:55:26,326:INFO:Total runtime is 0.1668656587600708 minutes
2024-11-03 04:55:26,327:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:26,327:INFO:Initializing create_model()
2024-11-03 04:55:26,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909F9EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:26,327:INFO:Checking exceptions
2024-11-03 04:55:26,327:INFO:Importing libraries
2024-11-03 04:55:26,327:INFO:Copying training dataset
2024-11-03 04:55:26,333:INFO:Defining folds
2024-11-03 04:55:26,333:INFO:Declaring metric variables
2024-11-03 04:55:26,333:INFO:Importing untrained model
2024-11-03 04:55:26,333:INFO:Dummy Classifier Imported successfully
2024-11-03 04:55:26,334:INFO:Starting cross validation
2024-11-03 04:55:26,335:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:26,633:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,635:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,637:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,642:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,708:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 04:55:26,718:INFO:Calculating mean and std
2024-11-03 04:55:26,719:INFO:Creating metrics dataframe
2024-11-03 04:55:26,721:INFO:Uploading results into container
2024-11-03 04:55:26,722:INFO:Uploading model into container now
2024-11-03 04:55:26,723:INFO:_master_model_container: 14
2024-11-03 04:55:26,723:INFO:_display_container: 2
2024-11-03 04:55:26,723:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 04:55:26,723:INFO:create_model() successfully completed......................................
2024-11-03 04:55:26,779:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:26,779:INFO:Creating metrics dataframe
2024-11-03 04:55:26,784:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-03 04:55:26,786:INFO:Initializing create_model()
2024-11-03 04:55:26,786:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:26,786:INFO:Checking exceptions
2024-11-03 04:55:26,787:INFO:Importing libraries
2024-11-03 04:55:26,787:INFO:Copying training dataset
2024-11-03 04:55:26,793:INFO:Defining folds
2024-11-03 04:55:26,793:INFO:Declaring metric variables
2024-11-03 04:55:26,793:INFO:Importing untrained model
2024-11-03 04:55:26,793:INFO:Declaring custom model
2024-11-03 04:55:26,793:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 04:55:26,795:INFO:Cross validation set to False
2024-11-03 04:55:26,795:INFO:Fitting Model
2024-11-03 04:55:26,809:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 04:55:26,810:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 04:55:26,810:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 04:55:26,810:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 04:55:26,810:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 04:55:26,810:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,810:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,810:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,810:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,810:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,811:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,812:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,813:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,814:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,815:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,816:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,817:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,818:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,819:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,819:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:26,824:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 04:55:26,824:INFO:create_model() successfully completed......................................
2024-11-03 04:55:26,894:INFO:_master_model_container: 14
2024-11-03 04:55:26,894:INFO:_display_container: 2
2024-11-03 04:55:26,894:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 04:55:26,894:INFO:compare_models() successfully completed......................................
2024-11-03 04:55:26,895:INFO:Initializing tune_model()
2024-11-03 04:55:26,895:INFO:tune_model(estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>)
2024-11-03 04:55:26,895:INFO:Checking exceptions
2024-11-03 04:55:26,898:INFO:Copying training dataset
2024-11-03 04:55:26,903:INFO:Checking base model
2024-11-03 04:55:26,903:INFO:Base model : Quadratic Discriminant Analysis
2024-11-03 04:55:26,904:INFO:Declaring metric variables
2024-11-03 04:55:26,904:INFO:Defining Hyperparameters
2024-11-03 04:55:26,962:INFO:Tuning with n_jobs=-1
2024-11-03 04:55:26,962:INFO:Initializing RandomizedSearchCV
2024-11-03 04:55:29,250:INFO:best_params: {'actual_estimator__reg_param': 0.47}
2024-11-03 04:55:29,251:INFO:Hyperparameter search completed
2024-11-03 04:55:29,251:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:29,252:INFO:Initializing create_model()
2024-11-03 04:55:29,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151909591F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_param': 0.47})
2024-11-03 04:55:29,252:INFO:Checking exceptions
2024-11-03 04:55:29,252:INFO:Importing libraries
2024-11-03 04:55:29,252:INFO:Copying training dataset
2024-11-03 04:55:29,258:INFO:Defining folds
2024-11-03 04:55:29,258:INFO:Declaring metric variables
2024-11-03 04:55:29,258:INFO:Importing untrained model
2024-11-03 04:55:29,258:INFO:Declaring custom model
2024-11-03 04:55:29,259:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 04:55:29,259:INFO:Starting cross validation
2024-11-03 04:55:29,261:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:29,532:INFO:Calculating mean and std
2024-11-03 04:55:29,533:INFO:Creating metrics dataframe
2024-11-03 04:55:29,535:INFO:Finalizing model
2024-11-03 04:55:29,549:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 04:55:29,550:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 04:55:29,550:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 04:55:29,550:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 04:55:29,550:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 04:55:29,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,577:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,578:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,582:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,584:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,584:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,589:INFO:Uploading results into container
2024-11-03 04:55:29,589:INFO:Uploading model into container now
2024-11-03 04:55:29,590:INFO:_master_model_container: 15
2024-11-03 04:55:29,590:INFO:_display_container: 3
2024-11-03 04:55:29,590:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001)
2024-11-03 04:55:29,590:INFO:create_model() successfully completed......................................
2024-11-03 04:55:29,644:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:29,644:INFO:choose_better activated
2024-11-03 04:55:29,644:INFO:SubProcess create_model() called ==================================
2024-11-03 04:55:29,644:INFO:Initializing create_model()
2024-11-03 04:55:29,645:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000151F94DFA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 04:55:29,645:INFO:Checking exceptions
2024-11-03 04:55:29,645:INFO:Importing libraries
2024-11-03 04:55:29,646:INFO:Copying training dataset
2024-11-03 04:55:29,651:INFO:Defining folds
2024-11-03 04:55:29,651:INFO:Declaring metric variables
2024-11-03 04:55:29,651:INFO:Importing untrained model
2024-11-03 04:55:29,651:INFO:Declaring custom model
2024-11-03 04:55:29,652:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 04:55:29,652:INFO:Starting cross validation
2024-11-03 04:55:29,654:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 04:55:29,951:INFO:Calculating mean and std
2024-11-03 04:55:29,951:INFO:Creating metrics dataframe
2024-11-03 04:55:29,953:INFO:Finalizing model
2024-11-03 04:55:29,965:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 04:55:29,966:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 04:55:29,966:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 04:55:29,966:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 04:55:29,966:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 04:55:29,966:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,966:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,966:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,967:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,967:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,967:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,967:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,967:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,968:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,968:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,968:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,968:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,968:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,969:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,970:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,971:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,972:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,973:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,974:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,975:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,976:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,977:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 04:55:29,981:INFO:Uploading results into container
2024-11-03 04:55:29,982:INFO:Uploading model into container now
2024-11-03 04:55:29,982:INFO:_master_model_container: 16
2024-11-03 04:55:29,982:INFO:_display_container: 4
2024-11-03 04:55:29,983:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 04:55:29,983:INFO:create_model() successfully completed......................................
2024-11-03 04:55:30,030:INFO:SubProcess create_model() end ==================================
2024-11-03 04:55:30,030:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 04:55:30,031:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 04:55:30,031:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) is best model
2024-11-03 04:55:30,031:INFO:choose_better completed
2024-11-03 04:55:30,031:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 04:55:30,041:INFO:_master_model_container: 16
2024-11-03 04:55:30,041:INFO:_display_container: 3
2024-11-03 04:55:30,041:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 04:55:30,041:INFO:tune_model() successfully completed......................................
2024-11-03 05:00:36,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:00:36,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:00:36,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:00:36,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:00:38,199:INFO:Initializing load_model()
2024-11-03 05:00:38,200:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 05:00:38,444:INFO:Initializing predict_model()
2024-11-03 05:00:38,444:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBD3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:38,444:INFO:Checking exceptions
2024-11-03 05:00:38,445:INFO:Preloading libraries
2024-11-03 05:00:38,445:INFO:Set up data.
2024-11-03 05:00:38,451:INFO:Set up index.
2024-11-03 05:00:38,599:INFO:Initializing predict_model()
2024-11-03 05:00:38,599:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3BE50>)
2024-11-03 05:00:38,599:INFO:Checking exceptions
2024-11-03 05:00:38,599:INFO:Preloading libraries
2024-11-03 05:00:38,599:INFO:Set up data.
2024-11-03 05:00:38,603:INFO:Set up index.
2024-11-03 05:00:38,781:INFO:Initializing predict_model()
2024-11-03 05:00:38,782:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613AF32EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:38,782:INFO:Checking exceptions
2024-11-03 05:00:38,782:INFO:Preloading libraries
2024-11-03 05:00:38,782:INFO:Set up data.
2024-11-03 05:00:38,786:INFO:Set up index.
2024-11-03 05:00:38,937:INFO:Initializing predict_model()
2024-11-03 05:00:38,937:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:38,937:INFO:Checking exceptions
2024-11-03 05:00:38,937:INFO:Preloading libraries
2024-11-03 05:00:38,938:INFO:Set up data.
2024-11-03 05:00:38,942:INFO:Set up index.
2024-11-03 05:00:39,088:INFO:Initializing predict_model()
2024-11-03 05:00:39,088:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:39,089:INFO:Checking exceptions
2024-11-03 05:00:39,089:INFO:Preloading libraries
2024-11-03 05:00:39,090:INFO:Set up data.
2024-11-03 05:00:39,094:INFO:Set up index.
2024-11-03 05:00:39,253:INFO:Initializing predict_model()
2024-11-03 05:00:39,253:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:39,253:INFO:Checking exceptions
2024-11-03 05:00:39,253:INFO:Preloading libraries
2024-11-03 05:00:39,253:INFO:Set up data.
2024-11-03 05:00:39,258:INFO:Set up index.
2024-11-03 05:00:39,401:INFO:Initializing predict_model()
2024-11-03 05:00:39,401:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:39,401:INFO:Checking exceptions
2024-11-03 05:00:39,402:INFO:Preloading libraries
2024-11-03 05:00:39,402:INFO:Set up data.
2024-11-03 05:00:39,406:INFO:Set up index.
2024-11-03 05:00:39,541:INFO:Initializing predict_model()
2024-11-03 05:00:39,541:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:39,541:INFO:Checking exceptions
2024-11-03 05:00:39,541:INFO:Preloading libraries
2024-11-03 05:00:39,541:INFO:Set up data.
2024-11-03 05:00:39,547:INFO:Set up index.
2024-11-03 05:00:39,741:INFO:Initializing predict_model()
2024-11-03 05:00:39,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3BE50>)
2024-11-03 05:00:39,741:INFO:Checking exceptions
2024-11-03 05:00:39,741:INFO:Preloading libraries
2024-11-03 05:00:39,741:INFO:Set up data.
2024-11-03 05:00:39,747:INFO:Set up index.
2024-11-03 05:00:39,934:INFO:Initializing predict_model()
2024-11-03 05:00:39,935:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:39,935:INFO:Checking exceptions
2024-11-03 05:00:39,935:INFO:Preloading libraries
2024-11-03 05:00:39,935:INFO:Set up data.
2024-11-03 05:00:39,942:INFO:Set up index.
2024-11-03 05:00:40,078:INFO:Initializing predict_model()
2024-11-03 05:00:40,078:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:40,079:INFO:Checking exceptions
2024-11-03 05:00:40,079:INFO:Preloading libraries
2024-11-03 05:00:40,079:INFO:Set up data.
2024-11-03 05:00:40,084:INFO:Set up index.
2024-11-03 05:00:40,224:INFO:Initializing predict_model()
2024-11-03 05:00:40,224:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:40,224:INFO:Checking exceptions
2024-11-03 05:00:40,224:INFO:Preloading libraries
2024-11-03 05:00:40,224:INFO:Set up data.
2024-11-03 05:00:40,229:INFO:Set up index.
2024-11-03 05:00:40,378:INFO:Initializing predict_model()
2024-11-03 05:00:40,378:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:40,378:INFO:Checking exceptions
2024-11-03 05:00:40,378:INFO:Preloading libraries
2024-11-03 05:00:40,378:INFO:Set up data.
2024-11-03 05:00:40,383:INFO:Set up index.
2024-11-03 05:00:40,533:INFO:Initializing predict_model()
2024-11-03 05:00:40,533:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:40,533:INFO:Checking exceptions
2024-11-03 05:00:40,533:INFO:Preloading libraries
2024-11-03 05:00:40,534:INFO:Set up data.
2024-11-03 05:00:40,538:INFO:Set up index.
2024-11-03 05:00:40,675:INFO:Initializing predict_model()
2024-11-03 05:00:40,675:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:40,675:INFO:Checking exceptions
2024-11-03 05:00:40,675:INFO:Preloading libraries
2024-11-03 05:00:40,675:INFO:Set up data.
2024-11-03 05:00:40,680:INFO:Set up index.
2024-11-03 05:00:40,815:INFO:Initializing predict_model()
2024-11-03 05:00:40,815:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBD760>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:40,816:INFO:Checking exceptions
2024-11-03 05:00:40,816:INFO:Preloading libraries
2024-11-03 05:00:40,816:INFO:Set up data.
2024-11-03 05:00:40,821:INFO:Set up index.
2024-11-03 05:00:40,951:INFO:Initializing predict_model()
2024-11-03 05:00:40,951:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3BE50>)
2024-11-03 05:00:40,952:INFO:Checking exceptions
2024-11-03 05:00:40,952:INFO:Preloading libraries
2024-11-03 05:00:40,952:INFO:Set up data.
2024-11-03 05:00:40,956:INFO:Set up index.
2024-11-03 05:00:41,095:INFO:Initializing predict_model()
2024-11-03 05:00:41,095:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:41,095:INFO:Checking exceptions
2024-11-03 05:00:41,095:INFO:Preloading libraries
2024-11-03 05:00:41,095:INFO:Set up data.
2024-11-03 05:00:41,099:INFO:Set up index.
2024-11-03 05:00:41,237:INFO:Initializing predict_model()
2024-11-03 05:00:41,237:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:41,237:INFO:Checking exceptions
2024-11-03 05:00:41,237:INFO:Preloading libraries
2024-11-03 05:00:41,238:INFO:Set up data.
2024-11-03 05:00:41,241:INFO:Set up index.
2024-11-03 05:00:41,379:INFO:Initializing predict_model()
2024-11-03 05:00:41,379:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:41,379:INFO:Checking exceptions
2024-11-03 05:00:41,379:INFO:Preloading libraries
2024-11-03 05:00:41,379:INFO:Set up data.
2024-11-03 05:00:41,383:INFO:Set up index.
2024-11-03 05:00:41,512:INFO:Initializing predict_model()
2024-11-03 05:00:41,512:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B040>)
2024-11-03 05:00:41,513:INFO:Checking exceptions
2024-11-03 05:00:41,513:INFO:Preloading libraries
2024-11-03 05:00:41,513:INFO:Set up data.
2024-11-03 05:00:41,518:INFO:Set up index.
2024-11-03 05:00:41,650:INFO:Initializing predict_model()
2024-11-03 05:00:41,651:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B1F0>)
2024-11-03 05:00:41,651:INFO:Checking exceptions
2024-11-03 05:00:41,652:INFO:Preloading libraries
2024-11-03 05:00:41,652:INFO:Set up data.
2024-11-03 05:00:41,657:INFO:Set up index.
2024-11-03 05:00:41,896:INFO:Initializing predict_model()
2024-11-03 05:00:41,897:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:41,897:INFO:Checking exceptions
2024-11-03 05:00:41,898:INFO:Preloading libraries
2024-11-03 05:00:41,898:INFO:Set up data.
2024-11-03 05:00:41,902:INFO:Set up index.
2024-11-03 05:00:42,042:INFO:Initializing predict_model()
2024-11-03 05:00:42,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:42,042:INFO:Checking exceptions
2024-11-03 05:00:42,042:INFO:Preloading libraries
2024-11-03 05:00:42,042:INFO:Set up data.
2024-11-03 05:00:42,047:INFO:Set up index.
2024-11-03 05:00:42,187:INFO:Initializing predict_model()
2024-11-03 05:00:42,187:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:42,187:INFO:Checking exceptions
2024-11-03 05:00:42,187:INFO:Preloading libraries
2024-11-03 05:00:42,187:INFO:Set up data.
2024-11-03 05:00:42,191:INFO:Set up index.
2024-11-03 05:00:42,319:INFO:Initializing predict_model()
2024-11-03 05:00:42,319:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:42,320:INFO:Checking exceptions
2024-11-03 05:00:42,320:INFO:Preloading libraries
2024-11-03 05:00:42,320:INFO:Set up data.
2024-11-03 05:00:42,325:INFO:Set up index.
2024-11-03 05:00:42,448:INFO:Initializing predict_model()
2024-11-03 05:00:42,448:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:42,448:INFO:Checking exceptions
2024-11-03 05:00:42,448:INFO:Preloading libraries
2024-11-03 05:00:42,448:INFO:Set up data.
2024-11-03 05:00:42,452:INFO:Set up index.
2024-11-03 05:00:42,573:INFO:Initializing predict_model()
2024-11-03 05:00:42,573:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:42,573:INFO:Checking exceptions
2024-11-03 05:00:42,573:INFO:Preloading libraries
2024-11-03 05:00:42,574:INFO:Set up data.
2024-11-03 05:00:42,577:INFO:Set up index.
2024-11-03 05:00:42,911:INFO:Initializing predict_model()
2024-11-03 05:00:42,912:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69F70>)
2024-11-03 05:00:42,912:INFO:Checking exceptions
2024-11-03 05:00:42,912:INFO:Preloading libraries
2024-11-03 05:00:42,912:INFO:Set up data.
2024-11-03 05:00:42,922:INFO:Set up index.
2024-11-03 05:00:43,087:INFO:Initializing predict_model()
2024-11-03 05:00:43,089:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69670>)
2024-11-03 05:00:43,090:INFO:Checking exceptions
2024-11-03 05:00:43,090:INFO:Preloading libraries
2024-11-03 05:00:43,090:INFO:Set up data.
2024-11-03 05:00:43,097:INFO:Set up index.
2024-11-03 05:00:43,232:INFO:Initializing predict_model()
2024-11-03 05:00:43,232:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69280>)
2024-11-03 05:00:43,232:INFO:Checking exceptions
2024-11-03 05:00:43,232:INFO:Preloading libraries
2024-11-03 05:00:43,232:INFO:Set up data.
2024-11-03 05:00:43,235:INFO:Set up index.
2024-11-03 05:00:43,375:INFO:Initializing predict_model()
2024-11-03 05:00:43,375:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:43,375:INFO:Checking exceptions
2024-11-03 05:00:43,375:INFO:Preloading libraries
2024-11-03 05:00:43,376:INFO:Set up data.
2024-11-03 05:00:43,385:INFO:Set up index.
2024-11-03 05:00:43,526:INFO:Initializing predict_model()
2024-11-03 05:00:43,526:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69280>)
2024-11-03 05:00:43,527:INFO:Checking exceptions
2024-11-03 05:00:43,527:INFO:Preloading libraries
2024-11-03 05:00:43,527:INFO:Set up data.
2024-11-03 05:00:43,530:INFO:Set up index.
2024-11-03 05:00:43,658:INFO:Initializing predict_model()
2024-11-03 05:00:43,658:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBDA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F698B0>)
2024-11-03 05:00:43,658:INFO:Checking exceptions
2024-11-03 05:00:43,658:INFO:Preloading libraries
2024-11-03 05:00:43,659:INFO:Set up data.
2024-11-03 05:00:43,664:INFO:Set up index.
2024-11-03 05:00:43,801:INFO:Initializing predict_model()
2024-11-03 05:00:43,801:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:43,801:INFO:Checking exceptions
2024-11-03 05:00:43,801:INFO:Preloading libraries
2024-11-03 05:00:43,802:INFO:Set up data.
2024-11-03 05:00:43,806:INFO:Set up index.
2024-11-03 05:00:43,943:INFO:Initializing predict_model()
2024-11-03 05:00:43,943:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4F70>)
2024-11-03 05:00:43,943:INFO:Checking exceptions
2024-11-03 05:00:43,943:INFO:Preloading libraries
2024-11-03 05:00:43,943:INFO:Set up data.
2024-11-03 05:00:43,947:INFO:Set up index.
2024-11-03 05:00:44,080:INFO:Initializing predict_model()
2024-11-03 05:00:44,080:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4550>)
2024-11-03 05:00:44,080:INFO:Checking exceptions
2024-11-03 05:00:44,080:INFO:Preloading libraries
2024-11-03 05:00:44,080:INFO:Set up data.
2024-11-03 05:00:44,085:INFO:Set up index.
2024-11-03 05:00:44,215:INFO:Initializing predict_model()
2024-11-03 05:00:44,215:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4D30>)
2024-11-03 05:00:44,215:INFO:Checking exceptions
2024-11-03 05:00:44,215:INFO:Preloading libraries
2024-11-03 05:00:44,215:INFO:Set up data.
2024-11-03 05:00:44,219:INFO:Set up index.
2024-11-03 05:00:44,349:INFO:Initializing predict_model()
2024-11-03 05:00:44,349:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:44,349:INFO:Checking exceptions
2024-11-03 05:00:44,349:INFO:Preloading libraries
2024-11-03 05:00:44,349:INFO:Set up data.
2024-11-03 05:00:44,353:INFO:Set up index.
2024-11-03 05:00:44,483:INFO:Initializing predict_model()
2024-11-03 05:00:44,483:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBD610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4D30>)
2024-11-03 05:00:44,483:INFO:Checking exceptions
2024-11-03 05:00:44,483:INFO:Preloading libraries
2024-11-03 05:00:44,484:INFO:Set up data.
2024-11-03 05:00:44,487:INFO:Set up index.
2024-11-03 05:00:44,610:INFO:Initializing predict_model()
2024-11-03 05:00:44,610:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4B80>)
2024-11-03 05:00:44,610:INFO:Checking exceptions
2024-11-03 05:00:44,610:INFO:Preloading libraries
2024-11-03 05:00:44,611:INFO:Set up data.
2024-11-03 05:00:44,618:INFO:Set up index.
2024-11-03 05:00:44,751:INFO:Initializing predict_model()
2024-11-03 05:00:44,751:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:44,751:INFO:Checking exceptions
2024-11-03 05:00:44,752:INFO:Preloading libraries
2024-11-03 05:00:44,752:INFO:Set up data.
2024-11-03 05:00:44,755:INFO:Set up index.
2024-11-03 05:00:44,941:INFO:Initializing predict_model()
2024-11-03 05:00:44,941:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C48B0>)
2024-11-03 05:00:44,941:INFO:Checking exceptions
2024-11-03 05:00:44,942:INFO:Preloading libraries
2024-11-03 05:00:44,943:INFO:Set up data.
2024-11-03 05:00:44,947:INFO:Set up index.
2024-11-03 05:00:45,082:INFO:Initializing predict_model()
2024-11-03 05:00:45,082:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:45,083:INFO:Checking exceptions
2024-11-03 05:00:45,083:INFO:Preloading libraries
2024-11-03 05:00:45,083:INFO:Set up data.
2024-11-03 05:00:45,088:INFO:Set up index.
2024-11-03 05:00:45,243:INFO:Initializing predict_model()
2024-11-03 05:00:45,243:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:45,244:INFO:Checking exceptions
2024-11-03 05:00:45,244:INFO:Preloading libraries
2024-11-03 05:00:45,244:INFO:Set up data.
2024-11-03 05:00:45,249:INFO:Set up index.
2024-11-03 05:00:45,479:INFO:Initializing predict_model()
2024-11-03 05:00:45,479:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:45,479:INFO:Checking exceptions
2024-11-03 05:00:45,479:INFO:Preloading libraries
2024-11-03 05:00:45,480:INFO:Set up data.
2024-11-03 05:00:45,486:INFO:Set up index.
2024-11-03 05:00:45,652:INFO:Initializing predict_model()
2024-11-03 05:00:45,652:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4550>)
2024-11-03 05:00:45,652:INFO:Checking exceptions
2024-11-03 05:00:45,652:INFO:Preloading libraries
2024-11-03 05:00:45,652:INFO:Set up data.
2024-11-03 05:00:45,657:INFO:Set up index.
2024-11-03 05:00:45,820:INFO:Initializing predict_model()
2024-11-03 05:00:45,820:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:45,820:INFO:Checking exceptions
2024-11-03 05:00:45,820:INFO:Preloading libraries
2024-11-03 05:00:45,820:INFO:Set up data.
2024-11-03 05:00:45,830:INFO:Set up index.
2024-11-03 05:00:45,965:INFO:Initializing predict_model()
2024-11-03 05:00:45,965:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:45,965:INFO:Checking exceptions
2024-11-03 05:00:45,965:INFO:Preloading libraries
2024-11-03 05:00:45,966:INFO:Set up data.
2024-11-03 05:00:45,974:INFO:Set up index.
2024-11-03 05:00:46,123:INFO:Initializing predict_model()
2024-11-03 05:00:46,124:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:46,124:INFO:Checking exceptions
2024-11-03 05:00:46,124:INFO:Preloading libraries
2024-11-03 05:00:46,124:INFO:Set up data.
2024-11-03 05:00:46,129:INFO:Set up index.
2024-11-03 05:00:46,290:INFO:Initializing predict_model()
2024-11-03 05:00:46,290:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:46,290:INFO:Checking exceptions
2024-11-03 05:00:46,290:INFO:Preloading libraries
2024-11-03 05:00:46,290:INFO:Set up data.
2024-11-03 05:00:46,296:INFO:Set up index.
2024-11-03 05:00:46,436:INFO:Initializing predict_model()
2024-11-03 05:00:46,436:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:46,436:INFO:Checking exceptions
2024-11-03 05:00:46,436:INFO:Preloading libraries
2024-11-03 05:00:46,436:INFO:Set up data.
2024-11-03 05:00:46,443:INFO:Set up index.
2024-11-03 05:00:46,592:INFO:Initializing predict_model()
2024-11-03 05:00:46,592:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBDA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:46,592:INFO:Checking exceptions
2024-11-03 05:00:46,592:INFO:Preloading libraries
2024-11-03 05:00:46,592:INFO:Set up data.
2024-11-03 05:00:46,598:INFO:Set up index.
2024-11-03 05:00:46,747:INFO:Initializing predict_model()
2024-11-03 05:00:46,747:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:46,747:INFO:Checking exceptions
2024-11-03 05:00:46,747:INFO:Preloading libraries
2024-11-03 05:00:46,747:INFO:Set up data.
2024-11-03 05:00:46,752:INFO:Set up index.
2024-11-03 05:00:46,912:INFO:Initializing predict_model()
2024-11-03 05:00:46,912:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:46,912:INFO:Checking exceptions
2024-11-03 05:00:46,912:INFO:Preloading libraries
2024-11-03 05:00:46,913:INFO:Set up data.
2024-11-03 05:00:46,920:INFO:Set up index.
2024-11-03 05:00:47,059:INFO:Initializing predict_model()
2024-11-03 05:00:47,059:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:47,059:INFO:Checking exceptions
2024-11-03 05:00:47,059:INFO:Preloading libraries
2024-11-03 05:00:47,059:INFO:Set up data.
2024-11-03 05:00:47,063:INFO:Set up index.
2024-11-03 05:00:47,224:INFO:Initializing predict_model()
2024-11-03 05:00:47,224:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:47,225:INFO:Checking exceptions
2024-11-03 05:00:47,225:INFO:Preloading libraries
2024-11-03 05:00:47,225:INFO:Set up data.
2024-11-03 05:00:47,230:INFO:Set up index.
2024-11-03 05:00:47,449:INFO:Initializing predict_model()
2024-11-03 05:00:47,449:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:47,449:INFO:Checking exceptions
2024-11-03 05:00:47,449:INFO:Preloading libraries
2024-11-03 05:00:47,449:INFO:Set up data.
2024-11-03 05:00:47,453:INFO:Set up index.
2024-11-03 05:00:47,582:INFO:Initializing predict_model()
2024-11-03 05:00:47,583:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:47,583:INFO:Checking exceptions
2024-11-03 05:00:47,583:INFO:Preloading libraries
2024-11-03 05:00:47,583:INFO:Set up data.
2024-11-03 05:00:47,588:INFO:Set up index.
2024-11-03 05:00:47,726:INFO:Initializing predict_model()
2024-11-03 05:00:47,727:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4EE0>)
2024-11-03 05:00:47,727:INFO:Checking exceptions
2024-11-03 05:00:47,727:INFO:Preloading libraries
2024-11-03 05:00:47,727:INFO:Set up data.
2024-11-03 05:00:47,731:INFO:Set up index.
2024-11-03 05:00:47,869:INFO:Initializing predict_model()
2024-11-03 05:00:47,869:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4280>)
2024-11-03 05:00:47,869:INFO:Checking exceptions
2024-11-03 05:00:47,869:INFO:Preloading libraries
2024-11-03 05:00:47,869:INFO:Set up data.
2024-11-03 05:00:47,873:INFO:Set up index.
2024-11-03 05:00:48,117:INFO:Initializing predict_model()
2024-11-03 05:00:48,117:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:48,117:INFO:Checking exceptions
2024-11-03 05:00:48,117:INFO:Preloading libraries
2024-11-03 05:00:48,117:INFO:Set up data.
2024-11-03 05:00:48,122:INFO:Set up index.
2024-11-03 05:00:48,263:INFO:Initializing predict_model()
2024-11-03 05:00:48,263:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:48,263:INFO:Checking exceptions
2024-11-03 05:00:48,263:INFO:Preloading libraries
2024-11-03 05:00:48,264:INFO:Set up data.
2024-11-03 05:00:48,271:INFO:Set up index.
2024-11-03 05:00:48,426:INFO:Initializing predict_model()
2024-11-03 05:00:48,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:48,427:INFO:Checking exceptions
2024-11-03 05:00:48,427:INFO:Preloading libraries
2024-11-03 05:00:48,427:INFO:Set up data.
2024-11-03 05:00:48,431:INFO:Set up index.
2024-11-03 05:00:48,571:INFO:Initializing predict_model()
2024-11-03 05:00:48,571:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:48,572:INFO:Checking exceptions
2024-11-03 05:00:48,572:INFO:Preloading libraries
2024-11-03 05:00:48,572:INFO:Set up data.
2024-11-03 05:00:48,576:INFO:Set up index.
2024-11-03 05:00:48,707:INFO:Initializing predict_model()
2024-11-03 05:00:48,707:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:48,707:INFO:Checking exceptions
2024-11-03 05:00:48,707:INFO:Preloading libraries
2024-11-03 05:00:48,708:INFO:Set up data.
2024-11-03 05:00:48,712:INFO:Set up index.
2024-11-03 05:00:48,846:INFO:Initializing predict_model()
2024-11-03 05:00:48,846:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:48,846:INFO:Checking exceptions
2024-11-03 05:00:48,847:INFO:Preloading libraries
2024-11-03 05:00:48,847:INFO:Set up data.
2024-11-03 05:00:48,852:INFO:Set up index.
2024-11-03 05:00:48,986:INFO:Initializing predict_model()
2024-11-03 05:00:48,986:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B430>)
2024-11-03 05:00:48,986:INFO:Checking exceptions
2024-11-03 05:00:48,986:INFO:Preloading libraries
2024-11-03 05:00:48,986:INFO:Set up data.
2024-11-03 05:00:48,991:INFO:Set up index.
2024-11-03 05:00:49,128:INFO:Initializing predict_model()
2024-11-03 05:00:49,128:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F698B0>)
2024-11-03 05:00:49,129:INFO:Checking exceptions
2024-11-03 05:00:49,129:INFO:Preloading libraries
2024-11-03 05:00:49,129:INFO:Set up data.
2024-11-03 05:00:49,134:INFO:Set up index.
2024-11-03 05:00:49,266:INFO:Initializing predict_model()
2024-11-03 05:00:49,266:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:49,266:INFO:Checking exceptions
2024-11-03 05:00:49,266:INFO:Preloading libraries
2024-11-03 05:00:49,266:INFO:Set up data.
2024-11-03 05:00:49,271:INFO:Set up index.
2024-11-03 05:00:49,747:INFO:Initializing predict_model()
2024-11-03 05:00:49,747:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:49,748:INFO:Checking exceptions
2024-11-03 05:00:49,748:INFO:Preloading libraries
2024-11-03 05:00:49,748:INFO:Set up data.
2024-11-03 05:00:49,752:INFO:Set up index.
2024-11-03 05:00:49,987:INFO:Initializing predict_model()
2024-11-03 05:00:49,988:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:49,988:INFO:Checking exceptions
2024-11-03 05:00:49,988:INFO:Preloading libraries
2024-11-03 05:00:49,989:INFO:Set up data.
2024-11-03 05:00:49,997:INFO:Set up index.
2024-11-03 05:00:50,187:INFO:Initializing predict_model()
2024-11-03 05:00:50,188:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:00:50,188:INFO:Checking exceptions
2024-11-03 05:00:50,188:INFO:Preloading libraries
2024-11-03 05:00:50,188:INFO:Set up data.
2024-11-03 05:00:50,194:INFO:Set up index.
2024-11-03 05:00:50,327:INFO:Initializing predict_model()
2024-11-03 05:00:50,328:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:50,328:INFO:Checking exceptions
2024-11-03 05:00:50,328:INFO:Preloading libraries
2024-11-03 05:00:50,328:INFO:Set up data.
2024-11-03 05:00:50,332:INFO:Set up index.
2024-11-03 05:00:50,537:INFO:Initializing predict_model()
2024-11-03 05:00:50,539:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:50,539:INFO:Checking exceptions
2024-11-03 05:00:50,539:INFO:Preloading libraries
2024-11-03 05:00:50,540:INFO:Set up data.
2024-11-03 05:00:50,545:INFO:Set up index.
2024-11-03 05:00:50,742:INFO:Initializing predict_model()
2024-11-03 05:00:50,742:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:50,742:INFO:Checking exceptions
2024-11-03 05:00:50,742:INFO:Preloading libraries
2024-11-03 05:00:50,743:INFO:Set up data.
2024-11-03 05:00:50,746:INFO:Set up index.
2024-11-03 05:00:50,883:INFO:Initializing predict_model()
2024-11-03 05:00:50,883:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FA3160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F698B0>)
2024-11-03 05:00:50,883:INFO:Checking exceptions
2024-11-03 05:00:50,883:INFO:Preloading libraries
2024-11-03 05:00:50,883:INFO:Set up data.
2024-11-03 05:00:50,887:INFO:Set up index.
2024-11-03 05:00:51,018:INFO:Initializing predict_model()
2024-11-03 05:00:51,018:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:51,019:INFO:Checking exceptions
2024-11-03 05:00:51,019:INFO:Preloading libraries
2024-11-03 05:00:51,019:INFO:Set up data.
2024-11-03 05:00:51,024:INFO:Set up index.
2024-11-03 05:00:51,158:INFO:Initializing predict_model()
2024-11-03 05:00:51,158:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:51,158:INFO:Checking exceptions
2024-11-03 05:00:51,158:INFO:Preloading libraries
2024-11-03 05:00:51,159:INFO:Set up data.
2024-11-03 05:00:51,162:INFO:Set up index.
2024-11-03 05:00:51,299:INFO:Initializing predict_model()
2024-11-03 05:00:51,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:51,300:INFO:Checking exceptions
2024-11-03 05:00:51,300:INFO:Preloading libraries
2024-11-03 05:00:51,300:INFO:Set up data.
2024-11-03 05:00:51,304:INFO:Set up index.
2024-11-03 05:00:51,443:INFO:Initializing predict_model()
2024-11-03 05:00:51,443:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:51,443:INFO:Checking exceptions
2024-11-03 05:00:51,443:INFO:Preloading libraries
2024-11-03 05:00:51,443:INFO:Set up data.
2024-11-03 05:00:51,446:INFO:Set up index.
2024-11-03 05:00:51,582:INFO:Initializing predict_model()
2024-11-03 05:00:51,582:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:51,582:INFO:Checking exceptions
2024-11-03 05:00:51,582:INFO:Preloading libraries
2024-11-03 05:00:51,582:INFO:Set up data.
2024-11-03 05:00:51,587:INFO:Set up index.
2024-11-03 05:00:51,723:INFO:Initializing predict_model()
2024-11-03 05:00:51,723:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:51,723:INFO:Checking exceptions
2024-11-03 05:00:51,723:INFO:Preloading libraries
2024-11-03 05:00:51,723:INFO:Set up data.
2024-11-03 05:00:51,728:INFO:Set up index.
2024-11-03 05:00:51,862:INFO:Initializing predict_model()
2024-11-03 05:00:51,862:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:51,862:INFO:Checking exceptions
2024-11-03 05:00:51,863:INFO:Preloading libraries
2024-11-03 05:00:51,863:INFO:Set up data.
2024-11-03 05:00:51,869:INFO:Set up index.
2024-11-03 05:00:52,008:INFO:Initializing predict_model()
2024-11-03 05:00:52,008:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:52,008:INFO:Checking exceptions
2024-11-03 05:00:52,008:INFO:Preloading libraries
2024-11-03 05:00:52,008:INFO:Set up data.
2024-11-03 05:00:52,012:INFO:Set up index.
2024-11-03 05:00:52,148:INFO:Initializing predict_model()
2024-11-03 05:00:52,148:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FA39D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:52,148:INFO:Checking exceptions
2024-11-03 05:00:52,148:INFO:Preloading libraries
2024-11-03 05:00:52,148:INFO:Set up data.
2024-11-03 05:00:52,152:INFO:Set up index.
2024-11-03 05:00:52,295:INFO:Initializing predict_model()
2024-11-03 05:00:52,295:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:52,295:INFO:Checking exceptions
2024-11-03 05:00:52,295:INFO:Preloading libraries
2024-11-03 05:00:52,295:INFO:Set up data.
2024-11-03 05:00:52,299:INFO:Set up index.
2024-11-03 05:00:52,458:INFO:Initializing predict_model()
2024-11-03 05:00:52,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:52,458:INFO:Checking exceptions
2024-11-03 05:00:52,458:INFO:Preloading libraries
2024-11-03 05:00:52,459:INFO:Set up data.
2024-11-03 05:00:52,463:INFO:Set up index.
2024-11-03 05:00:52,661:INFO:Initializing predict_model()
2024-11-03 05:00:52,661:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B310>)
2024-11-03 05:00:52,661:INFO:Checking exceptions
2024-11-03 05:00:52,661:INFO:Preloading libraries
2024-11-03 05:00:52,662:INFO:Set up data.
2024-11-03 05:00:52,666:INFO:Set up index.
2024-11-03 05:00:52,793:INFO:Initializing predict_model()
2024-11-03 05:00:52,793:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3BF70>)
2024-11-03 05:00:52,793:INFO:Checking exceptions
2024-11-03 05:00:52,793:INFO:Preloading libraries
2024-11-03 05:00:52,793:INFO:Set up data.
2024-11-03 05:00:52,797:INFO:Set up index.
2024-11-03 05:00:52,922:INFO:Initializing predict_model()
2024-11-03 05:00:52,922:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:52,923:INFO:Checking exceptions
2024-11-03 05:00:52,923:INFO:Preloading libraries
2024-11-03 05:00:52,923:INFO:Set up data.
2024-11-03 05:00:52,931:INFO:Set up index.
2024-11-03 05:00:53,130:INFO:Initializing predict_model()
2024-11-03 05:00:53,130:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:53,131:INFO:Checking exceptions
2024-11-03 05:00:53,131:INFO:Preloading libraries
2024-11-03 05:00:53,131:INFO:Set up data.
2024-11-03 05:00:53,139:INFO:Set up index.
2024-11-03 05:00:53,301:INFO:Initializing predict_model()
2024-11-03 05:00:53,301:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:53,302:INFO:Checking exceptions
2024-11-03 05:00:53,302:INFO:Preloading libraries
2024-11-03 05:00:53,302:INFO:Set up data.
2024-11-03 05:00:53,306:INFO:Set up index.
2024-11-03 05:00:53,439:INFO:Initializing predict_model()
2024-11-03 05:00:53,439:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:53,439:INFO:Checking exceptions
2024-11-03 05:00:53,439:INFO:Preloading libraries
2024-11-03 05:00:53,439:INFO:Set up data.
2024-11-03 05:00:53,445:INFO:Set up index.
2024-11-03 05:00:53,580:INFO:Initializing predict_model()
2024-11-03 05:00:53,580:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4DC0>)
2024-11-03 05:00:53,581:INFO:Checking exceptions
2024-11-03 05:00:53,581:INFO:Preloading libraries
2024-11-03 05:00:53,581:INFO:Set up data.
2024-11-03 05:00:53,586:INFO:Set up index.
2024-11-03 05:00:53,717:INFO:Initializing predict_model()
2024-11-03 05:00:53,718:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBD6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:53,718:INFO:Checking exceptions
2024-11-03 05:00:53,718:INFO:Preloading libraries
2024-11-03 05:00:53,718:INFO:Set up data.
2024-11-03 05:00:53,722:INFO:Set up index.
2024-11-03 05:00:53,865:INFO:Initializing predict_model()
2024-11-03 05:00:53,865:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:53,865:INFO:Checking exceptions
2024-11-03 05:00:53,865:INFO:Preloading libraries
2024-11-03 05:00:53,866:INFO:Set up data.
2024-11-03 05:00:53,869:INFO:Set up index.
2024-11-03 05:00:54,006:INFO:Initializing predict_model()
2024-11-03 05:00:54,006:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:54,006:INFO:Checking exceptions
2024-11-03 05:00:54,006:INFO:Preloading libraries
2024-11-03 05:00:54,006:INFO:Set up data.
2024-11-03 05:00:54,011:INFO:Set up index.
2024-11-03 05:00:54,161:INFO:Initializing predict_model()
2024-11-03 05:00:54,161:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:54,161:INFO:Checking exceptions
2024-11-03 05:00:54,161:INFO:Preloading libraries
2024-11-03 05:00:54,161:INFO:Set up data.
2024-11-03 05:00:54,165:INFO:Set up index.
2024-11-03 05:00:54,298:INFO:Initializing predict_model()
2024-11-03 05:00:54,298:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:54,298:INFO:Checking exceptions
2024-11-03 05:00:54,298:INFO:Preloading libraries
2024-11-03 05:00:54,299:INFO:Set up data.
2024-11-03 05:00:54,302:INFO:Set up index.
2024-11-03 05:00:54,435:INFO:Initializing predict_model()
2024-11-03 05:00:54,435:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4B80>)
2024-11-03 05:00:54,436:INFO:Checking exceptions
2024-11-03 05:00:54,436:INFO:Preloading libraries
2024-11-03 05:00:54,436:INFO:Set up data.
2024-11-03 05:00:54,440:INFO:Set up index.
2024-11-03 05:00:54,575:INFO:Initializing predict_model()
2024-11-03 05:00:54,575:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBDDF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:54,575:INFO:Checking exceptions
2024-11-03 05:00:54,575:INFO:Preloading libraries
2024-11-03 05:00:54,575:INFO:Set up data.
2024-11-03 05:00:54,579:INFO:Set up index.
2024-11-03 05:00:54,719:INFO:Initializing predict_model()
2024-11-03 05:00:54,719:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:54,720:INFO:Checking exceptions
2024-11-03 05:00:54,720:INFO:Preloading libraries
2024-11-03 05:00:54,720:INFO:Set up data.
2024-11-03 05:00:54,724:INFO:Set up index.
2024-11-03 05:00:54,855:INFO:Initializing predict_model()
2024-11-03 05:00:54,855:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:54,855:INFO:Checking exceptions
2024-11-03 05:00:54,855:INFO:Preloading libraries
2024-11-03 05:00:54,856:INFO:Set up data.
2024-11-03 05:00:54,860:INFO:Set up index.
2024-11-03 05:00:55,081:INFO:Initializing predict_model()
2024-11-03 05:00:55,081:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B040>)
2024-11-03 05:00:55,087:INFO:Checking exceptions
2024-11-03 05:00:55,087:INFO:Preloading libraries
2024-11-03 05:00:55,088:INFO:Set up data.
2024-11-03 05:00:55,095:INFO:Set up index.
2024-11-03 05:00:55,237:INFO:Initializing predict_model()
2024-11-03 05:00:55,237:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:55,237:INFO:Checking exceptions
2024-11-03 05:00:55,238:INFO:Preloading libraries
2024-11-03 05:00:55,238:INFO:Set up data.
2024-11-03 05:00:55,242:INFO:Set up index.
2024-11-03 05:00:55,387:INFO:Initializing predict_model()
2024-11-03 05:00:55,387:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:55,387:INFO:Checking exceptions
2024-11-03 05:00:55,387:INFO:Preloading libraries
2024-11-03 05:00:55,388:INFO:Set up data.
2024-11-03 05:00:55,393:INFO:Set up index.
2024-11-03 05:00:55,590:INFO:Initializing predict_model()
2024-11-03 05:00:55,590:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:55,591:INFO:Checking exceptions
2024-11-03 05:00:55,591:INFO:Preloading libraries
2024-11-03 05:00:55,591:INFO:Set up data.
2024-11-03 05:00:55,595:INFO:Set up index.
2024-11-03 05:00:55,741:INFO:Initializing predict_model()
2024-11-03 05:00:55,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:55,741:INFO:Checking exceptions
2024-11-03 05:00:55,741:INFO:Preloading libraries
2024-11-03 05:00:55,741:INFO:Set up data.
2024-11-03 05:00:55,746:INFO:Set up index.
2024-11-03 05:00:55,889:INFO:Initializing predict_model()
2024-11-03 05:00:55,889:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:55,889:INFO:Checking exceptions
2024-11-03 05:00:55,889:INFO:Preloading libraries
2024-11-03 05:00:55,889:INFO:Set up data.
2024-11-03 05:00:55,893:INFO:Set up index.
2024-11-03 05:00:56,042:INFO:Initializing predict_model()
2024-11-03 05:00:56,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:56,042:INFO:Checking exceptions
2024-11-03 05:00:56,042:INFO:Preloading libraries
2024-11-03 05:00:56,043:INFO:Set up data.
2024-11-03 05:00:56,048:INFO:Set up index.
2024-11-03 05:00:56,194:INFO:Initializing predict_model()
2024-11-03 05:00:56,194:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:56,195:INFO:Checking exceptions
2024-11-03 05:00:56,195:INFO:Preloading libraries
2024-11-03 05:00:56,195:INFO:Set up data.
2024-11-03 05:00:56,199:INFO:Set up index.
2024-11-03 05:00:56,341:INFO:Initializing predict_model()
2024-11-03 05:00:56,341:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142F8B970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:56,341:INFO:Checking exceptions
2024-11-03 05:00:56,341:INFO:Preloading libraries
2024-11-03 05:00:56,341:INFO:Set up data.
2024-11-03 05:00:56,345:INFO:Set up index.
2024-11-03 05:00:56,492:INFO:Initializing predict_model()
2024-11-03 05:00:56,492:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:56,492:INFO:Checking exceptions
2024-11-03 05:00:56,492:INFO:Preloading libraries
2024-11-03 05:00:56,492:INFO:Set up data.
2024-11-03 05:00:56,497:INFO:Set up index.
2024-11-03 05:00:56,622:INFO:Initializing predict_model()
2024-11-03 05:00:56,622:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4C10>)
2024-11-03 05:00:56,622:INFO:Checking exceptions
2024-11-03 05:00:56,622:INFO:Preloading libraries
2024-11-03 05:00:56,622:INFO:Set up data.
2024-11-03 05:00:56,627:INFO:Set up index.
2024-11-03 05:00:56,783:INFO:Initializing predict_model()
2024-11-03 05:00:56,783:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4E50>)
2024-11-03 05:00:56,783:INFO:Checking exceptions
2024-11-03 05:00:56,783:INFO:Preloading libraries
2024-11-03 05:00:56,784:INFO:Set up data.
2024-11-03 05:00:56,787:INFO:Set up index.
2024-11-03 05:00:56,912:INFO:Initializing predict_model()
2024-11-03 05:00:56,913:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4F70>)
2024-11-03 05:00:56,913:INFO:Checking exceptions
2024-11-03 05:00:56,913:INFO:Preloading libraries
2024-11-03 05:00:56,913:INFO:Set up data.
2024-11-03 05:00:56,918:INFO:Set up index.
2024-11-03 05:00:57,061:INFO:Initializing predict_model()
2024-11-03 05:00:57,061:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:57,061:INFO:Checking exceptions
2024-11-03 05:00:57,061:INFO:Preloading libraries
2024-11-03 05:00:57,061:INFO:Set up data.
2024-11-03 05:00:57,067:INFO:Set up index.
2024-11-03 05:00:57,203:INFO:Initializing predict_model()
2024-11-03 05:00:57,204:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:57,204:INFO:Checking exceptions
2024-11-03 05:00:57,204:INFO:Preloading libraries
2024-11-03 05:00:57,204:INFO:Set up data.
2024-11-03 05:00:57,209:INFO:Set up index.
2024-11-03 05:00:57,342:INFO:Initializing predict_model()
2024-11-03 05:00:57,342:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69E50>)
2024-11-03 05:00:57,342:INFO:Checking exceptions
2024-11-03 05:00:57,342:INFO:Preloading libraries
2024-11-03 05:00:57,343:INFO:Set up data.
2024-11-03 05:00:57,348:INFO:Set up index.
2024-11-03 05:00:57,488:INFO:Initializing predict_model()
2024-11-03 05:00:57,488:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:57,488:INFO:Checking exceptions
2024-11-03 05:00:57,488:INFO:Preloading libraries
2024-11-03 05:00:57,490:INFO:Set up data.
2024-11-03 05:00:57,495:INFO:Set up index.
2024-11-03 05:00:57,694:INFO:Initializing predict_model()
2024-11-03 05:00:57,694:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:57,694:INFO:Checking exceptions
2024-11-03 05:00:57,694:INFO:Preloading libraries
2024-11-03 05:00:57,695:INFO:Set up data.
2024-11-03 05:00:57,699:INFO:Set up index.
2024-11-03 05:00:57,851:INFO:Initializing predict_model()
2024-11-03 05:00:57,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:57,851:INFO:Checking exceptions
2024-11-03 05:00:57,851:INFO:Preloading libraries
2024-11-03 05:00:57,852:INFO:Set up data.
2024-11-03 05:00:57,857:INFO:Set up index.
2024-11-03 05:00:57,990:INFO:Initializing predict_model()
2024-11-03 05:00:57,991:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:57,991:INFO:Checking exceptions
2024-11-03 05:00:57,991:INFO:Preloading libraries
2024-11-03 05:00:57,991:INFO:Set up data.
2024-11-03 05:00:57,995:INFO:Set up index.
2024-11-03 05:00:58,189:INFO:Initializing predict_model()
2024-11-03 05:00:58,189:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:58,189:INFO:Checking exceptions
2024-11-03 05:00:58,189:INFO:Preloading libraries
2024-11-03 05:00:58,190:INFO:Set up data.
2024-11-03 05:00:58,196:INFO:Set up index.
2024-11-03 05:00:58,333:INFO:Initializing predict_model()
2024-11-03 05:00:58,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:58,334:INFO:Checking exceptions
2024-11-03 05:00:58,334:INFO:Preloading libraries
2024-11-03 05:00:58,334:INFO:Set up data.
2024-11-03 05:00:58,337:INFO:Set up index.
2024-11-03 05:00:58,471:INFO:Initializing predict_model()
2024-11-03 05:00:58,471:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:58,471:INFO:Checking exceptions
2024-11-03 05:00:58,471:INFO:Preloading libraries
2024-11-03 05:00:58,472:INFO:Set up data.
2024-11-03 05:00:58,476:INFO:Set up index.
2024-11-03 05:00:58,614:INFO:Initializing predict_model()
2024-11-03 05:00:58,614:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:58,614:INFO:Checking exceptions
2024-11-03 05:00:58,615:INFO:Preloading libraries
2024-11-03 05:00:58,615:INFO:Set up data.
2024-11-03 05:00:58,619:INFO:Set up index.
2024-11-03 05:00:58,754:INFO:Initializing predict_model()
2024-11-03 05:00:58,754:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:58,755:INFO:Checking exceptions
2024-11-03 05:00:58,755:INFO:Preloading libraries
2024-11-03 05:00:58,755:INFO:Set up data.
2024-11-03 05:00:58,759:INFO:Set up index.
2024-11-03 05:00:58,890:INFO:Initializing predict_model()
2024-11-03 05:00:58,890:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBD2E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F69E50>)
2024-11-03 05:00:58,891:INFO:Checking exceptions
2024-11-03 05:00:58,891:INFO:Preloading libraries
2024-11-03 05:00:58,891:INFO:Set up data.
2024-11-03 05:00:58,896:INFO:Set up index.
2024-11-03 05:00:59,036:INFO:Initializing predict_model()
2024-11-03 05:00:59,037:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:59,037:INFO:Checking exceptions
2024-11-03 05:00:59,037:INFO:Preloading libraries
2024-11-03 05:00:59,037:INFO:Set up data.
2024-11-03 05:00:59,041:INFO:Set up index.
2024-11-03 05:00:59,181:INFO:Initializing predict_model()
2024-11-03 05:00:59,181:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:59,181:INFO:Checking exceptions
2024-11-03 05:00:59,181:INFO:Preloading libraries
2024-11-03 05:00:59,181:INFO:Set up data.
2024-11-03 05:00:59,185:INFO:Set up index.
2024-11-03 05:00:59,321:INFO:Initializing predict_model()
2024-11-03 05:00:59,321:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:59,321:INFO:Checking exceptions
2024-11-03 05:00:59,321:INFO:Preloading libraries
2024-11-03 05:00:59,321:INFO:Set up data.
2024-11-03 05:00:59,326:INFO:Set up index.
2024-11-03 05:00:59,460:INFO:Initializing predict_model()
2024-11-03 05:00:59,461:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:59,461:INFO:Checking exceptions
2024-11-03 05:00:59,461:INFO:Preloading libraries
2024-11-03 05:00:59,461:INFO:Set up data.
2024-11-03 05:00:59,464:INFO:Set up index.
2024-11-03 05:00:59,605:INFO:Initializing predict_model()
2024-11-03 05:00:59,606:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:59,606:INFO:Checking exceptions
2024-11-03 05:00:59,606:INFO:Preloading libraries
2024-11-03 05:00:59,606:INFO:Set up data.
2024-11-03 05:00:59,611:INFO:Set up index.
2024-11-03 05:00:59,756:INFO:Initializing predict_model()
2024-11-03 05:00:59,756:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:00:59,756:INFO:Checking exceptions
2024-11-03 05:00:59,756:INFO:Preloading libraries
2024-11-03 05:00:59,756:INFO:Set up data.
2024-11-03 05:00:59,761:INFO:Set up index.
2024-11-03 05:00:59,898:INFO:Initializing predict_model()
2024-11-03 05:00:59,898:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:00:59,898:INFO:Checking exceptions
2024-11-03 05:00:59,898:INFO:Preloading libraries
2024-11-03 05:00:59,899:INFO:Set up data.
2024-11-03 05:00:59,903:INFO:Set up index.
2024-11-03 05:01:00,042:INFO:Initializing predict_model()
2024-11-03 05:01:00,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:01:00,042:INFO:Checking exceptions
2024-11-03 05:01:00,042:INFO:Preloading libraries
2024-11-03 05:01:00,042:INFO:Set up data.
2024-11-03 05:01:00,047:INFO:Set up index.
2024-11-03 05:01:00,250:INFO:Initializing predict_model()
2024-11-03 05:01:00,250:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026148681B80>)
2024-11-03 05:01:00,250:INFO:Checking exceptions
2024-11-03 05:01:00,250:INFO:Preloading libraries
2024-11-03 05:01:00,251:INFO:Set up data.
2024-11-03 05:01:00,257:INFO:Set up index.
2024-11-03 05:01:00,393:INFO:Initializing predict_model()
2024-11-03 05:01:00,393:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B0D0>)
2024-11-03 05:01:00,393:INFO:Checking exceptions
2024-11-03 05:01:00,393:INFO:Preloading libraries
2024-11-03 05:01:00,393:INFO:Set up data.
2024-11-03 05:01:00,398:INFO:Set up index.
2024-11-03 05:01:00,532:INFO:Initializing predict_model()
2024-11-03 05:01:00,533:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B430>)
2024-11-03 05:01:00,533:INFO:Checking exceptions
2024-11-03 05:01:00,533:INFO:Preloading libraries
2024-11-03 05:01:00,533:INFO:Set up data.
2024-11-03 05:01:00,538:INFO:Set up index.
2024-11-03 05:01:00,742:INFO:Initializing predict_model()
2024-11-03 05:01:00,742:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:01:00,742:INFO:Checking exceptions
2024-11-03 05:01:00,742:INFO:Preloading libraries
2024-11-03 05:01:00,742:INFO:Set up data.
2024-11-03 05:01:00,746:INFO:Set up index.
2024-11-03 05:01:00,897:INFO:Initializing predict_model()
2024-11-03 05:01:00,897:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:00,897:INFO:Checking exceptions
2024-11-03 05:01:00,897:INFO:Preloading libraries
2024-11-03 05:01:00,897:INFO:Set up data.
2024-11-03 05:01:00,901:INFO:Set up index.
2024-11-03 05:01:01,038:INFO:Initializing predict_model()
2024-11-03 05:01:01,038:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:01:01,038:INFO:Checking exceptions
2024-11-03 05:01:01,039:INFO:Preloading libraries
2024-11-03 05:01:01,039:INFO:Set up data.
2024-11-03 05:01:01,042:INFO:Set up index.
2024-11-03 05:01:01,179:INFO:Initializing predict_model()
2024-11-03 05:01:01,179:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:01,179:INFO:Checking exceptions
2024-11-03 05:01:01,179:INFO:Preloading libraries
2024-11-03 05:01:01,179:INFO:Set up data.
2024-11-03 05:01:01,183:INFO:Set up index.
2024-11-03 05:01:01,316:INFO:Initializing predict_model()
2024-11-03 05:01:01,316:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486C4AF0>)
2024-11-03 05:01:01,316:INFO:Checking exceptions
2024-11-03 05:01:01,316:INFO:Preloading libraries
2024-11-03 05:01:01,317:INFO:Set up data.
2024-11-03 05:01:01,323:INFO:Set up index.
2024-11-03 05:01:01,461:INFO:Initializing predict_model()
2024-11-03 05:01:01,462:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:01,462:INFO:Checking exceptions
2024-11-03 05:01:01,462:INFO:Preloading libraries
2024-11-03 05:01:01,462:INFO:Set up data.
2024-11-03 05:01:01,466:INFO:Set up index.
2024-11-03 05:01:01,602:INFO:Initializing predict_model()
2024-11-03 05:01:01,602:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0F70>)
2024-11-03 05:01:01,602:INFO:Checking exceptions
2024-11-03 05:01:01,602:INFO:Preloading libraries
2024-11-03 05:01:01,603:INFO:Set up data.
2024-11-03 05:01:01,606:INFO:Set up index.
2024-11-03 05:01:01,744:INFO:Initializing predict_model()
2024-11-03 05:01:01,745:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:01,745:INFO:Checking exceptions
2024-11-03 05:01:01,745:INFO:Preloading libraries
2024-11-03 05:01:01,745:INFO:Set up data.
2024-11-03 05:01:01,750:INFO:Set up index.
2024-11-03 05:01:01,918:INFO:Initializing predict_model()
2024-11-03 05:01:01,919:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0F70>)
2024-11-03 05:01:01,919:INFO:Checking exceptions
2024-11-03 05:01:01,919:INFO:Preloading libraries
2024-11-03 05:01:01,919:INFO:Set up data.
2024-11-03 05:01:01,923:INFO:Set up index.
2024-11-03 05:01:02,074:INFO:Initializing predict_model()
2024-11-03 05:01:02,074:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:02,074:INFO:Checking exceptions
2024-11-03 05:01:02,074:INFO:Preloading libraries
2024-11-03 05:01:02,074:INFO:Set up data.
2024-11-03 05:01:02,078:INFO:Set up index.
2024-11-03 05:01:02,211:INFO:Initializing predict_model()
2024-11-03 05:01:02,211:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0F70>)
2024-11-03 05:01:02,211:INFO:Checking exceptions
2024-11-03 05:01:02,211:INFO:Preloading libraries
2024-11-03 05:01:02,212:INFO:Set up data.
2024-11-03 05:01:02,216:INFO:Set up index.
2024-11-03 05:01:02,348:INFO:Initializing predict_model()
2024-11-03 05:01:02,348:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0D30>)
2024-11-03 05:01:02,348:INFO:Checking exceptions
2024-11-03 05:01:02,348:INFO:Preloading libraries
2024-11-03 05:01:02,348:INFO:Set up data.
2024-11-03 05:01:02,352:INFO:Set up index.
2024-11-03 05:01:02,486:INFO:Initializing predict_model()
2024-11-03 05:01:02,486:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:02,487:INFO:Checking exceptions
2024-11-03 05:01:02,487:INFO:Preloading libraries
2024-11-03 05:01:02,487:INFO:Set up data.
2024-11-03 05:01:02,491:INFO:Set up index.
2024-11-03 05:01:02,716:INFO:Initializing predict_model()
2024-11-03 05:01:02,716:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FBD6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:02,716:INFO:Checking exceptions
2024-11-03 05:01:02,716:INFO:Preloading libraries
2024-11-03 05:01:02,717:INFO:Set up data.
2024-11-03 05:01:02,722:INFO:Set up index.
2024-11-03 05:01:02,873:INFO:Initializing predict_model()
2024-11-03 05:01:02,873:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:02,873:INFO:Checking exceptions
2024-11-03 05:01:02,873:INFO:Preloading libraries
2024-11-03 05:01:02,874:INFO:Set up data.
2024-11-03 05:01:02,877:INFO:Set up index.
2024-11-03 05:01:03,018:INFO:Initializing predict_model()
2024-11-03 05:01:03,018:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:03,018:INFO:Checking exceptions
2024-11-03 05:01:03,018:INFO:Preloading libraries
2024-11-03 05:01:03,019:INFO:Set up data.
2024-11-03 05:01:03,022:INFO:Set up index.
2024-11-03 05:01:03,161:INFO:Initializing predict_model()
2024-11-03 05:01:03,161:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:03,161:INFO:Checking exceptions
2024-11-03 05:01:03,161:INFO:Preloading libraries
2024-11-03 05:01:03,162:INFO:Set up data.
2024-11-03 05:01:03,165:INFO:Set up index.
2024-11-03 05:01:03,340:INFO:Initializing predict_model()
2024-11-03 05:01:03,341:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:03,341:INFO:Checking exceptions
2024-11-03 05:01:03,342:INFO:Preloading libraries
2024-11-03 05:01:03,342:INFO:Set up data.
2024-11-03 05:01:03,348:INFO:Set up index.
2024-11-03 05:01:03,490:INFO:Initializing predict_model()
2024-11-03 05:01:03,490:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:03,490:INFO:Checking exceptions
2024-11-03 05:01:03,490:INFO:Preloading libraries
2024-11-03 05:01:03,490:INFO:Set up data.
2024-11-03 05:01:03,494:INFO:Set up index.
2024-11-03 05:01:03,634:INFO:Initializing predict_model()
2024-11-03 05:01:03,634:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:03,634:INFO:Checking exceptions
2024-11-03 05:01:03,634:INFO:Preloading libraries
2024-11-03 05:01:03,634:INFO:Set up data.
2024-11-03 05:01:03,639:INFO:Set up index.
2024-11-03 05:01:03,776:INFO:Initializing predict_model()
2024-11-03 05:01:03,776:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:03,776:INFO:Checking exceptions
2024-11-03 05:01:03,776:INFO:Preloading libraries
2024-11-03 05:01:03,776:INFO:Set up data.
2024-11-03 05:01:03,780:INFO:Set up index.
2024-11-03 05:01:03,914:INFO:Initializing predict_model()
2024-11-03 05:01:03,915:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026142FA3130>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:03,915:INFO:Checking exceptions
2024-11-03 05:01:03,915:INFO:Preloading libraries
2024-11-03 05:01:03,915:INFO:Set up data.
2024-11-03 05:01:03,920:INFO:Set up index.
2024-11-03 05:01:04,053:INFO:Initializing predict_model()
2024-11-03 05:01:04,054:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:04,054:INFO:Checking exceptions
2024-11-03 05:01:04,054:INFO:Preloading libraries
2024-11-03 05:01:04,054:INFO:Set up data.
2024-11-03 05:01:04,058:INFO:Set up index.
2024-11-03 05:01:04,227:INFO:Initializing predict_model()
2024-11-03 05:01:04,227:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:04,227:INFO:Checking exceptions
2024-11-03 05:01:04,227:INFO:Preloading libraries
2024-11-03 05:01:04,227:INFO:Set up data.
2024-11-03 05:01:04,232:INFO:Set up index.
2024-11-03 05:01:04,405:INFO:Initializing predict_model()
2024-11-03 05:01:04,405:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:04,405:INFO:Checking exceptions
2024-11-03 05:01:04,405:INFO:Preloading libraries
2024-11-03 05:01:04,405:INFO:Set up data.
2024-11-03 05:01:04,410:INFO:Set up index.
2024-11-03 05:01:04,584:INFO:Initializing predict_model()
2024-11-03 05:01:04,585:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:04,585:INFO:Checking exceptions
2024-11-03 05:01:04,585:INFO:Preloading libraries
2024-11-03 05:01:04,585:INFO:Set up data.
2024-11-03 05:01:04,592:INFO:Set up index.
2024-11-03 05:01:04,778:INFO:Initializing predict_model()
2024-11-03 05:01:04,779:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:04,779:INFO:Checking exceptions
2024-11-03 05:01:04,779:INFO:Preloading libraries
2024-11-03 05:01:04,780:INFO:Set up data.
2024-11-03 05:01:04,785:INFO:Set up index.
2024-11-03 05:01:04,946:INFO:Initializing predict_model()
2024-11-03 05:01:04,946:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:04,946:INFO:Checking exceptions
2024-11-03 05:01:04,946:INFO:Preloading libraries
2024-11-03 05:01:04,947:INFO:Set up data.
2024-11-03 05:01:04,952:INFO:Set up index.
2024-11-03 05:01:05,169:INFO:Initializing predict_model()
2024-11-03 05:01:05,169:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:05,169:INFO:Checking exceptions
2024-11-03 05:01:05,169:INFO:Preloading libraries
2024-11-03 05:01:05,170:INFO:Set up data.
2024-11-03 05:01:05,209:INFO:Set up index.
2024-11-03 05:01:05,408:INFO:Initializing predict_model()
2024-11-03 05:01:05,409:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000261486785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:05,409:INFO:Checking exceptions
2024-11-03 05:01:05,410:INFO:Preloading libraries
2024-11-03 05:01:05,410:INFO:Set up data.
2024-11-03 05:01:05,416:INFO:Set up index.
2024-11-03 05:01:05,594:INFO:Initializing predict_model()
2024-11-03 05:01:05,594:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:05,594:INFO:Checking exceptions
2024-11-03 05:01:05,594:INFO:Preloading libraries
2024-11-03 05:01:05,594:INFO:Set up data.
2024-11-03 05:01:05,599:INFO:Set up index.
2024-11-03 05:01:05,761:INFO:Initializing predict_model()
2024-11-03 05:01:05,761:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:05,762:INFO:Checking exceptions
2024-11-03 05:01:05,762:INFO:Preloading libraries
2024-11-03 05:01:05,762:INFO:Set up data.
2024-11-03 05:01:05,767:INFO:Set up index.
2024-11-03 05:01:05,947:INFO:Initializing predict_model()
2024-11-03 05:01:05,947:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:05,947:INFO:Checking exceptions
2024-11-03 05:01:05,947:INFO:Preloading libraries
2024-11-03 05:01:05,948:INFO:Set up data.
2024-11-03 05:01:05,952:INFO:Set up index.
2024-11-03 05:01:06,096:INFO:Initializing predict_model()
2024-11-03 05:01:06,097:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:06,097:INFO:Checking exceptions
2024-11-03 05:01:06,097:INFO:Preloading libraries
2024-11-03 05:01:06,097:INFO:Set up data.
2024-11-03 05:01:06,103:INFO:Set up index.
2024-11-03 05:01:06,232:INFO:Initializing predict_model()
2024-11-03 05:01:06,232:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261486B0160>)
2024-11-03 05:01:06,232:INFO:Checking exceptions
2024-11-03 05:01:06,232:INFO:Preloading libraries
2024-11-03 05:01:06,232:INFO:Set up data.
2024-11-03 05:01:06,243:INFO:Set up index.
2024-11-03 05:01:06,458:INFO:Initializing predict_model()
2024-11-03 05:01:06,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F11550>)
2024-11-03 05:01:06,458:INFO:Checking exceptions
2024-11-03 05:01:06,458:INFO:Preloading libraries
2024-11-03 05:01:06,459:INFO:Set up data.
2024-11-03 05:01:06,463:INFO:Set up index.
2024-11-03 05:01:06,627:INFO:Initializing predict_model()
2024-11-03 05:01:06,628:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026148678A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B310>)
2024-11-03 05:01:06,628:INFO:Checking exceptions
2024-11-03 05:01:06,628:INFO:Preloading libraries
2024-11-03 05:01:06,628:INFO:Set up data.
2024-11-03 05:01:06,633:INFO:Set up index.
2024-11-03 05:01:06,795:INFO:Initializing predict_model()
2024-11-03 05:01:06,796:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002613B026D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026142F3B0D0>)
2024-11-03 05:01:06,796:INFO:Checking exceptions
2024-11-03 05:01:06,796:INFO:Preloading libraries
2024-11-03 05:01:06,796:INFO:Set up data.
2024-11-03 05:01:06,803:INFO:Set up index.
2024-11-03 05:02:57,757:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:02:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:02:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:02:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:02:59,329:INFO:Initializing load_model()
2024-11-03 05:02:59,329:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 05:02:59,562:INFO:Initializing predict_model()
2024-11-03 05:02:59,562:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:02:59,562:INFO:Checking exceptions
2024-11-03 05:02:59,562:INFO:Preloading libraries
2024-11-03 05:02:59,563:INFO:Set up data.
2024-11-03 05:02:59,570:INFO:Set up index.
2024-11-03 05:02:59,723:INFO:Initializing predict_model()
2024-11-03 05:02:59,724:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8BE50>)
2024-11-03 05:02:59,724:INFO:Checking exceptions
2024-11-03 05:02:59,724:INFO:Preloading libraries
2024-11-03 05:02:59,724:INFO:Set up data.
2024-11-03 05:02:59,728:INFO:Set up index.
2024-11-03 05:02:59,866:INFO:Initializing predict_model()
2024-11-03 05:02:59,866:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CD82EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:02:59,866:INFO:Checking exceptions
2024-11-03 05:02:59,866:INFO:Preloading libraries
2024-11-03 05:02:59,866:INFO:Set up data.
2024-11-03 05:02:59,871:INFO:Set up index.
2024-11-03 05:03:00,002:INFO:Initializing predict_model()
2024-11-03 05:03:00,002:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0DFA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:00,002:INFO:Checking exceptions
2024-11-03 05:03:00,002:INFO:Preloading libraries
2024-11-03 05:03:00,003:INFO:Set up data.
2024-11-03 05:03:00,006:INFO:Set up index.
2024-11-03 05:03:00,217:INFO:Initializing predict_model()
2024-11-03 05:03:00,217:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:00,217:INFO:Checking exceptions
2024-11-03 05:03:00,217:INFO:Preloading libraries
2024-11-03 05:03:00,217:INFO:Set up data.
2024-11-03 05:03:00,221:INFO:Set up index.
2024-11-03 05:03:00,368:INFO:Initializing predict_model()
2024-11-03 05:03:00,368:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:00,368:INFO:Checking exceptions
2024-11-03 05:03:00,368:INFO:Preloading libraries
2024-11-03 05:03:00,370:INFO:Set up data.
2024-11-03 05:03:00,374:INFO:Set up index.
2024-11-03 05:03:00,519:INFO:Initializing predict_model()
2024-11-03 05:03:00,519:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:00,520:INFO:Checking exceptions
2024-11-03 05:03:00,520:INFO:Preloading libraries
2024-11-03 05:03:00,520:INFO:Set up data.
2024-11-03 05:03:00,524:INFO:Set up index.
2024-11-03 05:03:00,671:INFO:Initializing predict_model()
2024-11-03 05:03:00,671:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:00,672:INFO:Checking exceptions
2024-11-03 05:03:00,672:INFO:Preloading libraries
2024-11-03 05:03:00,672:INFO:Set up data.
2024-11-03 05:03:00,676:INFO:Set up index.
2024-11-03 05:03:00,934:INFO:Initializing predict_model()
2024-11-03 05:03:00,934:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B1F0>)
2024-11-03 05:03:00,934:INFO:Checking exceptions
2024-11-03 05:03:00,934:INFO:Preloading libraries
2024-11-03 05:03:00,934:INFO:Set up data.
2024-11-03 05:03:00,938:INFO:Set up index.
2024-11-03 05:03:01,206:INFO:Initializing predict_model()
2024-11-03 05:03:01,206:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8BE50>)
2024-11-03 05:03:01,206:INFO:Checking exceptions
2024-11-03 05:03:01,206:INFO:Preloading libraries
2024-11-03 05:03:01,206:INFO:Set up data.
2024-11-03 05:03:01,212:INFO:Set up index.
2024-11-03 05:03:01,355:INFO:Initializing predict_model()
2024-11-03 05:03:01,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:01,355:INFO:Checking exceptions
2024-11-03 05:03:01,356:INFO:Preloading libraries
2024-11-03 05:03:01,356:INFO:Set up data.
2024-11-03 05:03:01,360:INFO:Set up index.
2024-11-03 05:03:01,505:INFO:Initializing predict_model()
2024-11-03 05:03:01,505:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:01,505:INFO:Checking exceptions
2024-11-03 05:03:01,505:INFO:Preloading libraries
2024-11-03 05:03:01,505:INFO:Set up data.
2024-11-03 05:03:01,510:INFO:Set up index.
2024-11-03 05:03:01,644:INFO:Initializing predict_model()
2024-11-03 05:03:01,644:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:01,645:INFO:Checking exceptions
2024-11-03 05:03:01,645:INFO:Preloading libraries
2024-11-03 05:03:01,645:INFO:Set up data.
2024-11-03 05:03:01,649:INFO:Set up index.
2024-11-03 05:03:01,784:INFO:Initializing predict_model()
2024-11-03 05:03:01,784:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:01,784:INFO:Checking exceptions
2024-11-03 05:03:01,784:INFO:Preloading libraries
2024-11-03 05:03:01,785:INFO:Set up data.
2024-11-03 05:03:01,788:INFO:Set up index.
2024-11-03 05:03:01,927:INFO:Initializing predict_model()
2024-11-03 05:03:01,927:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:01,927:INFO:Checking exceptions
2024-11-03 05:03:01,927:INFO:Preloading libraries
2024-11-03 05:03:01,927:INFO:Set up data.
2024-11-03 05:03:01,936:INFO:Set up index.
2024-11-03 05:03:02,085:INFO:Initializing predict_model()
2024-11-03 05:03:02,085:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:02,086:INFO:Checking exceptions
2024-11-03 05:03:02,086:INFO:Preloading libraries
2024-11-03 05:03:02,086:INFO:Set up data.
2024-11-03 05:03:02,090:INFO:Set up index.
2024-11-03 05:03:02,264:INFO:Initializing predict_model()
2024-11-03 05:03:02,264:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B310>)
2024-11-03 05:03:02,264:INFO:Checking exceptions
2024-11-03 05:03:02,264:INFO:Preloading libraries
2024-11-03 05:03:02,265:INFO:Set up data.
2024-11-03 05:03:02,269:INFO:Set up index.
2024-11-03 05:03:02,420:INFO:Initializing predict_model()
2024-11-03 05:03:02,420:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:02,420:INFO:Checking exceptions
2024-11-03 05:03:02,420:INFO:Preloading libraries
2024-11-03 05:03:02,420:INFO:Set up data.
2024-11-03 05:03:02,428:INFO:Set up index.
2024-11-03 05:03:02,561:INFO:Initializing predict_model()
2024-11-03 05:03:02,561:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:02,561:INFO:Checking exceptions
2024-11-03 05:03:02,561:INFO:Preloading libraries
2024-11-03 05:03:02,561:INFO:Set up data.
2024-11-03 05:03:02,573:INFO:Set up index.
2024-11-03 05:03:02,734:INFO:Initializing predict_model()
2024-11-03 05:03:02,734:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:02,734:INFO:Checking exceptions
2024-11-03 05:03:02,734:INFO:Preloading libraries
2024-11-03 05:03:02,735:INFO:Set up data.
2024-11-03 05:03:02,739:INFO:Set up index.
2024-11-03 05:03:02,949:INFO:Initializing predict_model()
2024-11-03 05:03:02,949:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B160>)
2024-11-03 05:03:02,949:INFO:Checking exceptions
2024-11-03 05:03:02,949:INFO:Preloading libraries
2024-11-03 05:03:02,950:INFO:Set up data.
2024-11-03 05:03:02,953:INFO:Set up index.
2024-11-03 05:03:03,154:INFO:Initializing predict_model()
2024-11-03 05:03:03,155:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8BE50>)
2024-11-03 05:03:03,155:INFO:Checking exceptions
2024-11-03 05:03:03,155:INFO:Preloading libraries
2024-11-03 05:03:03,155:INFO:Set up data.
2024-11-03 05:03:03,160:INFO:Set up index.
2024-11-03 05:03:03,293:INFO:Initializing predict_model()
2024-11-03 05:03:03,293:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:03,293:INFO:Checking exceptions
2024-11-03 05:03:03,293:INFO:Preloading libraries
2024-11-03 05:03:03,294:INFO:Set up data.
2024-11-03 05:03:03,298:INFO:Set up index.
2024-11-03 05:03:03,639:INFO:Initializing predict_model()
2024-11-03 05:03:03,639:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:03,639:INFO:Checking exceptions
2024-11-03 05:03:03,639:INFO:Preloading libraries
2024-11-03 05:03:03,640:INFO:Set up data.
2024-11-03 05:03:03,645:INFO:Set up index.
2024-11-03 05:03:03,788:INFO:Initializing predict_model()
2024-11-03 05:03:03,788:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:03,788:INFO:Checking exceptions
2024-11-03 05:03:03,788:INFO:Preloading libraries
2024-11-03 05:03:03,789:INFO:Set up data.
2024-11-03 05:03:03,792:INFO:Set up index.
2024-11-03 05:03:03,968:INFO:Initializing predict_model()
2024-11-03 05:03:03,968:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:03,968:INFO:Checking exceptions
2024-11-03 05:03:03,969:INFO:Preloading libraries
2024-11-03 05:03:03,969:INFO:Set up data.
2024-11-03 05:03:03,987:INFO:Set up index.
2024-11-03 05:03:04,163:INFO:Initializing predict_model()
2024-11-03 05:03:04,163:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:04,163:INFO:Checking exceptions
2024-11-03 05:03:04,164:INFO:Preloading libraries
2024-11-03 05:03:04,164:INFO:Set up data.
2024-11-03 05:03:04,176:INFO:Set up index.
2024-11-03 05:03:04,314:INFO:Initializing predict_model()
2024-11-03 05:03:04,314:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:04,314:INFO:Checking exceptions
2024-11-03 05:03:04,315:INFO:Preloading libraries
2024-11-03 05:03:04,315:INFO:Set up data.
2024-11-03 05:03:04,320:INFO:Set up index.
2024-11-03 05:03:04,463:INFO:Initializing predict_model()
2024-11-03 05:03:04,463:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9F70>)
2024-11-03 05:03:04,463:INFO:Checking exceptions
2024-11-03 05:03:04,464:INFO:Preloading libraries
2024-11-03 05:03:04,464:INFO:Set up data.
2024-11-03 05:03:04,468:INFO:Set up index.
2024-11-03 05:03:04,608:INFO:Initializing predict_model()
2024-11-03 05:03:04,608:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9670>)
2024-11-03 05:03:04,608:INFO:Checking exceptions
2024-11-03 05:03:04,608:INFO:Preloading libraries
2024-11-03 05:03:04,609:INFO:Set up data.
2024-11-03 05:03:04,614:INFO:Set up index.
2024-11-03 05:03:04,749:INFO:Initializing predict_model()
2024-11-03 05:03:04,749:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9790>)
2024-11-03 05:03:04,749:INFO:Checking exceptions
2024-11-03 05:03:04,749:INFO:Preloading libraries
2024-11-03 05:03:04,750:INFO:Set up data.
2024-11-03 05:03:04,755:INFO:Set up index.
2024-11-03 05:03:04,914:INFO:Initializing predict_model()
2024-11-03 05:03:04,915:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:04,915:INFO:Checking exceptions
2024-11-03 05:03:04,915:INFO:Preloading libraries
2024-11-03 05:03:04,915:INFO:Set up data.
2024-11-03 05:03:04,919:INFO:Set up index.
2024-11-03 05:03:05,074:INFO:Initializing predict_model()
2024-11-03 05:03:05,075:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9790>)
2024-11-03 05:03:05,075:INFO:Checking exceptions
2024-11-03 05:03:05,075:INFO:Preloading libraries
2024-11-03 05:03:05,075:INFO:Set up data.
2024-11-03 05:03:05,079:INFO:Set up index.
2024-11-03 05:03:05,218:INFO:Initializing predict_model()
2024-11-03 05:03:05,218:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9820>)
2024-11-03 05:03:05,218:INFO:Checking exceptions
2024-11-03 05:03:05,218:INFO:Preloading libraries
2024-11-03 05:03:05,218:INFO:Set up data.
2024-11-03 05:03:05,223:INFO:Set up index.
2024-11-03 05:03:05,462:INFO:Initializing predict_model()
2024-11-03 05:03:05,462:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:05,462:INFO:Checking exceptions
2024-11-03 05:03:05,463:INFO:Preloading libraries
2024-11-03 05:03:05,463:INFO:Set up data.
2024-11-03 05:03:05,491:INFO:Set up index.
2024-11-03 05:03:05,722:INFO:Initializing predict_model()
2024-11-03 05:03:05,722:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:05,722:INFO:Checking exceptions
2024-11-03 05:03:05,722:INFO:Preloading libraries
2024-11-03 05:03:05,723:INFO:Set up data.
2024-11-03 05:03:05,727:INFO:Set up index.
2024-11-03 05:03:05,854:INFO:Initializing predict_model()
2024-11-03 05:03:05,854:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6C10>)
2024-11-03 05:03:05,854:INFO:Checking exceptions
2024-11-03 05:03:05,854:INFO:Preloading libraries
2024-11-03 05:03:05,855:INFO:Set up data.
2024-11-03 05:03:05,863:INFO:Set up index.
2024-11-03 05:03:06,140:INFO:Initializing predict_model()
2024-11-03 05:03:06,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6790>)
2024-11-03 05:03:06,140:INFO:Checking exceptions
2024-11-03 05:03:06,141:INFO:Preloading libraries
2024-11-03 05:03:06,141:INFO:Set up data.
2024-11-03 05:03:06,185:INFO:Set up index.
2024-11-03 05:03:06,323:INFO:Initializing predict_model()
2024-11-03 05:03:06,323:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:06,323:INFO:Checking exceptions
2024-11-03 05:03:06,323:INFO:Preloading libraries
2024-11-03 05:03:06,323:INFO:Set up data.
2024-11-03 05:03:06,328:INFO:Set up index.
2024-11-03 05:03:06,572:INFO:Initializing predict_model()
2024-11-03 05:03:06,572:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6790>)
2024-11-03 05:03:06,572:INFO:Checking exceptions
2024-11-03 05:03:06,572:INFO:Preloading libraries
2024-11-03 05:03:06,572:INFO:Set up data.
2024-11-03 05:03:06,579:INFO:Set up index.
2024-11-03 05:03:06,797:INFO:Initializing predict_model()
2024-11-03 05:03:06,797:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0DE20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6B80>)
2024-11-03 05:03:06,797:INFO:Checking exceptions
2024-11-03 05:03:06,797:INFO:Preloading libraries
2024-11-03 05:03:06,798:INFO:Set up data.
2024-11-03 05:03:06,802:INFO:Set up index.
2024-11-03 05:03:06,941:INFO:Initializing predict_model()
2024-11-03 05:03:06,941:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:06,941:INFO:Checking exceptions
2024-11-03 05:03:06,941:INFO:Preloading libraries
2024-11-03 05:03:06,941:INFO:Set up data.
2024-11-03 05:03:06,945:INFO:Set up index.
2024-11-03 05:03:07,128:INFO:Initializing predict_model()
2024-11-03 05:03:07,128:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F68B0>)
2024-11-03 05:03:07,128:INFO:Checking exceptions
2024-11-03 05:03:07,129:INFO:Preloading libraries
2024-11-03 05:03:07,129:INFO:Set up data.
2024-11-03 05:03:07,133:INFO:Set up index.
2024-11-03 05:03:07,269:INFO:Initializing predict_model()
2024-11-03 05:03:07,269:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:07,269:INFO:Checking exceptions
2024-11-03 05:03:07,269:INFO:Preloading libraries
2024-11-03 05:03:07,269:INFO:Set up data.
2024-11-03 05:03:07,274:INFO:Set up index.
2024-11-03 05:03:07,448:INFO:Initializing predict_model()
2024-11-03 05:03:07,449:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:07,449:INFO:Checking exceptions
2024-11-03 05:03:07,449:INFO:Preloading libraries
2024-11-03 05:03:07,449:INFO:Set up data.
2024-11-03 05:03:07,453:INFO:Set up index.
2024-11-03 05:03:07,609:INFO:Initializing predict_model()
2024-11-03 05:03:07,609:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:07,610:INFO:Checking exceptions
2024-11-03 05:03:07,610:INFO:Preloading libraries
2024-11-03 05:03:07,610:INFO:Set up data.
2024-11-03 05:03:07,616:INFO:Set up index.
2024-11-03 05:03:07,757:INFO:Initializing predict_model()
2024-11-03 05:03:07,757:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6C10>)
2024-11-03 05:03:07,757:INFO:Checking exceptions
2024-11-03 05:03:07,757:INFO:Preloading libraries
2024-11-03 05:03:07,757:INFO:Set up data.
2024-11-03 05:03:07,761:INFO:Set up index.
2024-11-03 05:03:07,895:INFO:Initializing predict_model()
2024-11-03 05:03:07,895:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:07,895:INFO:Checking exceptions
2024-11-03 05:03:07,895:INFO:Preloading libraries
2024-11-03 05:03:07,895:INFO:Set up data.
2024-11-03 05:03:07,900:INFO:Set up index.
2024-11-03 05:03:08,039:INFO:Initializing predict_model()
2024-11-03 05:03:08,039:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:08,039:INFO:Checking exceptions
2024-11-03 05:03:08,039:INFO:Preloading libraries
2024-11-03 05:03:08,039:INFO:Set up data.
2024-11-03 05:03:08,047:INFO:Set up index.
2024-11-03 05:03:08,193:INFO:Initializing predict_model()
2024-11-03 05:03:08,193:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:08,193:INFO:Checking exceptions
2024-11-03 05:03:08,193:INFO:Preloading libraries
2024-11-03 05:03:08,193:INFO:Set up data.
2024-11-03 05:03:08,197:INFO:Set up index.
2024-11-03 05:03:08,338:INFO:Initializing predict_model()
2024-11-03 05:03:08,338:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:08,338:INFO:Checking exceptions
2024-11-03 05:03:08,339:INFO:Preloading libraries
2024-11-03 05:03:08,339:INFO:Set up data.
2024-11-03 05:03:08,344:INFO:Set up index.
2024-11-03 05:03:08,600:INFO:Initializing predict_model()
2024-11-03 05:03:08,600:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:08,600:INFO:Checking exceptions
2024-11-03 05:03:08,600:INFO:Preloading libraries
2024-11-03 05:03:08,601:INFO:Set up data.
2024-11-03 05:03:08,606:INFO:Set up index.
2024-11-03 05:03:08,801:INFO:Initializing predict_model()
2024-11-03 05:03:08,801:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:08,801:INFO:Checking exceptions
2024-11-03 05:03:08,801:INFO:Preloading libraries
2024-11-03 05:03:08,801:INFO:Set up data.
2024-11-03 05:03:08,806:INFO:Set up index.
2024-11-03 05:03:08,939:INFO:Initializing predict_model()
2024-11-03 05:03:08,939:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DF20A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:08,939:INFO:Checking exceptions
2024-11-03 05:03:08,939:INFO:Preloading libraries
2024-11-03 05:03:08,940:INFO:Set up data.
2024-11-03 05:03:08,943:INFO:Set up index.
2024-11-03 05:03:09,086:INFO:Initializing predict_model()
2024-11-03 05:03:09,087:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:09,087:INFO:Checking exceptions
2024-11-03 05:03:09,087:INFO:Preloading libraries
2024-11-03 05:03:09,087:INFO:Set up data.
2024-11-03 05:03:09,091:INFO:Set up index.
2024-11-03 05:03:09,236:INFO:Initializing predict_model()
2024-11-03 05:03:09,236:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:09,236:INFO:Checking exceptions
2024-11-03 05:03:09,237:INFO:Preloading libraries
2024-11-03 05:03:09,237:INFO:Set up data.
2024-11-03 05:03:09,241:INFO:Set up index.
2024-11-03 05:03:09,381:INFO:Initializing predict_model()
2024-11-03 05:03:09,381:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DF2700>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:09,381:INFO:Checking exceptions
2024-11-03 05:03:09,381:INFO:Preloading libraries
2024-11-03 05:03:09,382:INFO:Set up data.
2024-11-03 05:03:09,387:INFO:Set up index.
2024-11-03 05:03:09,538:INFO:Initializing predict_model()
2024-11-03 05:03:09,538:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:09,538:INFO:Checking exceptions
2024-11-03 05:03:09,538:INFO:Preloading libraries
2024-11-03 05:03:09,539:INFO:Set up data.
2024-11-03 05:03:09,543:INFO:Set up index.
2024-11-03 05:03:09,863:INFO:Initializing predict_model()
2024-11-03 05:03:09,863:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:09,863:INFO:Checking exceptions
2024-11-03 05:03:09,863:INFO:Preloading libraries
2024-11-03 05:03:09,864:INFO:Set up data.
2024-11-03 05:03:09,869:INFO:Set up index.
2024-11-03 05:03:10,019:INFO:Initializing predict_model()
2024-11-03 05:03:10,019:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6700>)
2024-11-03 05:03:10,019:INFO:Checking exceptions
2024-11-03 05:03:10,019:INFO:Preloading libraries
2024-11-03 05:03:10,019:INFO:Set up data.
2024-11-03 05:03:10,023:INFO:Set up index.
2024-11-03 05:03:10,193:INFO:Initializing predict_model()
2024-11-03 05:03:10,193:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F68B0>)
2024-11-03 05:03:10,193:INFO:Checking exceptions
2024-11-03 05:03:10,193:INFO:Preloading libraries
2024-11-03 05:03:10,194:INFO:Set up data.
2024-11-03 05:03:10,200:INFO:Set up index.
2024-11-03 05:03:10,339:INFO:Initializing predict_model()
2024-11-03 05:03:10,339:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:10,339:INFO:Checking exceptions
2024-11-03 05:03:10,339:INFO:Preloading libraries
2024-11-03 05:03:10,340:INFO:Set up data.
2024-11-03 05:03:10,343:INFO:Set up index.
2024-11-03 05:03:10,481:INFO:Initializing predict_model()
2024-11-03 05:03:10,481:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:10,481:INFO:Checking exceptions
2024-11-03 05:03:10,481:INFO:Preloading libraries
2024-11-03 05:03:10,481:INFO:Set up data.
2024-11-03 05:03:10,487:INFO:Set up index.
2024-11-03 05:03:10,757:INFO:Initializing predict_model()
2024-11-03 05:03:10,757:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:10,757:INFO:Checking exceptions
2024-11-03 05:03:10,757:INFO:Preloading libraries
2024-11-03 05:03:10,757:INFO:Set up data.
2024-11-03 05:03:10,761:INFO:Set up index.
2024-11-03 05:03:10,892:INFO:Initializing predict_model()
2024-11-03 05:03:10,892:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:10,893:INFO:Checking exceptions
2024-11-03 05:03:10,893:INFO:Preloading libraries
2024-11-03 05:03:10,893:INFO:Set up data.
2024-11-03 05:03:10,899:INFO:Set up index.
2024-11-03 05:03:11,037:INFO:Initializing predict_model()
2024-11-03 05:03:11,037:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:11,037:INFO:Checking exceptions
2024-11-03 05:03:11,038:INFO:Preloading libraries
2024-11-03 05:03:11,038:INFO:Set up data.
2024-11-03 05:03:11,042:INFO:Set up index.
2024-11-03 05:03:11,198:INFO:Initializing predict_model()
2024-11-03 05:03:11,198:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:11,198:INFO:Checking exceptions
2024-11-03 05:03:11,199:INFO:Preloading libraries
2024-11-03 05:03:11,199:INFO:Set up data.
2024-11-03 05:03:11,203:INFO:Set up index.
2024-11-03 05:03:11,335:INFO:Initializing predict_model()
2024-11-03 05:03:11,336:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:11,336:INFO:Checking exceptions
2024-11-03 05:03:11,336:INFO:Preloading libraries
2024-11-03 05:03:11,336:INFO:Set up data.
2024-11-03 05:03:11,341:INFO:Set up index.
2024-11-03 05:03:11,470:INFO:Initializing predict_model()
2024-11-03 05:03:11,470:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9820>)
2024-11-03 05:03:11,470:INFO:Checking exceptions
2024-11-03 05:03:11,470:INFO:Preloading libraries
2024-11-03 05:03:11,471:INFO:Set up data.
2024-11-03 05:03:11,475:INFO:Set up index.
2024-11-03 05:03:11,705:INFO:Initializing predict_model()
2024-11-03 05:03:11,705:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:11,705:INFO:Checking exceptions
2024-11-03 05:03:11,705:INFO:Preloading libraries
2024-11-03 05:03:11,706:INFO:Set up data.
2024-11-03 05:03:11,711:INFO:Set up index.
2024-11-03 05:03:11,905:INFO:Initializing predict_model()
2024-11-03 05:03:11,905:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:11,905:INFO:Checking exceptions
2024-11-03 05:03:11,905:INFO:Preloading libraries
2024-11-03 05:03:11,906:INFO:Set up data.
2024-11-03 05:03:11,913:INFO:Set up index.
2024-11-03 05:03:12,047:INFO:Initializing predict_model()
2024-11-03 05:03:12,047:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:12,048:INFO:Checking exceptions
2024-11-03 05:03:12,048:INFO:Preloading libraries
2024-11-03 05:03:12,049:INFO:Set up data.
2024-11-03 05:03:12,055:INFO:Set up index.
2024-11-03 05:03:12,194:INFO:Initializing predict_model()
2024-11-03 05:03:12,194:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:12,194:INFO:Checking exceptions
2024-11-03 05:03:12,194:INFO:Preloading libraries
2024-11-03 05:03:12,196:INFO:Set up data.
2024-11-03 05:03:12,205:INFO:Set up index.
2024-11-03 05:03:12,340:INFO:Initializing predict_model()
2024-11-03 05:03:12,340:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:12,340:INFO:Checking exceptions
2024-11-03 05:03:12,340:INFO:Preloading libraries
2024-11-03 05:03:12,340:INFO:Set up data.
2024-11-03 05:03:12,346:INFO:Set up index.
2024-11-03 05:03:12,481:INFO:Initializing predict_model()
2024-11-03 05:03:12,481:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:12,481:INFO:Checking exceptions
2024-11-03 05:03:12,481:INFO:Preloading libraries
2024-11-03 05:03:12,481:INFO:Set up data.
2024-11-03 05:03:12,487:INFO:Set up index.
2024-11-03 05:03:12,626:INFO:Initializing predict_model()
2024-11-03 05:03:12,626:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:12,626:INFO:Checking exceptions
2024-11-03 05:03:12,626:INFO:Preloading libraries
2024-11-03 05:03:12,626:INFO:Set up data.
2024-11-03 05:03:12,633:INFO:Set up index.
2024-11-03 05:03:12,983:INFO:Initializing predict_model()
2024-11-03 05:03:12,983:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9820>)
2024-11-03 05:03:12,983:INFO:Checking exceptions
2024-11-03 05:03:12,983:INFO:Preloading libraries
2024-11-03 05:03:12,984:INFO:Set up data.
2024-11-03 05:03:12,987:INFO:Set up index.
2024-11-03 05:03:13,126:INFO:Initializing predict_model()
2024-11-03 05:03:13,126:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:13,126:INFO:Checking exceptions
2024-11-03 05:03:13,126:INFO:Preloading libraries
2024-11-03 05:03:13,131:INFO:Set up data.
2024-11-03 05:03:13,137:INFO:Set up index.
2024-11-03 05:03:13,328:INFO:Initializing predict_model()
2024-11-03 05:03:13,328:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:13,328:INFO:Checking exceptions
2024-11-03 05:03:13,329:INFO:Preloading libraries
2024-11-03 05:03:13,329:INFO:Set up data.
2024-11-03 05:03:13,332:INFO:Set up index.
2024-11-03 05:03:13,464:INFO:Initializing predict_model()
2024-11-03 05:03:13,464:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:13,464:INFO:Checking exceptions
2024-11-03 05:03:13,464:INFO:Preloading libraries
2024-11-03 05:03:13,464:INFO:Set up data.
2024-11-03 05:03:13,469:INFO:Set up index.
2024-11-03 05:03:13,603:INFO:Initializing predict_model()
2024-11-03 05:03:13,603:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:13,603:INFO:Checking exceptions
2024-11-03 05:03:13,604:INFO:Preloading libraries
2024-11-03 05:03:13,604:INFO:Set up data.
2024-11-03 05:03:13,608:INFO:Set up index.
2024-11-03 05:03:13,745:INFO:Initializing predict_model()
2024-11-03 05:03:13,745:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:13,745:INFO:Checking exceptions
2024-11-03 05:03:13,745:INFO:Preloading libraries
2024-11-03 05:03:13,745:INFO:Set up data.
2024-11-03 05:03:13,749:INFO:Set up index.
2024-11-03 05:03:13,874:INFO:Initializing predict_model()
2024-11-03 05:03:13,874:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:13,874:INFO:Checking exceptions
2024-11-03 05:03:13,874:INFO:Preloading libraries
2024-11-03 05:03:13,874:INFO:Set up data.
2024-11-03 05:03:13,879:INFO:Set up index.
2024-11-03 05:03:14,017:INFO:Initializing predict_model()
2024-11-03 05:03:14,017:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:14,017:INFO:Checking exceptions
2024-11-03 05:03:14,017:INFO:Preloading libraries
2024-11-03 05:03:14,018:INFO:Set up data.
2024-11-03 05:03:14,023:INFO:Set up index.
2024-11-03 05:03:14,185:INFO:Initializing predict_model()
2024-11-03 05:03:14,185:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:14,185:INFO:Checking exceptions
2024-11-03 05:03:14,185:INFO:Preloading libraries
2024-11-03 05:03:14,186:INFO:Set up data.
2024-11-03 05:03:14,189:INFO:Set up index.
2024-11-03 05:03:14,336:INFO:Initializing predict_model()
2024-11-03 05:03:14,336:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:14,336:INFO:Checking exceptions
2024-11-03 05:03:14,336:INFO:Preloading libraries
2024-11-03 05:03:14,336:INFO:Set up data.
2024-11-03 05:03:14,341:INFO:Set up index.
2024-11-03 05:03:14,496:INFO:Initializing predict_model()
2024-11-03 05:03:14,496:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:14,496:INFO:Checking exceptions
2024-11-03 05:03:14,496:INFO:Preloading libraries
2024-11-03 05:03:14,497:INFO:Set up data.
2024-11-03 05:03:14,502:INFO:Set up index.
2024-11-03 05:03:14,736:INFO:Initializing predict_model()
2024-11-03 05:03:14,736:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:14,736:INFO:Checking exceptions
2024-11-03 05:03:14,736:INFO:Preloading libraries
2024-11-03 05:03:14,736:INFO:Set up data.
2024-11-03 05:03:14,740:INFO:Set up index.
2024-11-03 05:03:14,900:INFO:Initializing predict_model()
2024-11-03 05:03:14,900:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B160>)
2024-11-03 05:03:14,900:INFO:Checking exceptions
2024-11-03 05:03:14,900:INFO:Preloading libraries
2024-11-03 05:03:14,900:INFO:Set up data.
2024-11-03 05:03:14,906:INFO:Set up index.
2024-11-03 05:03:15,048:INFO:Initializing predict_model()
2024-11-03 05:03:15,048:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B1F0>)
2024-11-03 05:03:15,048:INFO:Checking exceptions
2024-11-03 05:03:15,048:INFO:Preloading libraries
2024-11-03 05:03:15,048:INFO:Set up data.
2024-11-03 05:03:15,053:INFO:Set up index.
2024-11-03 05:03:15,302:INFO:Initializing predict_model()
2024-11-03 05:03:15,303:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:15,303:INFO:Checking exceptions
2024-11-03 05:03:15,303:INFO:Preloading libraries
2024-11-03 05:03:15,303:INFO:Set up data.
2024-11-03 05:03:15,309:INFO:Set up index.
2024-11-03 05:03:15,501:INFO:Initializing predict_model()
2024-11-03 05:03:15,501:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:15,501:INFO:Checking exceptions
2024-11-03 05:03:15,501:INFO:Preloading libraries
2024-11-03 05:03:15,502:INFO:Set up data.
2024-11-03 05:03:15,506:INFO:Set up index.
2024-11-03 05:03:15,657:INFO:Initializing predict_model()
2024-11-03 05:03:15,657:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DF2C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:15,657:INFO:Checking exceptions
2024-11-03 05:03:15,657:INFO:Preloading libraries
2024-11-03 05:03:15,657:INFO:Set up data.
2024-11-03 05:03:15,661:INFO:Set up index.
2024-11-03 05:03:15,807:INFO:Initializing predict_model()
2024-11-03 05:03:15,807:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DF2670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:15,807:INFO:Checking exceptions
2024-11-03 05:03:15,807:INFO:Preloading libraries
2024-11-03 05:03:15,808:INFO:Set up data.
2024-11-03 05:03:15,812:INFO:Set up index.
2024-11-03 05:03:15,946:INFO:Initializing predict_model()
2024-11-03 05:03:15,946:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F64C0>)
2024-11-03 05:03:15,946:INFO:Checking exceptions
2024-11-03 05:03:15,946:INFO:Preloading libraries
2024-11-03 05:03:15,946:INFO:Set up data.
2024-11-03 05:03:15,950:INFO:Set up index.
2024-11-03 05:03:16,087:INFO:Initializing predict_model()
2024-11-03 05:03:16,087:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:16,087:INFO:Checking exceptions
2024-11-03 05:03:16,087:INFO:Preloading libraries
2024-11-03 05:03:16,088:INFO:Set up data.
2024-11-03 05:03:16,092:INFO:Set up index.
2024-11-03 05:03:16,246:INFO:Initializing predict_model()
2024-11-03 05:03:16,246:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:16,246:INFO:Checking exceptions
2024-11-03 05:03:16,246:INFO:Preloading libraries
2024-11-03 05:03:16,246:INFO:Set up data.
2024-11-03 05:03:16,254:INFO:Set up index.
2024-11-03 05:03:16,403:INFO:Initializing predict_model()
2024-11-03 05:03:16,404:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:16,404:INFO:Checking exceptions
2024-11-03 05:03:16,404:INFO:Preloading libraries
2024-11-03 05:03:16,404:INFO:Set up data.
2024-11-03 05:03:16,409:INFO:Set up index.
2024-11-03 05:03:16,557:INFO:Initializing predict_model()
2024-11-03 05:03:16,557:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:16,557:INFO:Checking exceptions
2024-11-03 05:03:16,557:INFO:Preloading libraries
2024-11-03 05:03:16,557:INFO:Set up data.
2024-11-03 05:03:16,561:INFO:Set up index.
2024-11-03 05:03:16,698:INFO:Initializing predict_model()
2024-11-03 05:03:16,698:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:16,698:INFO:Checking exceptions
2024-11-03 05:03:16,698:INFO:Preloading libraries
2024-11-03 05:03:16,699:INFO:Set up data.
2024-11-03 05:03:16,703:INFO:Set up index.
2024-11-03 05:03:16,848:INFO:Initializing predict_model()
2024-11-03 05:03:16,848:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6820>)
2024-11-03 05:03:16,848:INFO:Checking exceptions
2024-11-03 05:03:16,848:INFO:Preloading libraries
2024-11-03 05:03:16,849:INFO:Set up data.
2024-11-03 05:03:16,852:INFO:Set up index.
2024-11-03 05:03:16,988:INFO:Initializing predict_model()
2024-11-03 05:03:16,988:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:16,988:INFO:Checking exceptions
2024-11-03 05:03:16,988:INFO:Preloading libraries
2024-11-03 05:03:16,989:INFO:Set up data.
2024-11-03 05:03:16,993:INFO:Set up index.
2024-11-03 05:03:17,130:INFO:Initializing predict_model()
2024-11-03 05:03:17,130:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:17,130:INFO:Checking exceptions
2024-11-03 05:03:17,130:INFO:Preloading libraries
2024-11-03 05:03:17,131:INFO:Set up data.
2024-11-03 05:03:17,135:INFO:Set up index.
2024-11-03 05:03:17,364:INFO:Initializing predict_model()
2024-11-03 05:03:17,364:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:17,364:INFO:Checking exceptions
2024-11-03 05:03:17,364:INFO:Preloading libraries
2024-11-03 05:03:17,365:INFO:Set up data.
2024-11-03 05:03:17,368:INFO:Set up index.
2024-11-03 05:03:17,535:INFO:Initializing predict_model()
2024-11-03 05:03:17,536:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:17,536:INFO:Checking exceptions
2024-11-03 05:03:17,536:INFO:Preloading libraries
2024-11-03 05:03:17,536:INFO:Set up data.
2024-11-03 05:03:17,540:INFO:Set up index.
2024-11-03 05:03:17,674:INFO:Initializing predict_model()
2024-11-03 05:03:17,674:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:17,674:INFO:Checking exceptions
2024-11-03 05:03:17,675:INFO:Preloading libraries
2024-11-03 05:03:17,675:INFO:Set up data.
2024-11-03 05:03:17,680:INFO:Set up index.
2024-11-03 05:03:18,007:INFO:Initializing predict_model()
2024-11-03 05:03:18,007:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:18,008:INFO:Checking exceptions
2024-11-03 05:03:18,008:INFO:Preloading libraries
2024-11-03 05:03:18,008:INFO:Set up data.
2024-11-03 05:03:18,015:INFO:Set up index.
2024-11-03 05:03:18,164:INFO:Initializing predict_model()
2024-11-03 05:03:18,164:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:18,164:INFO:Checking exceptions
2024-11-03 05:03:18,164:INFO:Preloading libraries
2024-11-03 05:03:18,165:INFO:Set up data.
2024-11-03 05:03:18,168:INFO:Set up index.
2024-11-03 05:03:18,328:INFO:Initializing predict_model()
2024-11-03 05:03:18,329:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:18,329:INFO:Checking exceptions
2024-11-03 05:03:18,329:INFO:Preloading libraries
2024-11-03 05:03:18,329:INFO:Set up data.
2024-11-03 05:03:18,336:INFO:Set up index.
2024-11-03 05:03:18,480:INFO:Initializing predict_model()
2024-11-03 05:03:18,480:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:18,480:INFO:Checking exceptions
2024-11-03 05:03:18,480:INFO:Preloading libraries
2024-11-03 05:03:18,481:INFO:Set up data.
2024-11-03 05:03:18,487:INFO:Set up index.
2024-11-03 05:03:18,631:INFO:Initializing predict_model()
2024-11-03 05:03:18,631:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:18,631:INFO:Checking exceptions
2024-11-03 05:03:18,631:INFO:Preloading libraries
2024-11-03 05:03:18,631:INFO:Set up data.
2024-11-03 05:03:18,636:INFO:Set up index.
2024-11-03 05:03:18,797:INFO:Initializing predict_model()
2024-11-03 05:03:18,797:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:18,798:INFO:Checking exceptions
2024-11-03 05:03:18,798:INFO:Preloading libraries
2024-11-03 05:03:18,798:INFO:Set up data.
2024-11-03 05:03:18,802:INFO:Set up index.
2024-11-03 05:03:18,942:INFO:Initializing predict_model()
2024-11-03 05:03:18,942:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:18,942:INFO:Checking exceptions
2024-11-03 05:03:18,943:INFO:Preloading libraries
2024-11-03 05:03:18,943:INFO:Set up data.
2024-11-03 05:03:18,948:INFO:Set up index.
2024-11-03 05:03:19,100:INFO:Initializing predict_model()
2024-11-03 05:03:19,101:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:19,101:INFO:Checking exceptions
2024-11-03 05:03:19,101:INFO:Preloading libraries
2024-11-03 05:03:19,101:INFO:Set up data.
2024-11-03 05:03:19,105:INFO:Set up index.
2024-11-03 05:03:19,261:INFO:Initializing predict_model()
2024-11-03 05:03:19,261:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6EE0>)
2024-11-03 05:03:19,261:INFO:Checking exceptions
2024-11-03 05:03:19,261:INFO:Preloading libraries
2024-11-03 05:03:19,261:INFO:Set up data.
2024-11-03 05:03:19,265:INFO:Set up index.
2024-11-03 05:03:19,399:INFO:Initializing predict_model()
2024-11-03 05:03:19,400:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6F70>)
2024-11-03 05:03:19,400:INFO:Checking exceptions
2024-11-03 05:03:19,400:INFO:Preloading libraries
2024-11-03 05:03:19,400:INFO:Set up data.
2024-11-03 05:03:19,404:INFO:Set up index.
2024-11-03 05:03:19,541:INFO:Initializing predict_model()
2024-11-03 05:03:19,541:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6790>)
2024-11-03 05:03:19,541:INFO:Checking exceptions
2024-11-03 05:03:19,541:INFO:Preloading libraries
2024-11-03 05:03:19,541:INFO:Set up data.
2024-11-03 05:03:19,545:INFO:Set up index.
2024-11-03 05:03:19,676:INFO:Initializing predict_model()
2024-11-03 05:03:19,677:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:19,677:INFO:Checking exceptions
2024-11-03 05:03:19,677:INFO:Preloading libraries
2024-11-03 05:03:19,677:INFO:Set up data.
2024-11-03 05:03:19,681:INFO:Set up index.
2024-11-03 05:03:19,945:INFO:Initializing predict_model()
2024-11-03 05:03:19,946:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:19,946:INFO:Checking exceptions
2024-11-03 05:03:19,946:INFO:Preloading libraries
2024-11-03 05:03:19,946:INFO:Set up data.
2024-11-03 05:03:19,953:INFO:Set up index.
2024-11-03 05:03:20,081:INFO:Initializing predict_model()
2024-11-03 05:03:20,081:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9280>)
2024-11-03 05:03:20,081:INFO:Checking exceptions
2024-11-03 05:03:20,081:INFO:Preloading libraries
2024-11-03 05:03:20,082:INFO:Set up data.
2024-11-03 05:03:20,085:INFO:Set up index.
2024-11-03 05:03:20,224:INFO:Initializing predict_model()
2024-11-03 05:03:20,224:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:20,224:INFO:Checking exceptions
2024-11-03 05:03:20,225:INFO:Preloading libraries
2024-11-03 05:03:20,225:INFO:Set up data.
2024-11-03 05:03:20,229:INFO:Set up index.
2024-11-03 05:03:20,493:INFO:Initializing predict_model()
2024-11-03 05:03:20,494:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:20,494:INFO:Checking exceptions
2024-11-03 05:03:20,494:INFO:Preloading libraries
2024-11-03 05:03:20,494:INFO:Set up data.
2024-11-03 05:03:20,500:INFO:Set up index.
2024-11-03 05:03:20,649:INFO:Initializing predict_model()
2024-11-03 05:03:20,649:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:20,650:INFO:Checking exceptions
2024-11-03 05:03:20,650:INFO:Preloading libraries
2024-11-03 05:03:20,650:INFO:Set up data.
2024-11-03 05:03:20,654:INFO:Set up index.
2024-11-03 05:03:20,789:INFO:Initializing predict_model()
2024-11-03 05:03:20,789:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:20,789:INFO:Checking exceptions
2024-11-03 05:03:20,789:INFO:Preloading libraries
2024-11-03 05:03:20,790:INFO:Set up data.
2024-11-03 05:03:20,793:INFO:Set up index.
2024-11-03 05:03:20,930:INFO:Initializing predict_model()
2024-11-03 05:03:20,930:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:20,930:INFO:Checking exceptions
2024-11-03 05:03:20,930:INFO:Preloading libraries
2024-11-03 05:03:20,930:INFO:Set up data.
2024-11-03 05:03:20,934:INFO:Set up index.
2024-11-03 05:03:21,068:INFO:Initializing predict_model()
2024-11-03 05:03:21,069:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:21,069:INFO:Checking exceptions
2024-11-03 05:03:21,069:INFO:Preloading libraries
2024-11-03 05:03:21,069:INFO:Set up data.
2024-11-03 05:03:21,072:INFO:Set up index.
2024-11-03 05:03:21,214:INFO:Initializing predict_model()
2024-11-03 05:03:21,214:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:21,214:INFO:Checking exceptions
2024-11-03 05:03:21,214:INFO:Preloading libraries
2024-11-03 05:03:21,214:INFO:Set up data.
2024-11-03 05:03:21,218:INFO:Set up index.
2024-11-03 05:03:21,374:INFO:Initializing predict_model()
2024-11-03 05:03:21,374:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:21,375:INFO:Checking exceptions
2024-11-03 05:03:21,375:INFO:Preloading libraries
2024-11-03 05:03:21,377:INFO:Set up data.
2024-11-03 05:03:21,382:INFO:Set up index.
2024-11-03 05:03:21,518:INFO:Initializing predict_model()
2024-11-03 05:03:21,518:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:21,519:INFO:Checking exceptions
2024-11-03 05:03:21,519:INFO:Preloading libraries
2024-11-03 05:03:21,519:INFO:Set up data.
2024-11-03 05:03:21,522:INFO:Set up index.
2024-11-03 05:03:21,656:INFO:Initializing predict_model()
2024-11-03 05:03:21,656:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4DB9280>)
2024-11-03 05:03:21,656:INFO:Checking exceptions
2024-11-03 05:03:21,656:INFO:Preloading libraries
2024-11-03 05:03:21,656:INFO:Set up data.
2024-11-03 05:03:21,660:INFO:Set up index.
2024-11-03 05:03:21,800:INFO:Initializing predict_model()
2024-11-03 05:03:21,800:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:21,801:INFO:Checking exceptions
2024-11-03 05:03:21,801:INFO:Preloading libraries
2024-11-03 05:03:21,801:INFO:Set up data.
2024-11-03 05:03:21,805:INFO:Set up index.
2024-11-03 05:03:21,944:INFO:Initializing predict_model()
2024-11-03 05:03:21,944:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:21,944:INFO:Checking exceptions
2024-11-03 05:03:21,944:INFO:Preloading libraries
2024-11-03 05:03:21,945:INFO:Set up data.
2024-11-03 05:03:21,948:INFO:Set up index.
2024-11-03 05:03:22,080:INFO:Initializing predict_model()
2024-11-03 05:03:22,080:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:22,080:INFO:Checking exceptions
2024-11-03 05:03:22,080:INFO:Preloading libraries
2024-11-03 05:03:22,081:INFO:Set up data.
2024-11-03 05:03:22,085:INFO:Set up index.
2024-11-03 05:03:22,221:INFO:Initializing predict_model()
2024-11-03 05:03:22,222:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0D970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:22,222:INFO:Checking exceptions
2024-11-03 05:03:22,222:INFO:Preloading libraries
2024-11-03 05:03:22,222:INFO:Set up data.
2024-11-03 05:03:22,226:INFO:Set up index.
2024-11-03 05:03:22,566:INFO:Initializing predict_model()
2024-11-03 05:03:22,566:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:22,567:INFO:Checking exceptions
2024-11-03 05:03:22,567:INFO:Preloading libraries
2024-11-03 05:03:22,567:INFO:Set up data.
2024-11-03 05:03:22,571:INFO:Set up index.
2024-11-03 05:03:22,709:INFO:Initializing predict_model()
2024-11-03 05:03:22,710:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:22,710:INFO:Checking exceptions
2024-11-03 05:03:22,710:INFO:Preloading libraries
2024-11-03 05:03:22,710:INFO:Set up data.
2024-11-03 05:03:22,715:INFO:Set up index.
2024-11-03 05:03:22,865:INFO:Initializing predict_model()
2024-11-03 05:03:22,865:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:22,865:INFO:Checking exceptions
2024-11-03 05:03:22,865:INFO:Preloading libraries
2024-11-03 05:03:22,865:INFO:Set up data.
2024-11-03 05:03:22,869:INFO:Set up index.
2024-11-03 05:03:23,038:INFO:Initializing predict_model()
2024-11-03 05:03:23,038:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:23,038:INFO:Checking exceptions
2024-11-03 05:03:23,038:INFO:Preloading libraries
2024-11-03 05:03:23,039:INFO:Set up data.
2024-11-03 05:03:23,044:INFO:Set up index.
2024-11-03 05:03:23,191:INFO:Initializing predict_model()
2024-11-03 05:03:23,191:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D61550>)
2024-11-03 05:03:23,191:INFO:Checking exceptions
2024-11-03 05:03:23,192:INFO:Preloading libraries
2024-11-03 05:03:23,192:INFO:Set up data.
2024-11-03 05:03:23,196:INFO:Set up index.
2024-11-03 05:03:23,324:INFO:Initializing predict_model()
2024-11-03 05:03:23,324:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:23,324:INFO:Checking exceptions
2024-11-03 05:03:23,324:INFO:Preloading libraries
2024-11-03 05:03:23,325:INFO:Set up data.
2024-11-03 05:03:23,328:INFO:Set up index.
2024-11-03 05:03:23,719:INFO:Initializing predict_model()
2024-11-03 05:03:23,719:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B160>)
2024-11-03 05:03:23,719:INFO:Checking exceptions
2024-11-03 05:03:23,719:INFO:Preloading libraries
2024-11-03 05:03:23,719:INFO:Set up data.
2024-11-03 05:03:23,723:INFO:Set up index.
2024-11-03 05:03:23,858:INFO:Initializing predict_model()
2024-11-03 05:03:23,858:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:23,858:INFO:Checking exceptions
2024-11-03 05:03:23,858:INFO:Preloading libraries
2024-11-03 05:03:23,858:INFO:Set up data.
2024-11-03 05:03:23,863:INFO:Set up index.
2024-11-03 05:03:24,033:INFO:Initializing predict_model()
2024-11-03 05:03:24,033:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:24,033:INFO:Checking exceptions
2024-11-03 05:03:24,033:INFO:Preloading libraries
2024-11-03 05:03:24,033:INFO:Set up data.
2024-11-03 05:03:24,037:INFO:Set up index.
2024-11-03 05:03:24,175:INFO:Initializing predict_model()
2024-11-03 05:03:24,176:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0D0A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:24,176:INFO:Checking exceptions
2024-11-03 05:03:24,176:INFO:Preloading libraries
2024-11-03 05:03:24,176:INFO:Set up data.
2024-11-03 05:03:24,180:INFO:Set up index.
2024-11-03 05:03:24,313:INFO:Initializing predict_model()
2024-11-03 05:03:24,313:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:24,313:INFO:Checking exceptions
2024-11-03 05:03:24,313:INFO:Preloading libraries
2024-11-03 05:03:24,313:INFO:Set up data.
2024-11-03 05:03:24,317:INFO:Set up index.
2024-11-03 05:03:24,458:INFO:Initializing predict_model()
2024-11-03 05:03:24,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4F6310>)
2024-11-03 05:03:24,458:INFO:Checking exceptions
2024-11-03 05:03:24,458:INFO:Preloading libraries
2024-11-03 05:03:24,458:INFO:Set up data.
2024-11-03 05:03:24,463:INFO:Set up index.
2024-11-03 05:03:24,612:INFO:Initializing predict_model()
2024-11-03 05:03:24,612:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:24,612:INFO:Checking exceptions
2024-11-03 05:03:24,612:INFO:Preloading libraries
2024-11-03 05:03:24,612:INFO:Set up data.
2024-11-03 05:03:24,617:INFO:Set up index.
2024-11-03 05:03:24,749:INFO:Initializing predict_model()
2024-11-03 05:03:24,749:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50BF70>)
2024-11-03 05:03:24,749:INFO:Checking exceptions
2024-11-03 05:03:24,749:INFO:Preloading libraries
2024-11-03 05:03:24,749:INFO:Set up data.
2024-11-03 05:03:24,754:INFO:Set up index.
2024-11-03 05:03:24,898:INFO:Initializing predict_model()
2024-11-03 05:03:24,898:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:24,899:INFO:Checking exceptions
2024-11-03 05:03:24,899:INFO:Preloading libraries
2024-11-03 05:03:24,899:INFO:Set up data.
2024-11-03 05:03:24,903:INFO:Set up index.
2024-11-03 05:03:25,048:INFO:Initializing predict_model()
2024-11-03 05:03:25,048:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50BF70>)
2024-11-03 05:03:25,048:INFO:Checking exceptions
2024-11-03 05:03:25,048:INFO:Preloading libraries
2024-11-03 05:03:25,048:INFO:Set up data.
2024-11-03 05:03:25,055:INFO:Set up index.
2024-11-03 05:03:25,193:INFO:Initializing predict_model()
2024-11-03 05:03:25,194:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:25,194:INFO:Checking exceptions
2024-11-03 05:03:25,194:INFO:Preloading libraries
2024-11-03 05:03:25,194:INFO:Set up data.
2024-11-03 05:03:25,199:INFO:Set up index.
2024-11-03 05:03:25,335:INFO:Initializing predict_model()
2024-11-03 05:03:25,335:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50BF70>)
2024-11-03 05:03:25,335:INFO:Checking exceptions
2024-11-03 05:03:25,335:INFO:Preloading libraries
2024-11-03 05:03:25,336:INFO:Set up data.
2024-11-03 05:03:25,358:INFO:Set up index.
2024-11-03 05:03:25,706:INFO:Initializing predict_model()
2024-11-03 05:03:25,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50BD30>)
2024-11-03 05:03:25,707:INFO:Checking exceptions
2024-11-03 05:03:25,707:INFO:Preloading libraries
2024-11-03 05:03:25,707:INFO:Set up data.
2024-11-03 05:03:25,711:INFO:Set up index.
2024-11-03 05:03:25,847:INFO:Initializing predict_model()
2024-11-03 05:03:25,847:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:25,847:INFO:Checking exceptions
2024-11-03 05:03:25,847:INFO:Preloading libraries
2024-11-03 05:03:25,847:INFO:Set up data.
2024-11-03 05:03:25,852:INFO:Set up index.
2024-11-03 05:03:26,033:INFO:Initializing predict_model()
2024-11-03 05:03:26,033:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:26,033:INFO:Checking exceptions
2024-11-03 05:03:26,033:INFO:Preloading libraries
2024-11-03 05:03:26,034:INFO:Set up data.
2024-11-03 05:03:26,039:INFO:Set up index.
2024-11-03 05:03:26,190:INFO:Initializing predict_model()
2024-11-03 05:03:26,190:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:26,190:INFO:Checking exceptions
2024-11-03 05:03:26,190:INFO:Preloading libraries
2024-11-03 05:03:26,191:INFO:Set up data.
2024-11-03 05:03:26,196:INFO:Set up index.
2024-11-03 05:03:26,329:INFO:Initializing predict_model()
2024-11-03 05:03:26,329:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:26,329:INFO:Checking exceptions
2024-11-03 05:03:26,329:INFO:Preloading libraries
2024-11-03 05:03:26,330:INFO:Set up data.
2024-11-03 05:03:26,333:INFO:Set up index.
2024-11-03 05:03:26,522:INFO:Initializing predict_model()
2024-11-03 05:03:26,522:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:26,522:INFO:Checking exceptions
2024-11-03 05:03:26,522:INFO:Preloading libraries
2024-11-03 05:03:26,523:INFO:Set up data.
2024-11-03 05:03:26,532:INFO:Set up index.
2024-11-03 05:03:26,711:INFO:Initializing predict_model()
2024-11-03 05:03:26,711:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DDAC70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:26,711:INFO:Checking exceptions
2024-11-03 05:03:26,711:INFO:Preloading libraries
2024-11-03 05:03:26,711:INFO:Set up data.
2024-11-03 05:03:26,716:INFO:Set up index.
2024-11-03 05:03:26,861:INFO:Initializing predict_model()
2024-11-03 05:03:26,861:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:26,861:INFO:Checking exceptions
2024-11-03 05:03:26,861:INFO:Preloading libraries
2024-11-03 05:03:26,862:INFO:Set up data.
2024-11-03 05:03:26,866:INFO:Set up index.
2024-11-03 05:03:27,010:INFO:Initializing predict_model()
2024-11-03 05:03:27,010:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:27,010:INFO:Checking exceptions
2024-11-03 05:03:27,010:INFO:Preloading libraries
2024-11-03 05:03:27,010:INFO:Set up data.
2024-11-03 05:03:27,014:INFO:Set up index.
2024-11-03 05:03:27,157:INFO:Initializing predict_model()
2024-11-03 05:03:27,157:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:27,157:INFO:Checking exceptions
2024-11-03 05:03:27,157:INFO:Preloading libraries
2024-11-03 05:03:27,157:INFO:Set up data.
2024-11-03 05:03:27,161:INFO:Set up index.
2024-11-03 05:03:27,299:INFO:Initializing predict_model()
2024-11-03 05:03:27,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:27,299:INFO:Checking exceptions
2024-11-03 05:03:27,299:INFO:Preloading libraries
2024-11-03 05:03:27,300:INFO:Set up data.
2024-11-03 05:03:27,304:INFO:Set up index.
2024-11-03 05:03:27,444:INFO:Initializing predict_model()
2024-11-03 05:03:27,445:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:27,445:INFO:Checking exceptions
2024-11-03 05:03:27,445:INFO:Preloading libraries
2024-11-03 05:03:27,445:INFO:Set up data.
2024-11-03 05:03:27,449:INFO:Set up index.
2024-11-03 05:03:27,596:INFO:Initializing predict_model()
2024-11-03 05:03:27,597:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:27,597:INFO:Checking exceptions
2024-11-03 05:03:27,597:INFO:Preloading libraries
2024-11-03 05:03:27,597:INFO:Set up data.
2024-11-03 05:03:27,603:INFO:Set up index.
2024-11-03 05:03:27,748:INFO:Initializing predict_model()
2024-11-03 05:03:27,748:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DF2C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:27,748:INFO:Checking exceptions
2024-11-03 05:03:27,748:INFO:Preloading libraries
2024-11-03 05:03:27,749:INFO:Set up data.
2024-11-03 05:03:27,754:INFO:Set up index.
2024-11-03 05:03:27,897:INFO:Initializing predict_model()
2024-11-03 05:03:27,897:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:27,897:INFO:Checking exceptions
2024-11-03 05:03:27,897:INFO:Preloading libraries
2024-11-03 05:03:27,898:INFO:Set up data.
2024-11-03 05:03:27,902:INFO:Set up index.
2024-11-03 05:03:28,062:INFO:Initializing predict_model()
2024-11-03 05:03:28,062:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:28,062:INFO:Checking exceptions
2024-11-03 05:03:28,063:INFO:Preloading libraries
2024-11-03 05:03:28,063:INFO:Set up data.
2024-11-03 05:03:28,069:INFO:Set up index.
2024-11-03 05:03:28,216:INFO:Initializing predict_model()
2024-11-03 05:03:28,217:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:28,217:INFO:Checking exceptions
2024-11-03 05:03:28,217:INFO:Preloading libraries
2024-11-03 05:03:28,217:INFO:Set up data.
2024-11-03 05:03:28,222:INFO:Set up index.
2024-11-03 05:03:28,366:INFO:Initializing predict_model()
2024-11-03 05:03:28,366:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:28,366:INFO:Checking exceptions
2024-11-03 05:03:28,366:INFO:Preloading libraries
2024-11-03 05:03:28,366:INFO:Set up data.
2024-11-03 05:03:28,371:INFO:Set up index.
2024-11-03 05:03:28,582:INFO:Initializing predict_model()
2024-11-03 05:03:28,583:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0D550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:28,583:INFO:Checking exceptions
2024-11-03 05:03:28,583:INFO:Preloading libraries
2024-11-03 05:03:28,583:INFO:Set up data.
2024-11-03 05:03:28,588:INFO:Set up index.
2024-11-03 05:03:28,767:INFO:Initializing predict_model()
2024-11-03 05:03:28,768:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:28,768:INFO:Checking exceptions
2024-11-03 05:03:28,768:INFO:Preloading libraries
2024-11-03 05:03:28,768:INFO:Set up data.
2024-11-03 05:03:28,775:INFO:Set up index.
2024-11-03 05:03:28,914:INFO:Initializing predict_model()
2024-11-03 05:03:28,914:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017F9CE76E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:28,914:INFO:Checking exceptions
2024-11-03 05:03:28,914:INFO:Preloading libraries
2024-11-03 05:03:28,914:INFO:Set up data.
2024-11-03 05:03:28,919:INFO:Set up index.
2024-11-03 05:03:29,177:INFO:Initializing predict_model()
2024-11-03 05:03:29,177:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:29,177:INFO:Checking exceptions
2024-11-03 05:03:29,177:INFO:Preloading libraries
2024-11-03 05:03:29,178:INFO:Set up data.
2024-11-03 05:03:29,183:INFO:Set up index.
2024-11-03 05:03:29,339:INFO:Initializing predict_model()
2024-11-03 05:03:29,339:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:29,339:INFO:Checking exceptions
2024-11-03 05:03:29,339:INFO:Preloading libraries
2024-11-03 05:03:29,339:INFO:Set up data.
2024-11-03 05:03:29,343:INFO:Set up index.
2024-11-03 05:03:29,487:INFO:Initializing predict_model()
2024-11-03 05:03:29,487:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4DCD850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA50B4C0>)
2024-11-03 05:03:29,487:INFO:Checking exceptions
2024-11-03 05:03:29,487:INFO:Preloading libraries
2024-11-03 05:03:29,488:INFO:Set up data.
2024-11-03 05:03:29,491:INFO:Set up index.
2024-11-03 05:03:29,627:INFO:Initializing predict_model()
2024-11-03 05:03:29,627:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FAA4D1B80>)
2024-11-03 05:03:29,628:INFO:Checking exceptions
2024-11-03 05:03:29,628:INFO:Preloading libraries
2024-11-03 05:03:29,628:INFO:Set up data.
2024-11-03 05:03:29,634:INFO:Set up index.
2024-11-03 05:03:29,762:INFO:Initializing predict_model()
2024-11-03 05:03:29,762:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FA4E0DC40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8BF70>)
2024-11-03 05:03:29,763:INFO:Checking exceptions
2024-11-03 05:03:29,763:INFO:Preloading libraries
2024-11-03 05:03:29,763:INFO:Set up data.
2024-11-03 05:03:29,767:INFO:Set up index.
2024-11-03 05:03:29,903:INFO:Initializing predict_model()
2024-11-03 05:03:29,903:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000017FAA4C8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017FA4D8B160>)
2024-11-03 05:03:29,903:INFO:Checking exceptions
2024-11-03 05:03:29,903:INFO:Preloading libraries
2024-11-03 05:03:29,903:INFO:Set up data.
2024-11-03 05:03:29,907:INFO:Set up index.
2024-11-03 05:06:17,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:06:17,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:06:17,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:06:17,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:06:18,785:INFO:Initializing load_model()
2024-11-03 05:06:18,785:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 05:06:19,160:INFO:Initializing predict_model()
2024-11-03 05:06:19,160:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DF70>)
2024-11-03 05:06:19,160:INFO:Checking exceptions
2024-11-03 05:06:19,160:INFO:Preloading libraries
2024-11-03 05:06:19,160:INFO:Set up data.
2024-11-03 05:06:19,165:INFO:Set up index.
2024-11-03 05:06:19,299:INFO:Initializing predict_model()
2024-11-03 05:06:19,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BDC40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:19,299:INFO:Checking exceptions
2024-11-03 05:06:19,299:INFO:Preloading libraries
2024-11-03 05:06:19,299:INFO:Set up data.
2024-11-03 05:06:19,303:INFO:Set up index.
2024-11-03 05:06:19,441:INFO:Initializing predict_model()
2024-11-03 05:06:19,441:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCA932EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961F70>)
2024-11-03 05:06:19,441:INFO:Checking exceptions
2024-11-03 05:06:19,441:INFO:Preloading libraries
2024-11-03 05:06:19,441:INFO:Set up data.
2024-11-03 05:06:19,445:INFO:Set up index.
2024-11-03 05:06:19,587:INFO:Initializing predict_model()
2024-11-03 05:06:19,587:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BC0EA2040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:19,587:INFO:Checking exceptions
2024-11-03 05:06:19,587:INFO:Preloading libraries
2024-11-03 05:06:19,588:INFO:Set up data.
2024-11-03 05:06:19,592:INFO:Set up index.
2024-11-03 05:06:19,712:INFO:Initializing predict_model()
2024-11-03 05:06:19,712:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DEE0>)
2024-11-03 05:06:19,712:INFO:Checking exceptions
2024-11-03 05:06:19,712:INFO:Preloading libraries
2024-11-03 05:06:19,712:INFO:Set up data.
2024-11-03 05:06:19,717:INFO:Set up index.
2024-11-03 05:06:19,846:INFO:Initializing predict_model()
2024-11-03 05:06:19,846:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961940>)
2024-11-03 05:06:19,846:INFO:Checking exceptions
2024-11-03 05:06:19,846:INFO:Preloading libraries
2024-11-03 05:06:19,846:INFO:Set up data.
2024-11-03 05:06:19,850:INFO:Set up index.
2024-11-03 05:06:19,986:INFO:Initializing predict_model()
2024-11-03 05:06:19,987:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DEE0>)
2024-11-03 05:06:19,987:INFO:Checking exceptions
2024-11-03 05:06:19,987:INFO:Preloading libraries
2024-11-03 05:06:19,987:INFO:Set up data.
2024-11-03 05:06:19,991:INFO:Set up index.
2024-11-03 05:06:20,181:INFO:Initializing predict_model()
2024-11-03 05:06:20,182:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:20,182:INFO:Checking exceptions
2024-11-03 05:06:20,182:INFO:Preloading libraries
2024-11-03 05:06:20,182:INFO:Set up data.
2024-11-03 05:06:20,186:INFO:Set up index.
2024-11-03 05:06:20,314:INFO:Initializing predict_model()
2024-11-03 05:06:20,314:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D040>)
2024-11-03 05:06:20,314:INFO:Checking exceptions
2024-11-03 05:06:20,314:INFO:Preloading libraries
2024-11-03 05:06:20,314:INFO:Set up data.
2024-11-03 05:06:20,319:INFO:Set up index.
2024-11-03 05:06:20,457:INFO:Initializing predict_model()
2024-11-03 05:06:20,457:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DEE0>)
2024-11-03 05:06:20,457:INFO:Checking exceptions
2024-11-03 05:06:20,457:INFO:Preloading libraries
2024-11-03 05:06:20,458:INFO:Set up data.
2024-11-03 05:06:20,461:INFO:Set up index.
2024-11-03 05:06:20,594:INFO:Initializing predict_model()
2024-11-03 05:06:20,595:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:20,595:INFO:Checking exceptions
2024-11-03 05:06:20,595:INFO:Preloading libraries
2024-11-03 05:06:20,595:INFO:Set up data.
2024-11-03 05:06:20,601:INFO:Set up index.
2024-11-03 05:06:20,727:INFO:Initializing predict_model()
2024-11-03 05:06:20,727:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DEE0>)
2024-11-03 05:06:20,727:INFO:Checking exceptions
2024-11-03 05:06:20,727:INFO:Preloading libraries
2024-11-03 05:06:20,728:INFO:Set up data.
2024-11-03 05:06:20,733:INFO:Set up index.
2024-11-03 05:06:20,858:INFO:Initializing predict_model()
2024-11-03 05:06:20,858:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:20,858:INFO:Checking exceptions
2024-11-03 05:06:20,858:INFO:Preloading libraries
2024-11-03 05:06:20,858:INFO:Set up data.
2024-11-03 05:06:20,862:INFO:Set up index.
2024-11-03 05:06:20,996:INFO:Initializing predict_model()
2024-11-03 05:06:20,996:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DEE0>)
2024-11-03 05:06:20,996:INFO:Checking exceptions
2024-11-03 05:06:20,996:INFO:Preloading libraries
2024-11-03 05:06:20,997:INFO:Set up data.
2024-11-03 05:06:21,002:INFO:Set up index.
2024-11-03 05:06:21,140:INFO:Initializing predict_model()
2024-11-03 05:06:21,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:21,140:INFO:Checking exceptions
2024-11-03 05:06:21,140:INFO:Preloading libraries
2024-11-03 05:06:21,141:INFO:Set up data.
2024-11-03 05:06:21,144:INFO:Set up index.
2024-11-03 05:06:21,273:INFO:Initializing predict_model()
2024-11-03 05:06:21,273:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:21,273:INFO:Checking exceptions
2024-11-03 05:06:21,273:INFO:Preloading libraries
2024-11-03 05:06:21,273:INFO:Set up data.
2024-11-03 05:06:21,277:INFO:Set up index.
2024-11-03 05:06:21,423:INFO:Initializing predict_model()
2024-11-03 05:06:21,423:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DEE0>)
2024-11-03 05:06:21,423:INFO:Checking exceptions
2024-11-03 05:06:21,423:INFO:Preloading libraries
2024-11-03 05:06:21,423:INFO:Set up data.
2024-11-03 05:06:21,427:INFO:Set up index.
2024-11-03 05:06:21,553:INFO:Initializing predict_model()
2024-11-03 05:06:21,553:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD29619D0>)
2024-11-03 05:06:21,553:INFO:Checking exceptions
2024-11-03 05:06:21,554:INFO:Preloading libraries
2024-11-03 05:06:21,554:INFO:Set up data.
2024-11-03 05:06:21,559:INFO:Set up index.
2024-11-03 05:06:21,696:INFO:Initializing predict_model()
2024-11-03 05:06:21,696:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:21,696:INFO:Checking exceptions
2024-11-03 05:06:21,696:INFO:Preloading libraries
2024-11-03 05:06:21,696:INFO:Set up data.
2024-11-03 05:06:21,701:INFO:Set up index.
2024-11-03 05:06:21,832:INFO:Initializing predict_model()
2024-11-03 05:06:21,832:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961A60>)
2024-11-03 05:06:21,832:INFO:Checking exceptions
2024-11-03 05:06:21,832:INFO:Preloading libraries
2024-11-03 05:06:21,833:INFO:Set up data.
2024-11-03 05:06:21,838:INFO:Set up index.
2024-11-03 05:06:21,976:INFO:Initializing predict_model()
2024-11-03 05:06:21,976:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DDC0>)
2024-11-03 05:06:21,977:INFO:Checking exceptions
2024-11-03 05:06:21,977:INFO:Preloading libraries
2024-11-03 05:06:21,977:INFO:Set up data.
2024-11-03 05:06:21,982:INFO:Set up index.
2024-11-03 05:06:22,116:INFO:Initializing predict_model()
2024-11-03 05:06:22,116:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D160>)
2024-11-03 05:06:22,116:INFO:Checking exceptions
2024-11-03 05:06:22,116:INFO:Preloading libraries
2024-11-03 05:06:22,116:INFO:Set up data.
2024-11-03 05:06:22,121:INFO:Set up index.
2024-11-03 05:06:22,251:INFO:Initializing predict_model()
2024-11-03 05:06:22,252:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:22,252:INFO:Checking exceptions
2024-11-03 05:06:22,252:INFO:Preloading libraries
2024-11-03 05:06:22,252:INFO:Set up data.
2024-11-03 05:06:22,258:INFO:Set up index.
2024-11-03 05:06:22,388:INFO:Initializing predict_model()
2024-11-03 05:06:22,388:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DDC0>)
2024-11-03 05:06:22,388:INFO:Checking exceptions
2024-11-03 05:06:22,388:INFO:Preloading libraries
2024-11-03 05:06:22,388:INFO:Set up data.
2024-11-03 05:06:22,392:INFO:Set up index.
2024-11-03 05:06:22,522:INFO:Initializing predict_model()
2024-11-03 05:06:22,522:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D160>)
2024-11-03 05:06:22,522:INFO:Checking exceptions
2024-11-03 05:06:22,522:INFO:Preloading libraries
2024-11-03 05:06:22,522:INFO:Set up data.
2024-11-03 05:06:22,527:INFO:Set up index.
2024-11-03 05:06:22,650:INFO:Initializing predict_model()
2024-11-03 05:06:22,650:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961C10>)
2024-11-03 05:06:22,650:INFO:Checking exceptions
2024-11-03 05:06:22,650:INFO:Preloading libraries
2024-11-03 05:06:22,650:INFO:Set up data.
2024-11-03 05:06:22,654:INFO:Set up index.
2024-11-03 05:06:22,794:INFO:Initializing predict_model()
2024-11-03 05:06:22,794:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD29619D0>)
2024-11-03 05:06:22,794:INFO:Checking exceptions
2024-11-03 05:06:22,794:INFO:Preloading libraries
2024-11-03 05:06:22,795:INFO:Set up data.
2024-11-03 05:06:22,798:INFO:Set up index.
2024-11-03 05:06:22,934:INFO:Initializing predict_model()
2024-11-03 05:06:22,934:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D0D0>)
2024-11-03 05:06:22,934:INFO:Checking exceptions
2024-11-03 05:06:22,935:INFO:Preloading libraries
2024-11-03 05:06:22,935:INFO:Set up data.
2024-11-03 05:06:22,939:INFO:Set up index.
2024-11-03 05:06:23,174:INFO:Initializing predict_model()
2024-11-03 05:06:23,174:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961EE0>)
2024-11-03 05:06:23,174:INFO:Checking exceptions
2024-11-03 05:06:23,174:INFO:Preloading libraries
2024-11-03 05:06:23,175:INFO:Set up data.
2024-11-03 05:06:23,179:INFO:Set up index.
2024-11-03 05:06:23,311:INFO:Initializing predict_model()
2024-11-03 05:06:23,312:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD29618B0>)
2024-11-03 05:06:23,312:INFO:Checking exceptions
2024-11-03 05:06:23,312:INFO:Preloading libraries
2024-11-03 05:06:23,312:INFO:Set up data.
2024-11-03 05:06:23,315:INFO:Set up index.
2024-11-03 05:06:23,445:INFO:Initializing predict_model()
2024-11-03 05:06:23,445:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DF70>)
2024-11-03 05:06:23,445:INFO:Checking exceptions
2024-11-03 05:06:23,445:INFO:Preloading libraries
2024-11-03 05:06:23,445:INFO:Set up data.
2024-11-03 05:06:23,450:INFO:Set up index.
2024-11-03 05:06:23,589:INFO:Initializing predict_model()
2024-11-03 05:06:23,589:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D310>)
2024-11-03 05:06:23,589:INFO:Checking exceptions
2024-11-03 05:06:23,589:INFO:Preloading libraries
2024-11-03 05:06:23,589:INFO:Set up data.
2024-11-03 05:06:23,594:INFO:Set up index.
2024-11-03 05:06:23,718:INFO:Initializing predict_model()
2024-11-03 05:06:23,718:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD460>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961D30>)
2024-11-03 05:06:23,718:INFO:Checking exceptions
2024-11-03 05:06:23,718:INFO:Preloading libraries
2024-11-03 05:06:23,719:INFO:Set up data.
2024-11-03 05:06:23,722:INFO:Set up index.
2024-11-03 05:06:23,858:INFO:Initializing predict_model()
2024-11-03 05:06:23,858:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD280>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961C10>)
2024-11-03 05:06:23,859:INFO:Checking exceptions
2024-11-03 05:06:23,859:INFO:Preloading libraries
2024-11-03 05:06:23,859:INFO:Set up data.
2024-11-03 05:06:23,863:INFO:Set up index.
2024-11-03 05:06:23,998:INFO:Initializing predict_model()
2024-11-03 05:06:23,998:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D160>)
2024-11-03 05:06:23,998:INFO:Checking exceptions
2024-11-03 05:06:23,998:INFO:Preloading libraries
2024-11-03 05:06:23,998:INFO:Set up data.
2024-11-03 05:06:24,002:INFO:Set up index.
2024-11-03 05:06:24,139:INFO:Initializing predict_model()
2024-11-03 05:06:24,139:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961DC0>)
2024-11-03 05:06:24,139:INFO:Checking exceptions
2024-11-03 05:06:24,139:INFO:Preloading libraries
2024-11-03 05:06:24,139:INFO:Set up data.
2024-11-03 05:06:24,143:INFO:Set up index.
2024-11-03 05:06:24,273:INFO:Initializing predict_model()
2024-11-03 05:06:24,273:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:24,273:INFO:Checking exceptions
2024-11-03 05:06:24,273:INFO:Preloading libraries
2024-11-03 05:06:24,274:INFO:Set up data.
2024-11-03 05:06:24,278:INFO:Set up index.
2024-11-03 05:06:24,418:INFO:Initializing predict_model()
2024-11-03 05:06:24,418:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D040>)
2024-11-03 05:06:24,418:INFO:Checking exceptions
2024-11-03 05:06:24,418:INFO:Preloading libraries
2024-11-03 05:06:24,418:INFO:Set up data.
2024-11-03 05:06:24,422:INFO:Set up index.
2024-11-03 05:06:24,543:INFO:Initializing predict_model()
2024-11-03 05:06:24,543:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D160>)
2024-11-03 05:06:24,543:INFO:Checking exceptions
2024-11-03 05:06:24,543:INFO:Preloading libraries
2024-11-03 05:06:24,543:INFO:Set up data.
2024-11-03 05:06:24,547:INFO:Set up index.
2024-11-03 05:06:24,679:INFO:Initializing predict_model()
2024-11-03 05:06:24,680:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD760>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:24,680:INFO:Checking exceptions
2024-11-03 05:06:24,681:INFO:Preloading libraries
2024-11-03 05:06:24,681:INFO:Set up data.
2024-11-03 05:06:24,686:INFO:Set up index.
2024-11-03 05:06:24,830:INFO:Initializing predict_model()
2024-11-03 05:06:24,830:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:24,830:INFO:Checking exceptions
2024-11-03 05:06:24,830:INFO:Preloading libraries
2024-11-03 05:06:24,830:INFO:Set up data.
2024-11-03 05:06:24,835:INFO:Set up index.
2024-11-03 05:06:24,974:INFO:Initializing predict_model()
2024-11-03 05:06:24,974:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:24,974:INFO:Checking exceptions
2024-11-03 05:06:24,974:INFO:Preloading libraries
2024-11-03 05:06:24,974:INFO:Set up data.
2024-11-03 05:06:24,982:INFO:Set up index.
2024-11-03 05:06:25,141:INFO:Initializing predict_model()
2024-11-03 05:06:25,141:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:25,141:INFO:Checking exceptions
2024-11-03 05:06:25,142:INFO:Preloading libraries
2024-11-03 05:06:25,143:INFO:Set up data.
2024-11-03 05:06:25,148:INFO:Set up index.
2024-11-03 05:06:25,290:INFO:Initializing predict_model()
2024-11-03 05:06:25,290:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:25,290:INFO:Checking exceptions
2024-11-03 05:06:25,290:INFO:Preloading libraries
2024-11-03 05:06:25,290:INFO:Set up data.
2024-11-03 05:06:25,295:INFO:Set up index.
2024-11-03 05:06:25,461:INFO:Initializing predict_model()
2024-11-03 05:06:25,461:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:25,461:INFO:Checking exceptions
2024-11-03 05:06:25,461:INFO:Preloading libraries
2024-11-03 05:06:25,461:INFO:Set up data.
2024-11-03 05:06:25,466:INFO:Set up index.
2024-11-03 05:06:25,635:INFO:Initializing predict_model()
2024-11-03 05:06:25,635:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:25,635:INFO:Checking exceptions
2024-11-03 05:06:25,635:INFO:Preloading libraries
2024-11-03 05:06:25,635:INFO:Set up data.
2024-11-03 05:06:25,640:INFO:Set up index.
2024-11-03 05:06:25,802:INFO:Initializing predict_model()
2024-11-03 05:06:25,802:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:25,802:INFO:Checking exceptions
2024-11-03 05:06:25,802:INFO:Preloading libraries
2024-11-03 05:06:25,803:INFO:Set up data.
2024-11-03 05:06:25,807:INFO:Set up index.
2024-11-03 05:06:25,937:INFO:Initializing predict_model()
2024-11-03 05:06:25,938:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961C10>)
2024-11-03 05:06:25,938:INFO:Checking exceptions
2024-11-03 05:06:25,938:INFO:Preloading libraries
2024-11-03 05:06:25,938:INFO:Set up data.
2024-11-03 05:06:25,941:INFO:Set up index.
2024-11-03 05:06:26,082:INFO:Initializing predict_model()
2024-11-03 05:06:26,082:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:26,082:INFO:Checking exceptions
2024-11-03 05:06:26,082:INFO:Preloading libraries
2024-11-03 05:06:26,082:INFO:Set up data.
2024-11-03 05:06:26,086:INFO:Set up index.
2024-11-03 05:06:26,219:INFO:Initializing predict_model()
2024-11-03 05:06:26,219:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:26,219:INFO:Checking exceptions
2024-11-03 05:06:26,220:INFO:Preloading libraries
2024-11-03 05:06:26,220:INFO:Set up data.
2024-11-03 05:06:26,225:INFO:Set up index.
2024-11-03 05:06:26,355:INFO:Initializing predict_model()
2024-11-03 05:06:26,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961EE0>)
2024-11-03 05:06:26,355:INFO:Checking exceptions
2024-11-03 05:06:26,356:INFO:Preloading libraries
2024-11-03 05:06:26,356:INFO:Set up data.
2024-11-03 05:06:26,361:INFO:Set up index.
2024-11-03 05:06:26,510:INFO:Initializing predict_model()
2024-11-03 05:06:26,511:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961DC0>)
2024-11-03 05:06:26,511:INFO:Checking exceptions
2024-11-03 05:06:26,511:INFO:Preloading libraries
2024-11-03 05:06:26,511:INFO:Set up data.
2024-11-03 05:06:26,533:INFO:Set up index.
2024-11-03 05:06:26,714:INFO:Initializing predict_model()
2024-11-03 05:06:26,714:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:26,714:INFO:Checking exceptions
2024-11-03 05:06:26,714:INFO:Preloading libraries
2024-11-03 05:06:26,714:INFO:Set up data.
2024-11-03 05:06:26,719:INFO:Set up index.
2024-11-03 05:06:26,876:INFO:Initializing predict_model()
2024-11-03 05:06:26,876:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:26,876:INFO:Checking exceptions
2024-11-03 05:06:26,876:INFO:Preloading libraries
2024-11-03 05:06:26,877:INFO:Set up data.
2024-11-03 05:06:26,883:INFO:Set up index.
2024-11-03 05:06:27,034:INFO:Initializing predict_model()
2024-11-03 05:06:27,034:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:27,034:INFO:Checking exceptions
2024-11-03 05:06:27,034:INFO:Preloading libraries
2024-11-03 05:06:27,034:INFO:Set up data.
2024-11-03 05:06:27,038:INFO:Set up index.
2024-11-03 05:06:27,169:INFO:Initializing predict_model()
2024-11-03 05:06:27,169:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D160>)
2024-11-03 05:06:27,169:INFO:Checking exceptions
2024-11-03 05:06:27,169:INFO:Preloading libraries
2024-11-03 05:06:27,170:INFO:Set up data.
2024-11-03 05:06:27,175:INFO:Set up index.
2024-11-03 05:06:27,306:INFO:Initializing predict_model()
2024-11-03 05:06:27,306:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:27,306:INFO:Checking exceptions
2024-11-03 05:06:27,306:INFO:Preloading libraries
2024-11-03 05:06:27,306:INFO:Set up data.
2024-11-03 05:06:27,311:INFO:Set up index.
2024-11-03 05:06:27,427:INFO:Initializing predict_model()
2024-11-03 05:06:27,428:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29A3700>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:27,428:INFO:Checking exceptions
2024-11-03 05:06:27,429:INFO:Preloading libraries
2024-11-03 05:06:27,430:INFO:Set up data.
2024-11-03 05:06:27,436:INFO:Set up index.
2024-11-03 05:06:27,576:INFO:Initializing predict_model()
2024-11-03 05:06:27,576:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:27,577:INFO:Checking exceptions
2024-11-03 05:06:27,577:INFO:Preloading libraries
2024-11-03 05:06:27,577:INFO:Set up data.
2024-11-03 05:06:27,581:INFO:Set up index.
2024-11-03 05:06:27,714:INFO:Initializing predict_model()
2024-11-03 05:06:27,714:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:27,714:INFO:Checking exceptions
2024-11-03 05:06:27,714:INFO:Preloading libraries
2024-11-03 05:06:27,715:INFO:Set up data.
2024-11-03 05:06:27,718:INFO:Set up index.
2024-11-03 05:06:27,847:INFO:Initializing predict_model()
2024-11-03 05:06:27,848:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:27,848:INFO:Checking exceptions
2024-11-03 05:06:27,848:INFO:Preloading libraries
2024-11-03 05:06:27,848:INFO:Set up data.
2024-11-03 05:06:27,852:INFO:Set up index.
2024-11-03 05:06:27,988:INFO:Initializing predict_model()
2024-11-03 05:06:27,989:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:27,989:INFO:Checking exceptions
2024-11-03 05:06:27,989:INFO:Preloading libraries
2024-11-03 05:06:27,989:INFO:Set up data.
2024-11-03 05:06:27,994:INFO:Set up index.
2024-11-03 05:06:28,134:INFO:Initializing predict_model()
2024-11-03 05:06:28,134:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:28,134:INFO:Checking exceptions
2024-11-03 05:06:28,135:INFO:Preloading libraries
2024-11-03 05:06:28,135:INFO:Set up data.
2024-11-03 05:06:28,143:INFO:Set up index.
2024-11-03 05:06:28,285:INFO:Initializing predict_model()
2024-11-03 05:06:28,285:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:28,285:INFO:Checking exceptions
2024-11-03 05:06:28,285:INFO:Preloading libraries
2024-11-03 05:06:28,285:INFO:Set up data.
2024-11-03 05:06:28,289:INFO:Set up index.
2024-11-03 05:06:28,428:INFO:Initializing predict_model()
2024-11-03 05:06:28,428:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:28,429:INFO:Checking exceptions
2024-11-03 05:06:28,429:INFO:Preloading libraries
2024-11-03 05:06:28,429:INFO:Set up data.
2024-11-03 05:06:28,432:INFO:Set up index.
2024-11-03 05:06:28,565:INFO:Initializing predict_model()
2024-11-03 05:06:28,566:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:28,566:INFO:Checking exceptions
2024-11-03 05:06:28,566:INFO:Preloading libraries
2024-11-03 05:06:28,567:INFO:Set up data.
2024-11-03 05:06:28,571:INFO:Set up index.
2024-11-03 05:06:28,705:INFO:Initializing predict_model()
2024-11-03 05:06:28,705:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:28,705:INFO:Checking exceptions
2024-11-03 05:06:28,705:INFO:Preloading libraries
2024-11-03 05:06:28,705:INFO:Set up data.
2024-11-03 05:06:28,709:INFO:Set up index.
2024-11-03 05:06:28,851:INFO:Initializing predict_model()
2024-11-03 05:06:28,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:28,851:INFO:Checking exceptions
2024-11-03 05:06:28,851:INFO:Preloading libraries
2024-11-03 05:06:28,852:INFO:Set up data.
2024-11-03 05:06:28,855:INFO:Set up index.
2024-11-03 05:06:28,999:INFO:Initializing predict_model()
2024-11-03 05:06:28,999:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:28,999:INFO:Checking exceptions
2024-11-03 05:06:28,999:INFO:Preloading libraries
2024-11-03 05:06:28,999:INFO:Set up data.
2024-11-03 05:06:29,003:INFO:Set up index.
2024-11-03 05:06:29,140:INFO:Initializing predict_model()
2024-11-03 05:06:29,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C85E0>)
2024-11-03 05:06:29,140:INFO:Checking exceptions
2024-11-03 05:06:29,141:INFO:Preloading libraries
2024-11-03 05:06:29,141:INFO:Set up data.
2024-11-03 05:06:29,145:INFO:Set up index.
2024-11-03 05:06:29,276:INFO:Initializing predict_model()
2024-11-03 05:06:29,277:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8F70>)
2024-11-03 05:06:29,277:INFO:Checking exceptions
2024-11-03 05:06:29,277:INFO:Preloading libraries
2024-11-03 05:06:29,277:INFO:Set up data.
2024-11-03 05:06:29,282:INFO:Set up index.
2024-11-03 05:06:29,419:INFO:Initializing predict_model()
2024-11-03 05:06:29,419:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8670>)
2024-11-03 05:06:29,419:INFO:Checking exceptions
2024-11-03 05:06:29,419:INFO:Preloading libraries
2024-11-03 05:06:29,420:INFO:Set up data.
2024-11-03 05:06:29,424:INFO:Set up index.
2024-11-03 05:06:29,560:INFO:Initializing predict_model()
2024-11-03 05:06:29,561:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:29,561:INFO:Checking exceptions
2024-11-03 05:06:29,561:INFO:Preloading libraries
2024-11-03 05:06:29,561:INFO:Set up data.
2024-11-03 05:06:29,564:INFO:Set up index.
2024-11-03 05:06:29,703:INFO:Initializing predict_model()
2024-11-03 05:06:29,704:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:29,704:INFO:Checking exceptions
2024-11-03 05:06:29,704:INFO:Preloading libraries
2024-11-03 05:06:29,704:INFO:Set up data.
2024-11-03 05:06:29,709:INFO:Set up index.
2024-11-03 05:06:29,867:INFO:Initializing predict_model()
2024-11-03 05:06:29,867:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961940>)
2024-11-03 05:06:29,868:INFO:Checking exceptions
2024-11-03 05:06:29,868:INFO:Preloading libraries
2024-11-03 05:06:29,869:INFO:Set up data.
2024-11-03 05:06:29,876:INFO:Set up index.
2024-11-03 05:06:30,012:INFO:Initializing predict_model()
2024-11-03 05:06:30,012:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DDC0>)
2024-11-03 05:06:30,012:INFO:Checking exceptions
2024-11-03 05:06:30,012:INFO:Preloading libraries
2024-11-03 05:06:30,012:INFO:Set up data.
2024-11-03 05:06:30,017:INFO:Set up index.
2024-11-03 05:06:30,175:INFO:Initializing predict_model()
2024-11-03 05:06:30,176:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29A3250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:30,176:INFO:Checking exceptions
2024-11-03 05:06:30,176:INFO:Preloading libraries
2024-11-03 05:06:30,176:INFO:Set up data.
2024-11-03 05:06:30,182:INFO:Set up index.
2024-11-03 05:06:30,329:INFO:Initializing predict_model()
2024-11-03 05:06:30,329:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:30,329:INFO:Checking exceptions
2024-11-03 05:06:30,329:INFO:Preloading libraries
2024-11-03 05:06:30,330:INFO:Set up data.
2024-11-03 05:06:30,333:INFO:Set up index.
2024-11-03 05:06:30,465:INFO:Initializing predict_model()
2024-11-03 05:06:30,466:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:30,466:INFO:Checking exceptions
2024-11-03 05:06:30,466:INFO:Preloading libraries
2024-11-03 05:06:30,466:INFO:Set up data.
2024-11-03 05:06:30,469:INFO:Set up index.
2024-11-03 05:06:30,716:INFO:Initializing predict_model()
2024-11-03 05:06:30,716:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:30,716:INFO:Checking exceptions
2024-11-03 05:06:30,716:INFO:Preloading libraries
2024-11-03 05:06:30,717:INFO:Set up data.
2024-11-03 05:06:30,721:INFO:Set up index.
2024-11-03 05:06:30,851:INFO:Initializing predict_model()
2024-11-03 05:06:30,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:30,851:INFO:Checking exceptions
2024-11-03 05:06:30,851:INFO:Preloading libraries
2024-11-03 05:06:30,851:INFO:Set up data.
2024-11-03 05:06:30,856:INFO:Set up index.
2024-11-03 05:06:30,989:INFO:Initializing predict_model()
2024-11-03 05:06:30,989:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:30,990:INFO:Checking exceptions
2024-11-03 05:06:30,990:INFO:Preloading libraries
2024-11-03 05:06:30,990:INFO:Set up data.
2024-11-03 05:06:30,996:INFO:Set up index.
2024-11-03 05:06:31,136:INFO:Initializing predict_model()
2024-11-03 05:06:31,137:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:31,137:INFO:Checking exceptions
2024-11-03 05:06:31,137:INFO:Preloading libraries
2024-11-03 05:06:31,137:INFO:Set up data.
2024-11-03 05:06:31,141:INFO:Set up index.
2024-11-03 05:06:31,274:INFO:Initializing predict_model()
2024-11-03 05:06:31,274:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:31,275:INFO:Checking exceptions
2024-11-03 05:06:31,275:INFO:Preloading libraries
2024-11-03 05:06:31,275:INFO:Set up data.
2024-11-03 05:06:31,279:INFO:Set up index.
2024-11-03 05:06:31,400:INFO:Initializing predict_model()
2024-11-03 05:06:31,401:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD2961DC0>)
2024-11-03 05:06:31,401:INFO:Checking exceptions
2024-11-03 05:06:31,401:INFO:Preloading libraries
2024-11-03 05:06:31,401:INFO:Set up data.
2024-11-03 05:06:31,405:INFO:Set up index.
2024-11-03 05:06:31,546:INFO:Initializing predict_model()
2024-11-03 05:06:31,546:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD29618B0>)
2024-11-03 05:06:31,546:INFO:Checking exceptions
2024-11-03 05:06:31,546:INFO:Preloading libraries
2024-11-03 05:06:31,546:INFO:Set up data.
2024-11-03 05:06:31,552:INFO:Set up index.
2024-11-03 05:06:31,698:INFO:Initializing predict_model()
2024-11-03 05:06:31,698:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:31,698:INFO:Checking exceptions
2024-11-03 05:06:31,698:INFO:Preloading libraries
2024-11-03 05:06:31,698:INFO:Set up data.
2024-11-03 05:06:31,701:INFO:Set up index.
2024-11-03 05:06:31,838:INFO:Initializing predict_model()
2024-11-03 05:06:31,838:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:31,838:INFO:Checking exceptions
2024-11-03 05:06:31,838:INFO:Preloading libraries
2024-11-03 05:06:31,839:INFO:Set up data.
2024-11-03 05:06:31,842:INFO:Set up index.
2024-11-03 05:06:31,982:INFO:Initializing predict_model()
2024-11-03 05:06:31,982:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:31,982:INFO:Checking exceptions
2024-11-03 05:06:31,982:INFO:Preloading libraries
2024-11-03 05:06:31,982:INFO:Set up data.
2024-11-03 05:06:31,987:INFO:Set up index.
2024-11-03 05:06:32,117:INFO:Initializing predict_model()
2024-11-03 05:06:32,117:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:32,117:INFO:Checking exceptions
2024-11-03 05:06:32,117:INFO:Preloading libraries
2024-11-03 05:06:32,117:INFO:Set up data.
2024-11-03 05:06:32,121:INFO:Set up index.
2024-11-03 05:06:32,272:INFO:Initializing predict_model()
2024-11-03 05:06:32,273:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:32,273:INFO:Checking exceptions
2024-11-03 05:06:32,273:INFO:Preloading libraries
2024-11-03 05:06:32,273:INFO:Set up data.
2024-11-03 05:06:32,276:INFO:Set up index.
2024-11-03 05:06:32,412:INFO:Initializing predict_model()
2024-11-03 05:06:32,412:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:32,412:INFO:Checking exceptions
2024-11-03 05:06:32,412:INFO:Preloading libraries
2024-11-03 05:06:32,412:INFO:Set up data.
2024-11-03 05:06:32,416:INFO:Set up index.
2024-11-03 05:06:32,554:INFO:Initializing predict_model()
2024-11-03 05:06:32,555:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:32,555:INFO:Checking exceptions
2024-11-03 05:06:32,555:INFO:Preloading libraries
2024-11-03 05:06:32,555:INFO:Set up data.
2024-11-03 05:06:32,561:INFO:Set up index.
2024-11-03 05:06:32,693:INFO:Initializing predict_model()
2024-11-03 05:06:32,693:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:32,693:INFO:Checking exceptions
2024-11-03 05:06:32,693:INFO:Preloading libraries
2024-11-03 05:06:32,693:INFO:Set up data.
2024-11-03 05:06:32,697:INFO:Set up index.
2024-11-03 05:06:32,909:INFO:Initializing predict_model()
2024-11-03 05:06:32,909:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD29619D0>)
2024-11-03 05:06:32,909:INFO:Checking exceptions
2024-11-03 05:06:32,909:INFO:Preloading libraries
2024-11-03 05:06:32,909:INFO:Set up data.
2024-11-03 05:06:32,913:INFO:Set up index.
2024-11-03 05:06:33,046:INFO:Initializing predict_model()
2024-11-03 05:06:33,046:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DDC0>)
2024-11-03 05:06:33,046:INFO:Checking exceptions
2024-11-03 05:06:33,046:INFO:Preloading libraries
2024-11-03 05:06:33,047:INFO:Set up data.
2024-11-03 05:06:33,050:INFO:Set up index.
2024-11-03 05:06:33,190:INFO:Initializing predict_model()
2024-11-03 05:06:33,190:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:33,190:INFO:Checking exceptions
2024-11-03 05:06:33,190:INFO:Preloading libraries
2024-11-03 05:06:33,190:INFO:Set up data.
2024-11-03 05:06:33,194:INFO:Set up index.
2024-11-03 05:06:33,333:INFO:Initializing predict_model()
2024-11-03 05:06:33,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:33,334:INFO:Checking exceptions
2024-11-03 05:06:33,334:INFO:Preloading libraries
2024-11-03 05:06:33,334:INFO:Set up data.
2024-11-03 05:06:33,338:INFO:Set up index.
2024-11-03 05:06:33,470:INFO:Initializing predict_model()
2024-11-03 05:06:33,470:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:33,471:INFO:Checking exceptions
2024-11-03 05:06:33,471:INFO:Preloading libraries
2024-11-03 05:06:33,471:INFO:Set up data.
2024-11-03 05:06:33,475:INFO:Set up index.
2024-11-03 05:06:33,610:INFO:Initializing predict_model()
2024-11-03 05:06:33,610:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:33,610:INFO:Checking exceptions
2024-11-03 05:06:33,610:INFO:Preloading libraries
2024-11-03 05:06:33,611:INFO:Set up data.
2024-11-03 05:06:33,614:INFO:Set up index.
2024-11-03 05:06:33,752:INFO:Initializing predict_model()
2024-11-03 05:06:33,752:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:33,752:INFO:Checking exceptions
2024-11-03 05:06:33,752:INFO:Preloading libraries
2024-11-03 05:06:33,753:INFO:Set up data.
2024-11-03 05:06:33,757:INFO:Set up index.
2024-11-03 05:06:33,888:INFO:Initializing predict_model()
2024-11-03 05:06:33,888:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:33,888:INFO:Checking exceptions
2024-11-03 05:06:33,888:INFO:Preloading libraries
2024-11-03 05:06:33,889:INFO:Set up data.
2024-11-03 05:06:33,893:INFO:Set up index.
2024-11-03 05:06:34,028:INFO:Initializing predict_model()
2024-11-03 05:06:34,028:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:34,028:INFO:Checking exceptions
2024-11-03 05:06:34,028:INFO:Preloading libraries
2024-11-03 05:06:34,028:INFO:Set up data.
2024-11-03 05:06:34,032:INFO:Set up index.
2024-11-03 05:06:34,165:INFO:Initializing predict_model()
2024-11-03 05:06:34,166:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29A3130>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:34,166:INFO:Checking exceptions
2024-11-03 05:06:34,166:INFO:Preloading libraries
2024-11-03 05:06:34,166:INFO:Set up data.
2024-11-03 05:06:34,172:INFO:Set up index.
2024-11-03 05:06:34,290:INFO:Initializing predict_model()
2024-11-03 05:06:34,290:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29A36A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:34,290:INFO:Checking exceptions
2024-11-03 05:06:34,290:INFO:Preloading libraries
2024-11-03 05:06:34,290:INFO:Set up data.
2024-11-03 05:06:34,294:INFO:Set up index.
2024-11-03 05:06:34,444:INFO:Initializing predict_model()
2024-11-03 05:06:34,444:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29A37C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:34,444:INFO:Checking exceptions
2024-11-03 05:06:34,444:INFO:Preloading libraries
2024-11-03 05:06:34,444:INFO:Set up data.
2024-11-03 05:06:34,448:INFO:Set up index.
2024-11-03 05:06:34,691:INFO:Initializing predict_model()
2024-11-03 05:06:34,691:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C83A0>)
2024-11-03 05:06:34,691:INFO:Checking exceptions
2024-11-03 05:06:34,691:INFO:Preloading libraries
2024-11-03 05:06:34,691:INFO:Set up data.
2024-11-03 05:06:34,696:INFO:Set up index.
2024-11-03 05:06:34,831:INFO:Initializing predict_model()
2024-11-03 05:06:34,831:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C8310>)
2024-11-03 05:06:34,832:INFO:Checking exceptions
2024-11-03 05:06:34,832:INFO:Preloading libraries
2024-11-03 05:06:34,832:INFO:Set up data.
2024-11-03 05:06:34,836:INFO:Set up index.
2024-11-03 05:06:34,970:INFO:Initializing predict_model()
2024-11-03 05:06:34,970:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:34,970:INFO:Checking exceptions
2024-11-03 05:06:34,970:INFO:Preloading libraries
2024-11-03 05:06:34,971:INFO:Set up data.
2024-11-03 05:06:34,975:INFO:Set up index.
2024-11-03 05:06:35,121:INFO:Initializing predict_model()
2024-11-03 05:06:35,121:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:35,121:INFO:Checking exceptions
2024-11-03 05:06:35,121:INFO:Preloading libraries
2024-11-03 05:06:35,121:INFO:Set up data.
2024-11-03 05:06:35,124:INFO:Set up index.
2024-11-03 05:06:35,258:INFO:Initializing predict_model()
2024-11-03 05:06:35,258:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:35,258:INFO:Checking exceptions
2024-11-03 05:06:35,258:INFO:Preloading libraries
2024-11-03 05:06:35,259:INFO:Set up data.
2024-11-03 05:06:35,262:INFO:Set up index.
2024-11-03 05:06:35,381:INFO:Initializing predict_model()
2024-11-03 05:06:35,381:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:35,381:INFO:Checking exceptions
2024-11-03 05:06:35,382:INFO:Preloading libraries
2024-11-03 05:06:35,382:INFO:Set up data.
2024-11-03 05:06:35,387:INFO:Set up index.
2024-11-03 05:06:35,522:INFO:Initializing predict_model()
2024-11-03 05:06:35,523:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:35,523:INFO:Checking exceptions
2024-11-03 05:06:35,523:INFO:Preloading libraries
2024-11-03 05:06:35,523:INFO:Set up data.
2024-11-03 05:06:35,527:INFO:Set up index.
2024-11-03 05:06:35,663:INFO:Initializing predict_model()
2024-11-03 05:06:35,663:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:35,663:INFO:Checking exceptions
2024-11-03 05:06:35,663:INFO:Preloading libraries
2024-11-03 05:06:35,664:INFO:Set up data.
2024-11-03 05:06:35,668:INFO:Set up index.
2024-11-03 05:06:35,791:INFO:Initializing predict_model()
2024-11-03 05:06:35,791:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:35,791:INFO:Checking exceptions
2024-11-03 05:06:35,792:INFO:Preloading libraries
2024-11-03 05:06:35,792:INFO:Set up data.
2024-11-03 05:06:35,795:INFO:Set up index.
2024-11-03 05:06:35,930:INFO:Initializing predict_model()
2024-11-03 05:06:35,930:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:35,930:INFO:Checking exceptions
2024-11-03 05:06:35,930:INFO:Preloading libraries
2024-11-03 05:06:35,931:INFO:Set up data.
2024-11-03 05:06:35,937:INFO:Set up index.
2024-11-03 05:06:36,075:INFO:Initializing predict_model()
2024-11-03 05:06:36,075:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:36,075:INFO:Checking exceptions
2024-11-03 05:06:36,075:INFO:Preloading libraries
2024-11-03 05:06:36,075:INFO:Set up data.
2024-11-03 05:06:36,078:INFO:Set up index.
2024-11-03 05:06:36,208:INFO:Initializing predict_model()
2024-11-03 05:06:36,209:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:36,209:INFO:Checking exceptions
2024-11-03 05:06:36,209:INFO:Preloading libraries
2024-11-03 05:06:36,209:INFO:Set up data.
2024-11-03 05:06:36,214:INFO:Set up index.
2024-11-03 05:06:36,347:INFO:Initializing predict_model()
2024-11-03 05:06:36,347:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:36,347:INFO:Checking exceptions
2024-11-03 05:06:36,347:INFO:Preloading libraries
2024-11-03 05:06:36,347:INFO:Set up data.
2024-11-03 05:06:36,351:INFO:Set up index.
2024-11-03 05:06:36,487:INFO:Initializing predict_model()
2024-11-03 05:06:36,487:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:36,487:INFO:Checking exceptions
2024-11-03 05:06:36,488:INFO:Preloading libraries
2024-11-03 05:06:36,488:INFO:Set up data.
2024-11-03 05:06:36,492:INFO:Set up index.
2024-11-03 05:06:36,644:INFO:Initializing predict_model()
2024-11-03 05:06:36,644:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:36,644:INFO:Checking exceptions
2024-11-03 05:06:36,644:INFO:Preloading libraries
2024-11-03 05:06:36,645:INFO:Set up data.
2024-11-03 05:06:36,650:INFO:Set up index.
2024-11-03 05:06:36,790:INFO:Initializing predict_model()
2024-11-03 05:06:36,790:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:36,790:INFO:Checking exceptions
2024-11-03 05:06:36,790:INFO:Preloading libraries
2024-11-03 05:06:36,791:INFO:Set up data.
2024-11-03 05:06:36,794:INFO:Set up index.
2024-11-03 05:06:36,932:INFO:Initializing predict_model()
2024-11-03 05:06:36,932:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:36,932:INFO:Checking exceptions
2024-11-03 05:06:36,932:INFO:Preloading libraries
2024-11-03 05:06:36,932:INFO:Set up data.
2024-11-03 05:06:36,936:INFO:Set up index.
2024-11-03 05:06:37,070:INFO:Initializing predict_model()
2024-11-03 05:06:37,070:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:37,070:INFO:Checking exceptions
2024-11-03 05:06:37,070:INFO:Preloading libraries
2024-11-03 05:06:37,070:INFO:Set up data.
2024-11-03 05:06:37,075:INFO:Set up index.
2024-11-03 05:06:37,215:INFO:Initializing predict_model()
2024-11-03 05:06:37,215:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:37,216:INFO:Checking exceptions
2024-11-03 05:06:37,216:INFO:Preloading libraries
2024-11-03 05:06:37,216:INFO:Set up data.
2024-11-03 05:06:37,219:INFO:Set up index.
2024-11-03 05:06:37,344:INFO:Initializing predict_model()
2024-11-03 05:06:37,344:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:37,344:INFO:Checking exceptions
2024-11-03 05:06:37,344:INFO:Preloading libraries
2024-11-03 05:06:37,345:INFO:Set up data.
2024-11-03 05:06:37,349:INFO:Set up index.
2024-11-03 05:06:37,491:INFO:Initializing predict_model()
2024-11-03 05:06:37,491:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:37,491:INFO:Checking exceptions
2024-11-03 05:06:37,491:INFO:Preloading libraries
2024-11-03 05:06:37,491:INFO:Set up data.
2024-11-03 05:06:37,496:INFO:Set up index.
2024-11-03 05:06:37,643:INFO:Initializing predict_model()
2024-11-03 05:06:37,643:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:37,643:INFO:Checking exceptions
2024-11-03 05:06:37,644:INFO:Preloading libraries
2024-11-03 05:06:37,644:INFO:Set up data.
2024-11-03 05:06:37,647:INFO:Set up index.
2024-11-03 05:06:37,785:INFO:Initializing predict_model()
2024-11-03 05:06:37,785:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD8078A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:37,785:INFO:Checking exceptions
2024-11-03 05:06:37,785:INFO:Preloading libraries
2024-11-03 05:06:37,785:INFO:Set up data.
2024-11-03 05:06:37,788:INFO:Set up index.
2024-11-03 05:06:37,925:INFO:Initializing predict_model()
2024-11-03 05:06:37,925:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD80785E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:37,925:INFO:Checking exceptions
2024-11-03 05:06:37,925:INFO:Preloading libraries
2024-11-03 05:06:37,926:INFO:Set up data.
2024-11-03 05:06:37,930:INFO:Set up index.
2024-11-03 05:06:38,061:INFO:Initializing predict_model()
2024-11-03 05:06:38,061:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD80C81F0>)
2024-11-03 05:06:38,061:INFO:Checking exceptions
2024-11-03 05:06:38,061:INFO:Preloading libraries
2024-11-03 05:06:38,061:INFO:Set up data.
2024-11-03 05:06:38,065:INFO:Set up index.
2024-11-03 05:06:38,199:INFO:Initializing predict_model()
2024-11-03 05:06:38,199:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BCAA26D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD8081B80>)
2024-11-03 05:06:38,199:INFO:Checking exceptions
2024-11-03 05:06:38,199:INFO:Preloading libraries
2024-11-03 05:06:38,199:INFO:Set up data.
2024-11-03 05:06:38,203:INFO:Set up index.
2024-11-03 05:06:38,333:INFO:Initializing predict_model()
2024-11-03 05:06:38,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD808D310>)
2024-11-03 05:06:38,333:INFO:Checking exceptions
2024-11-03 05:06:38,334:INFO:Preloading libraries
2024-11-03 05:06:38,334:INFO:Set up data.
2024-11-03 05:06:38,338:INFO:Set up index.
2024-11-03 05:06:38,473:INFO:Initializing predict_model()
2024-11-03 05:06:38,473:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BD29BD6A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BD292DF70>)
2024-11-03 05:06:38,473:INFO:Checking exceptions
2024-11-03 05:06:38,473:INFO:Preloading libraries
2024-11-03 05:06:38,474:INFO:Set up data.
2024-11-03 05:06:38,521:INFO:Set up index.
2024-11-03 05:07:05,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:07:05,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:07:05,548:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:07:05,548:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:07:07,680:INFO:PyCaret ClassificationExperiment
2024-11-03 05:07:07,680:INFO:Logging name: clf-default-name
2024-11-03 05:07:07,680:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 05:07:07,681:INFO:version 3.3.2
2024-11-03 05:07:07,681:INFO:Initializing setup()
2024-11-03 05:07:07,681:INFO:self.USI: fc66
2024-11-03 05:07:07,681:INFO:self._variable_keys: {'memory', 'gpu_n_jobs_param', 'pipeline', 'fold_generator', '_available_plots', 'y', 'y_test', 'data', 'seed', 'log_plots_param', 'USI', 'X_test', 'fix_imbalance', 'idx', 'logging_param', 'html_param', 'is_multiclass', 'fold_shuffle_param', 'gpu_param', 'n_jobs_param', '_ml_usecase', 'exp_name_log', 'fold_groups_param', 'X', 'X_train', 'y_train', 'exp_id', 'target_param'}
2024-11-03 05:07:07,681:INFO:Checking environment
2024-11-03 05:07:07,681:INFO:python_version: 3.9.5
2024-11-03 05:07:07,681:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 05:07:07,681:INFO:machine: AMD64
2024-11-03 05:07:07,696:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 05:07:07,700:INFO:Memory: svmem(total=17098203136, available=2338598912, percent=86.3, used=14759604224, free=2338598912)
2024-11-03 05:07:07,700:INFO:Physical Core: 4
2024-11-03 05:07:07,700:INFO:Logical Core: 4
2024-11-03 05:07:07,700:INFO:Checking libraries
2024-11-03 05:07:07,700:INFO:System:
2024-11-03 05:07:07,700:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 05:07:07,700:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 05:07:07,700:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 05:07:07,700:INFO:PyCaret required dependencies:
2024-11-03 05:07:07,761:INFO:                 pip: 21.1.3
2024-11-03 05:07:07,761:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 05:07:07,761:INFO:             pycaret: 3.3.2
2024-11-03 05:07:07,761:INFO:             IPython: 8.14.0
2024-11-03 05:07:07,761:INFO:          ipywidgets: 8.1.5
2024-11-03 05:07:07,761:INFO:                tqdm: 4.66.6
2024-11-03 05:07:07,761:INFO:               numpy: 1.26.4
2024-11-03 05:07:07,761:INFO:              pandas: 2.1.4
2024-11-03 05:07:07,761:INFO:              jinja2: 3.1.4
2024-11-03 05:07:07,761:INFO:               scipy: 1.11.4
2024-11-03 05:07:07,761:INFO:              joblib: 1.3.2
2024-11-03 05:07:07,761:INFO:             sklearn: 1.4.2
2024-11-03 05:07:07,761:INFO:                pyod: 2.0.2
2024-11-03 05:07:07,761:INFO:            imblearn: 0.12.4
2024-11-03 05:07:07,761:INFO:   category_encoders: 2.6.4
2024-11-03 05:07:07,761:INFO:            lightgbm: 4.5.0
2024-11-03 05:07:07,762:INFO:               numba: 0.60.0
2024-11-03 05:07:07,762:INFO:            requests: 2.32.3
2024-11-03 05:07:07,762:INFO:          matplotlib: 3.7.5
2024-11-03 05:07:07,762:INFO:          scikitplot: 0.3.7
2024-11-03 05:07:07,762:INFO:         yellowbrick: 1.5
2024-11-03 05:07:07,762:INFO:              plotly: 5.24.1
2024-11-03 05:07:07,762:INFO:    plotly-resampler: Not installed
2024-11-03 05:07:07,762:INFO:             kaleido: 0.2.1
2024-11-03 05:07:07,762:INFO:           schemdraw: 0.15
2024-11-03 05:07:07,762:INFO:         statsmodels: 0.14.4
2024-11-03 05:07:07,762:INFO:              sktime: 0.26.0
2024-11-03 05:07:07,762:INFO:               tbats: 1.1.3
2024-11-03 05:07:07,762:INFO:            pmdarima: 2.0.4
2024-11-03 05:07:07,762:INFO:              psutil: 5.9.5
2024-11-03 05:07:07,762:INFO:          markupsafe: 3.0.2
2024-11-03 05:07:07,762:INFO:             pickle5: Not installed
2024-11-03 05:07:07,762:INFO:         cloudpickle: 3.1.0
2024-11-03 05:07:07,762:INFO:         deprecation: 2.1.0
2024-11-03 05:07:07,762:INFO:              xxhash: 3.5.0
2024-11-03 05:07:07,762:INFO:           wurlitzer: Not installed
2024-11-03 05:07:07,762:INFO:PyCaret optional dependencies:
2024-11-03 05:07:07,784:INFO:                shap: Not installed
2024-11-03 05:07:07,785:INFO:           interpret: Not installed
2024-11-03 05:07:07,785:INFO:                umap: Not installed
2024-11-03 05:07:07,785:INFO:     ydata_profiling: Not installed
2024-11-03 05:07:07,785:INFO:  explainerdashboard: Not installed
2024-11-03 05:07:07,785:INFO:             autoviz: Not installed
2024-11-03 05:07:07,785:INFO:           fairlearn: Not installed
2024-11-03 05:07:07,785:INFO:          deepchecks: Not installed
2024-11-03 05:07:07,785:INFO:             xgboost: Not installed
2024-11-03 05:07:07,785:INFO:            catboost: Not installed
2024-11-03 05:07:07,785:INFO:              kmodes: Not installed
2024-11-03 05:07:07,785:INFO:             mlxtend: Not installed
2024-11-03 05:07:07,785:INFO:       statsforecast: Not installed
2024-11-03 05:07:07,785:INFO:        tune_sklearn: Not installed
2024-11-03 05:07:07,785:INFO:                 ray: Not installed
2024-11-03 05:07:07,785:INFO:            hyperopt: Not installed
2024-11-03 05:07:07,785:INFO:              optuna: Not installed
2024-11-03 05:07:07,785:INFO:               skopt: Not installed
2024-11-03 05:07:07,785:INFO:              mlflow: Not installed
2024-11-03 05:07:07,785:INFO:              gradio: Not installed
2024-11-03 05:07:07,786:INFO:             fastapi: Not installed
2024-11-03 05:07:07,786:INFO:             uvicorn: Not installed
2024-11-03 05:07:07,786:INFO:              m2cgen: Not installed
2024-11-03 05:07:07,786:INFO:           evidently: Not installed
2024-11-03 05:07:07,786:INFO:               fugue: Not installed
2024-11-03 05:07:07,786:INFO:           streamlit: Not installed
2024-11-03 05:07:07,786:INFO:             prophet: Not installed
2024-11-03 05:07:07,786:INFO:None
2024-11-03 05:07:07,786:INFO:Set up data.
2024-11-03 05:07:07,797:INFO:Set up folding strategy.
2024-11-03 05:07:07,797:INFO:Set up train/test split.
2024-11-03 05:07:07,804:INFO:Set up index.
2024-11-03 05:07:07,807:INFO:Assigning column types.
2024-11-03 05:07:07,814:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 05:07:07,866:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 05:07:07,871:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:07:07,913:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:07,913:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:07,964:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 05:07:07,965:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:07:07,998:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:07,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:07,999:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 05:07:08,052:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:07:08,084:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,138:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:07:08,171:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,172:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,172:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 05:07:08,256:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,344:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,344:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,347:INFO:Preparing preprocessing pipeline...
2024-11-03 05:07:08,349:INFO:Set up simple imputation.
2024-11-03 05:07:08,349:INFO:Set up feature normalization.
2024-11-03 05:07:08,349:INFO:Set up feature selection.
2024-11-03 05:07:08,432:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,433:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,495:INFO:Finished creating preprocessing pipeline.
2024-11-03 05:07:08,508:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 05:07:08,508:INFO:Creating final display dataframe.
2024-11-03 05:07:08,665:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (44, 20)
4        Transformed data shape           (44, 4)
5   Transformed train set shape           (30, 4)
6    Transformed test set shape           (14, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                 5
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              fc66
2024-11-03 05:07:08,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,959:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,960:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:07:08,961:INFO:setup() successfully completed in 1.3s...............
2024-11-03 05:07:08,962:INFO:Initializing compare_models()
2024-11-03 05:07:08,962:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, include=None, fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 05:07:08,962:INFO:Checking exceptions
2024-11-03 05:07:08,973:INFO:Preparing display monitor
2024-11-03 05:07:08,978:INFO:Initializing Logistic Regression
2024-11-03 05:07:08,978:INFO:Total runtime is 0.0 minutes
2024-11-03 05:07:08,978:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:08,979:INFO:Initializing create_model()
2024-11-03 05:07:08,979:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:08,979:INFO:Checking exceptions
2024-11-03 05:07:08,979:INFO:Importing libraries
2024-11-03 05:07:08,979:INFO:Copying training dataset
2024-11-03 05:07:08,985:INFO:Defining folds
2024-11-03 05:07:08,985:INFO:Declaring metric variables
2024-11-03 05:07:08,985:INFO:Importing untrained model
2024-11-03 05:07:08,985:INFO:Logistic Regression Imported successfully
2024-11-03 05:07:08,986:INFO:Starting cross validation
2024-11-03 05:07:08,988:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:13,116:INFO:Calculating mean and std
2024-11-03 05:07:13,117:INFO:Creating metrics dataframe
2024-11-03 05:07:13,120:INFO:Uploading results into container
2024-11-03 05:07:13,120:INFO:Uploading model into container now
2024-11-03 05:07:13,121:INFO:_master_model_container: 1
2024-11-03 05:07:13,121:INFO:_display_container: 2
2024-11-03 05:07:13,122:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 05:07:13,122:INFO:create_model() successfully completed......................................
2024-11-03 05:07:13,180:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:13,180:INFO:Creating metrics dataframe
2024-11-03 05:07:13,183:INFO:Initializing K Neighbors Classifier
2024-11-03 05:07:13,183:INFO:Total runtime is 0.07008368968963623 minutes
2024-11-03 05:07:13,183:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:13,183:INFO:Initializing create_model()
2024-11-03 05:07:13,184:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:13,184:INFO:Checking exceptions
2024-11-03 05:07:13,184:INFO:Importing libraries
2024-11-03 05:07:13,184:INFO:Copying training dataset
2024-11-03 05:07:13,190:INFO:Defining folds
2024-11-03 05:07:13,190:INFO:Declaring metric variables
2024-11-03 05:07:13,190:INFO:Importing untrained model
2024-11-03 05:07:13,190:INFO:K Neighbors Classifier Imported successfully
2024-11-03 05:07:13,191:INFO:Starting cross validation
2024-11-03 05:07:13,193:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:13,588:INFO:Calculating mean and std
2024-11-03 05:07:13,589:INFO:Creating metrics dataframe
2024-11-03 05:07:13,591:INFO:Uploading results into container
2024-11-03 05:07:13,591:INFO:Uploading model into container now
2024-11-03 05:07:13,592:INFO:_master_model_container: 2
2024-11-03 05:07:13,592:INFO:_display_container: 2
2024-11-03 05:07:13,592:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 05:07:13,592:INFO:create_model() successfully completed......................................
2024-11-03 05:07:13,646:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:13,646:INFO:Creating metrics dataframe
2024-11-03 05:07:13,649:INFO:Initializing Naive Bayes
2024-11-03 05:07:13,649:INFO:Total runtime is 0.07784651517868042 minutes
2024-11-03 05:07:13,649:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:13,650:INFO:Initializing create_model()
2024-11-03 05:07:13,650:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:13,650:INFO:Checking exceptions
2024-11-03 05:07:13,650:INFO:Importing libraries
2024-11-03 05:07:13,650:INFO:Copying training dataset
2024-11-03 05:07:13,656:INFO:Defining folds
2024-11-03 05:07:13,656:INFO:Declaring metric variables
2024-11-03 05:07:13,656:INFO:Importing untrained model
2024-11-03 05:07:13,657:INFO:Naive Bayes Imported successfully
2024-11-03 05:07:13,657:INFO:Starting cross validation
2024-11-03 05:07:13,659:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:14,011:INFO:Calculating mean and std
2024-11-03 05:07:14,012:INFO:Creating metrics dataframe
2024-11-03 05:07:14,014:INFO:Uploading results into container
2024-11-03 05:07:14,015:INFO:Uploading model into container now
2024-11-03 05:07:14,015:INFO:_master_model_container: 3
2024-11-03 05:07:14,015:INFO:_display_container: 2
2024-11-03 05:07:14,015:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 05:07:14,015:INFO:create_model() successfully completed......................................
2024-11-03 05:07:14,068:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:14,068:INFO:Creating metrics dataframe
2024-11-03 05:07:14,072:INFO:Initializing Decision Tree Classifier
2024-11-03 05:07:14,072:INFO:Total runtime is 0.08490022023518881 minutes
2024-11-03 05:07:14,072:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:14,073:INFO:Initializing create_model()
2024-11-03 05:07:14,073:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:14,073:INFO:Checking exceptions
2024-11-03 05:07:14,073:INFO:Importing libraries
2024-11-03 05:07:14,073:INFO:Copying training dataset
2024-11-03 05:07:14,079:INFO:Defining folds
2024-11-03 05:07:14,080:INFO:Declaring metric variables
2024-11-03 05:07:14,080:INFO:Importing untrained model
2024-11-03 05:07:14,080:INFO:Decision Tree Classifier Imported successfully
2024-11-03 05:07:14,080:INFO:Starting cross validation
2024-11-03 05:07:14,082:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:14,340:INFO:Calculating mean and std
2024-11-03 05:07:14,341:INFO:Creating metrics dataframe
2024-11-03 05:07:14,343:INFO:Uploading results into container
2024-11-03 05:07:14,343:INFO:Uploading model into container now
2024-11-03 05:07:14,344:INFO:_master_model_container: 4
2024-11-03 05:07:14,344:INFO:_display_container: 2
2024-11-03 05:07:14,344:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 05:07:14,344:INFO:create_model() successfully completed......................................
2024-11-03 05:07:14,398:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:14,398:INFO:Creating metrics dataframe
2024-11-03 05:07:14,401:INFO:Initializing SVM - Linear Kernel
2024-11-03 05:07:14,401:INFO:Total runtime is 0.09038699865341188 minutes
2024-11-03 05:07:14,402:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:14,402:INFO:Initializing create_model()
2024-11-03 05:07:14,402:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:14,402:INFO:Checking exceptions
2024-11-03 05:07:14,402:INFO:Importing libraries
2024-11-03 05:07:14,402:INFO:Copying training dataset
2024-11-03 05:07:14,409:INFO:Defining folds
2024-11-03 05:07:14,409:INFO:Declaring metric variables
2024-11-03 05:07:14,409:INFO:Importing untrained model
2024-11-03 05:07:14,410:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 05:07:14,410:INFO:Starting cross validation
2024-11-03 05:07:14,412:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:14,583:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:14,668:INFO:Calculating mean and std
2024-11-03 05:07:14,669:INFO:Creating metrics dataframe
2024-11-03 05:07:14,671:INFO:Uploading results into container
2024-11-03 05:07:14,672:INFO:Uploading model into container now
2024-11-03 05:07:14,673:INFO:_master_model_container: 5
2024-11-03 05:07:14,673:INFO:_display_container: 2
2024-11-03 05:07:14,673:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 05:07:14,673:INFO:create_model() successfully completed......................................
2024-11-03 05:07:14,734:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:14,734:INFO:Creating metrics dataframe
2024-11-03 05:07:14,739:INFO:Initializing Ridge Classifier
2024-11-03 05:07:14,739:INFO:Total runtime is 0.09602522055308026 minutes
2024-11-03 05:07:14,739:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:14,740:INFO:Initializing create_model()
2024-11-03 05:07:14,740:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:14,740:INFO:Checking exceptions
2024-11-03 05:07:14,740:INFO:Importing libraries
2024-11-03 05:07:14,740:INFO:Copying training dataset
2024-11-03 05:07:14,750:INFO:Defining folds
2024-11-03 05:07:14,750:INFO:Declaring metric variables
2024-11-03 05:07:14,750:INFO:Importing untrained model
2024-11-03 05:07:14,751:INFO:Ridge Classifier Imported successfully
2024-11-03 05:07:14,751:INFO:Starting cross validation
2024-11-03 05:07:14,753:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:15,013:INFO:Calculating mean and std
2024-11-03 05:07:15,014:INFO:Creating metrics dataframe
2024-11-03 05:07:15,016:INFO:Uploading results into container
2024-11-03 05:07:15,017:INFO:Uploading model into container now
2024-11-03 05:07:15,017:INFO:_master_model_container: 6
2024-11-03 05:07:15,017:INFO:_display_container: 2
2024-11-03 05:07:15,017:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 05:07:15,017:INFO:create_model() successfully completed......................................
2024-11-03 05:07:15,069:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:15,069:INFO:Creating metrics dataframe
2024-11-03 05:07:15,072:INFO:Initializing Random Forest Classifier
2024-11-03 05:07:15,072:INFO:Total runtime is 0.1015734871228536 minutes
2024-11-03 05:07:15,072:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:15,073:INFO:Initializing create_model()
2024-11-03 05:07:15,073:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:15,073:INFO:Checking exceptions
2024-11-03 05:07:15,073:INFO:Importing libraries
2024-11-03 05:07:15,073:INFO:Copying training dataset
2024-11-03 05:07:15,079:INFO:Defining folds
2024-11-03 05:07:15,079:INFO:Declaring metric variables
2024-11-03 05:07:15,079:INFO:Importing untrained model
2024-11-03 05:07:15,080:INFO:Random Forest Classifier Imported successfully
2024-11-03 05:07:15,080:INFO:Starting cross validation
2024-11-03 05:07:15,082:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:15,778:INFO:Calculating mean and std
2024-11-03 05:07:15,779:INFO:Creating metrics dataframe
2024-11-03 05:07:15,781:INFO:Uploading results into container
2024-11-03 05:07:15,781:INFO:Uploading model into container now
2024-11-03 05:07:15,782:INFO:_master_model_container: 7
2024-11-03 05:07:15,782:INFO:_display_container: 2
2024-11-03 05:07:15,782:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 05:07:15,782:INFO:create_model() successfully completed......................................
2024-11-03 05:07:15,837:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:15,838:INFO:Creating metrics dataframe
2024-11-03 05:07:15,841:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 05:07:15,841:INFO:Total runtime is 0.11438633998235068 minutes
2024-11-03 05:07:15,841:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:15,841:INFO:Initializing create_model()
2024-11-03 05:07:15,841:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:15,841:INFO:Checking exceptions
2024-11-03 05:07:15,841:INFO:Importing libraries
2024-11-03 05:07:15,842:INFO:Copying training dataset
2024-11-03 05:07:15,848:INFO:Defining folds
2024-11-03 05:07:15,848:INFO:Declaring metric variables
2024-11-03 05:07:15,848:INFO:Importing untrained model
2024-11-03 05:07:15,848:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:07:15,848:INFO:Starting cross validation
2024-11-03 05:07:15,850:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:16,106:INFO:Calculating mean and std
2024-11-03 05:07:16,107:INFO:Creating metrics dataframe
2024-11-03 05:07:16,109:INFO:Uploading results into container
2024-11-03 05:07:16,110:INFO:Uploading model into container now
2024-11-03 05:07:16,110:INFO:_master_model_container: 8
2024-11-03 05:07:16,110:INFO:_display_container: 2
2024-11-03 05:07:16,110:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:07:16,110:INFO:create_model() successfully completed......................................
2024-11-03 05:07:16,161:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:16,161:INFO:Creating metrics dataframe
2024-11-03 05:07:16,164:INFO:Initializing Ada Boost Classifier
2024-11-03 05:07:16,164:INFO:Total runtime is 0.119777250289917 minutes
2024-11-03 05:07:16,164:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:16,165:INFO:Initializing create_model()
2024-11-03 05:07:16,165:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:16,165:INFO:Checking exceptions
2024-11-03 05:07:16,165:INFO:Importing libraries
2024-11-03 05:07:16,165:INFO:Copying training dataset
2024-11-03 05:07:16,170:INFO:Defining folds
2024-11-03 05:07:16,170:INFO:Declaring metric variables
2024-11-03 05:07:16,170:INFO:Importing untrained model
2024-11-03 05:07:16,171:INFO:Ada Boost Classifier Imported successfully
2024-11-03 05:07:16,171:INFO:Starting cross validation
2024-11-03 05:07:16,173:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:16,311:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:07:16,311:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:07:16,318:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:07:16,322:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:07:16,495:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:07:16,621:INFO:Calculating mean and std
2024-11-03 05:07:16,622:INFO:Creating metrics dataframe
2024-11-03 05:07:16,624:INFO:Uploading results into container
2024-11-03 05:07:16,624:INFO:Uploading model into container now
2024-11-03 05:07:16,625:INFO:_master_model_container: 9
2024-11-03 05:07:16,625:INFO:_display_container: 2
2024-11-03 05:07:16,625:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 05:07:16,625:INFO:create_model() successfully completed......................................
2024-11-03 05:07:16,681:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:16,681:INFO:Creating metrics dataframe
2024-11-03 05:07:16,684:INFO:Initializing Gradient Boosting Classifier
2024-11-03 05:07:16,685:INFO:Total runtime is 0.128458042939504 minutes
2024-11-03 05:07:16,685:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:16,685:INFO:Initializing create_model()
2024-11-03 05:07:16,685:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:16,685:INFO:Checking exceptions
2024-11-03 05:07:16,685:INFO:Importing libraries
2024-11-03 05:07:16,685:INFO:Copying training dataset
2024-11-03 05:07:16,691:INFO:Defining folds
2024-11-03 05:07:16,691:INFO:Declaring metric variables
2024-11-03 05:07:16,691:INFO:Importing untrained model
2024-11-03 05:07:16,691:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 05:07:16,692:INFO:Starting cross validation
2024-11-03 05:07:16,693:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:17,136:INFO:Calculating mean and std
2024-11-03 05:07:17,137:INFO:Creating metrics dataframe
2024-11-03 05:07:17,139:INFO:Uploading results into container
2024-11-03 05:07:17,139:INFO:Uploading model into container now
2024-11-03 05:07:17,140:INFO:_master_model_container: 10
2024-11-03 05:07:17,140:INFO:_display_container: 2
2024-11-03 05:07:17,140:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 05:07:17,140:INFO:create_model() successfully completed......................................
2024-11-03 05:07:17,195:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:17,195:INFO:Creating metrics dataframe
2024-11-03 05:07:17,198:INFO:Initializing Linear Discriminant Analysis
2024-11-03 05:07:17,198:INFO:Total runtime is 0.13700516223907472 minutes
2024-11-03 05:07:17,198:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:17,199:INFO:Initializing create_model()
2024-11-03 05:07:17,199:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:17,199:INFO:Checking exceptions
2024-11-03 05:07:17,199:INFO:Importing libraries
2024-11-03 05:07:17,199:INFO:Copying training dataset
2024-11-03 05:07:17,205:INFO:Defining folds
2024-11-03 05:07:17,205:INFO:Declaring metric variables
2024-11-03 05:07:17,205:INFO:Importing untrained model
2024-11-03 05:07:17,205:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 05:07:17,206:INFO:Starting cross validation
2024-11-03 05:07:17,207:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:17,558:INFO:Calculating mean and std
2024-11-03 05:07:17,559:INFO:Creating metrics dataframe
2024-11-03 05:07:17,561:INFO:Uploading results into container
2024-11-03 05:07:17,562:INFO:Uploading model into container now
2024-11-03 05:07:17,563:INFO:_master_model_container: 11
2024-11-03 05:07:17,563:INFO:_display_container: 2
2024-11-03 05:07:17,563:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 05:07:17,563:INFO:create_model() successfully completed......................................
2024-11-03 05:07:17,616:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:17,616:INFO:Creating metrics dataframe
2024-11-03 05:07:17,619:INFO:Initializing Extra Trees Classifier
2024-11-03 05:07:17,619:INFO:Total runtime is 0.14401689767837525 minutes
2024-11-03 05:07:17,619:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:17,619:INFO:Initializing create_model()
2024-11-03 05:07:17,619:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:17,620:INFO:Checking exceptions
2024-11-03 05:07:17,620:INFO:Importing libraries
2024-11-03 05:07:17,620:INFO:Copying training dataset
2024-11-03 05:07:17,625:INFO:Defining folds
2024-11-03 05:07:17,625:INFO:Declaring metric variables
2024-11-03 05:07:17,625:INFO:Importing untrained model
2024-11-03 05:07:17,626:INFO:Extra Trees Classifier Imported successfully
2024-11-03 05:07:17,626:INFO:Starting cross validation
2024-11-03 05:07:17,628:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:18,213:INFO:Calculating mean and std
2024-11-03 05:07:18,215:INFO:Creating metrics dataframe
2024-11-03 05:07:18,217:INFO:Uploading results into container
2024-11-03 05:07:18,217:INFO:Uploading model into container now
2024-11-03 05:07:18,218:INFO:_master_model_container: 12
2024-11-03 05:07:18,218:INFO:_display_container: 2
2024-11-03 05:07:18,218:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 05:07:18,218:INFO:create_model() successfully completed......................................
2024-11-03 05:07:18,270:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:18,270:INFO:Creating metrics dataframe
2024-11-03 05:07:18,273:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 05:07:18,273:INFO:Total runtime is 0.15492107073465983 minutes
2024-11-03 05:07:18,273:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:18,273:INFO:Initializing create_model()
2024-11-03 05:07:18,273:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:18,273:INFO:Checking exceptions
2024-11-03 05:07:18,273:INFO:Importing libraries
2024-11-03 05:07:18,273:INFO:Copying training dataset
2024-11-03 05:07:18,279:INFO:Defining folds
2024-11-03 05:07:18,279:INFO:Declaring metric variables
2024-11-03 05:07:18,280:INFO:Importing untrained model
2024-11-03 05:07:18,280:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 05:07:18,280:INFO:Starting cross validation
2024-11-03 05:07:18,282:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:18,594:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,595:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,595:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,596:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,695:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,713:INFO:Calculating mean and std
2024-11-03 05:07:18,714:INFO:Creating metrics dataframe
2024-11-03 05:07:18,716:INFO:Uploading results into container
2024-11-03 05:07:18,716:INFO:Uploading model into container now
2024-11-03 05:07:18,717:INFO:_master_model_container: 13
2024-11-03 05:07:18,717:INFO:_display_container: 2
2024-11-03 05:07:18,717:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 05:07:18,717:INFO:create_model() successfully completed......................................
2024-11-03 05:07:18,769:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:18,769:INFO:Creating metrics dataframe
2024-11-03 05:07:18,772:INFO:Initializing Dummy Classifier
2024-11-03 05:07:18,772:INFO:Total runtime is 0.1632381200790405 minutes
2024-11-03 05:07:18,772:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:18,772:INFO:Initializing create_model()
2024-11-03 05:07:18,773:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:18,773:INFO:Checking exceptions
2024-11-03 05:07:18,773:INFO:Importing libraries
2024-11-03 05:07:18,773:INFO:Copying training dataset
2024-11-03 05:07:18,778:INFO:Defining folds
2024-11-03 05:07:18,778:INFO:Declaring metric variables
2024-11-03 05:07:18,779:INFO:Importing untrained model
2024-11-03 05:07:18,779:INFO:Dummy Classifier Imported successfully
2024-11-03 05:07:18,779:INFO:Starting cross validation
2024-11-03 05:07:18,781:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:18,939:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,941:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,944:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:18,951:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:19,012:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:07:19,026:INFO:Calculating mean and std
2024-11-03 05:07:19,027:INFO:Creating metrics dataframe
2024-11-03 05:07:19,029:INFO:Uploading results into container
2024-11-03 05:07:19,029:INFO:Uploading model into container now
2024-11-03 05:07:19,029:INFO:_master_model_container: 14
2024-11-03 05:07:19,030:INFO:_display_container: 2
2024-11-03 05:07:19,030:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 05:07:19,030:INFO:create_model() successfully completed......................................
2024-11-03 05:07:19,081:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:19,081:INFO:Creating metrics dataframe
2024-11-03 05:07:19,086:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-03 05:07:19,088:INFO:Initializing create_model()
2024-11-03 05:07:19,089:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:19,089:INFO:Checking exceptions
2024-11-03 05:07:19,089:INFO:Importing libraries
2024-11-03 05:07:19,089:INFO:Copying training dataset
2024-11-03 05:07:19,095:INFO:Defining folds
2024-11-03 05:07:19,095:INFO:Declaring metric variables
2024-11-03 05:07:19,095:INFO:Importing untrained model
2024-11-03 05:07:19,095:INFO:Declaring custom model
2024-11-03 05:07:19,096:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:07:19,098:INFO:Cross validation set to False
2024-11-03 05:07:19,098:INFO:Fitting Model
2024-11-03 05:07:19,180:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:07:19,181:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:07:19,181:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:07:19,181:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:07:19,181:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:07:19,181:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,182:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,183:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,184:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,185:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,186:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,187:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,188:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,189:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,190:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:19,196:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:07:19,196:INFO:create_model() successfully completed......................................
2024-11-03 05:07:19,264:INFO:_master_model_container: 14
2024-11-03 05:07:19,265:INFO:_display_container: 2
2024-11-03 05:07:19,265:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:07:19,265:INFO:compare_models() successfully completed......................................
2024-11-03 05:07:19,265:INFO:Initializing tune_model()
2024-11-03 05:07:19,266:INFO:tune_model(estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>)
2024-11-03 05:07:19,266:INFO:Checking exceptions
2024-11-03 05:07:19,269:INFO:Copying training dataset
2024-11-03 05:07:19,273:INFO:Checking base model
2024-11-03 05:07:19,274:INFO:Base model : Quadratic Discriminant Analysis
2024-11-03 05:07:19,274:INFO:Declaring metric variables
2024-11-03 05:07:19,274:INFO:Defining Hyperparameters
2024-11-03 05:07:19,333:INFO:Tuning with n_jobs=-1
2024-11-03 05:07:19,333:INFO:Initializing RandomizedSearchCV
2024-11-03 05:07:21,669:INFO:best_params: {'actual_estimator__reg_param': 0.47}
2024-11-03 05:07:21,669:INFO:Hyperparameter search completed
2024-11-03 05:07:21,669:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:21,670:INFO:Initializing create_model()
2024-11-03 05:07:21,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001901128EE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_param': 0.47})
2024-11-03 05:07:21,670:INFO:Checking exceptions
2024-11-03 05:07:21,670:INFO:Importing libraries
2024-11-03 05:07:21,670:INFO:Copying training dataset
2024-11-03 05:07:21,676:INFO:Defining folds
2024-11-03 05:07:21,676:INFO:Declaring metric variables
2024-11-03 05:07:21,677:INFO:Importing untrained model
2024-11-03 05:07:21,677:INFO:Declaring custom model
2024-11-03 05:07:21,677:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:07:21,677:INFO:Starting cross validation
2024-11-03 05:07:21,679:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:21,918:INFO:Calculating mean and std
2024-11-03 05:07:21,919:INFO:Creating metrics dataframe
2024-11-03 05:07:21,921:INFO:Finalizing model
2024-11-03 05:07:21,935:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:07:21,936:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:07:21,936:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:07:21,936:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:07:21,936:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:07:21,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,936:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,937:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,938:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,939:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,940:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,941:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,942:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,943:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,944:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,945:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,946:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,946:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,946:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:21,952:INFO:Uploading results into container
2024-11-03 05:07:21,952:INFO:Uploading model into container now
2024-11-03 05:07:21,953:INFO:_master_model_container: 15
2024-11-03 05:07:21,953:INFO:_display_container: 3
2024-11-03 05:07:21,953:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:07:21,953:INFO:create_model() successfully completed......................................
2024-11-03 05:07:22,001:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:22,001:INFO:choose_better activated
2024-11-03 05:07:22,001:INFO:SubProcess create_model() called ==================================
2024-11-03 05:07:22,001:INFO:Initializing create_model()
2024-11-03 05:07:22,001:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019079B6FA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:07:22,002:INFO:Checking exceptions
2024-11-03 05:07:22,002:INFO:Importing libraries
2024-11-03 05:07:22,002:INFO:Copying training dataset
2024-11-03 05:07:22,008:INFO:Defining folds
2024-11-03 05:07:22,008:INFO:Declaring metric variables
2024-11-03 05:07:22,008:INFO:Importing untrained model
2024-11-03 05:07:22,008:INFO:Declaring custom model
2024-11-03 05:07:22,009:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:07:22,009:INFO:Starting cross validation
2024-11-03 05:07:22,011:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:07:22,261:INFO:Calculating mean and std
2024-11-03 05:07:22,261:INFO:Creating metrics dataframe
2024-11-03 05:07:22,263:INFO:Finalizing model
2024-11-03 05:07:22,276:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:07:22,277:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:07:22,277:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:07:22,277:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:07:22,277:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:07:22,277:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,277:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,277:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,278:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,279:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,280:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,281:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,282:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:07:22,291:INFO:Uploading results into container
2024-11-03 05:07:22,291:INFO:Uploading model into container now
2024-11-03 05:07:22,292:INFO:_master_model_container: 16
2024-11-03 05:07:22,292:INFO:_display_container: 4
2024-11-03 05:07:22,292:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:07:22,292:INFO:create_model() successfully completed......................................
2024-11-03 05:07:22,340:INFO:SubProcess create_model() end ==================================
2024-11-03 05:07:22,341:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 05:07:22,341:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 05:07:22,341:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) is best model
2024-11-03 05:07:22,342:INFO:choose_better completed
2024-11-03 05:07:22,342:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 05:07:22,352:INFO:_master_model_container: 16
2024-11-03 05:07:22,353:INFO:_display_container: 3
2024-11-03 05:07:22,353:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:07:22,353:INFO:tune_model() successfully completed......................................
2024-11-03 05:24:36,418:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:24:36,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:24:36,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:24:36,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:29:36,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:29:36,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:29:36,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:29:36,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:01,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:01,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:01,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:01,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:25,965:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:25,965:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:25,965:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:32:25,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:33:44,098:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:33:44,098:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:33:44,098:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:33:44,098:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:34:34,371:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:34:34,371:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:34:34,371:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:34:34,372:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:34:36,444:INFO:PyCaret ClassificationExperiment
2024-11-03 05:34:36,445:INFO:Logging name: clf-default-name
2024-11-03 05:34:36,445:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 05:34:36,445:INFO:version 3.3.2
2024-11-03 05:34:36,445:INFO:Initializing setup()
2024-11-03 05:34:36,445:INFO:self.USI: 4bbf
2024-11-03 05:34:36,445:INFO:self._variable_keys: {'data', 'gpu_param', 'USI', 'exp_name_log', 'y_train', 'X_test', 'logging_param', 'n_jobs_param', 'target_param', 'gpu_n_jobs_param', 'idx', 'seed', 'memory', 'log_plots_param', 'y', 'fix_imbalance', '_available_plots', 'X', 'pipeline', 'y_test', 'X_train', 'fold_generator', 'fold_shuffle_param', '_ml_usecase', 'html_param', 'fold_groups_param', 'exp_id', 'is_multiclass'}
2024-11-03 05:34:36,445:INFO:Checking environment
2024-11-03 05:34:36,445:INFO:python_version: 3.9.5
2024-11-03 05:34:36,445:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 05:34:36,445:INFO:machine: AMD64
2024-11-03 05:34:36,477:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 05:34:36,480:INFO:Memory: svmem(total=17098203136, available=1340903424, percent=92.2, used=15757299712, free=1340903424)
2024-11-03 05:34:36,480:INFO:Physical Core: 4
2024-11-03 05:34:36,480:INFO:Logical Core: 4
2024-11-03 05:34:36,480:INFO:Checking libraries
2024-11-03 05:34:36,481:INFO:System:
2024-11-03 05:34:36,481:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 05:34:36,481:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 05:34:36,481:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 05:34:36,481:INFO:PyCaret required dependencies:
2024-11-03 05:34:36,558:INFO:                 pip: 21.1.3
2024-11-03 05:34:36,558:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 05:34:36,558:INFO:             pycaret: 3.3.2
2024-11-03 05:34:36,558:INFO:             IPython: 8.14.0
2024-11-03 05:34:36,558:INFO:          ipywidgets: 8.1.5
2024-11-03 05:34:36,558:INFO:                tqdm: 4.66.6
2024-11-03 05:34:36,558:INFO:               numpy: 1.26.4
2024-11-03 05:34:36,558:INFO:              pandas: 2.1.4
2024-11-03 05:34:36,558:INFO:              jinja2: 3.1.4
2024-11-03 05:34:36,558:INFO:               scipy: 1.11.4
2024-11-03 05:34:36,558:INFO:              joblib: 1.3.2
2024-11-03 05:34:36,558:INFO:             sklearn: 1.4.2
2024-11-03 05:34:36,558:INFO:                pyod: 2.0.2
2024-11-03 05:34:36,558:INFO:            imblearn: 0.12.4
2024-11-03 05:34:36,558:INFO:   category_encoders: 2.6.4
2024-11-03 05:34:36,558:INFO:            lightgbm: 4.5.0
2024-11-03 05:34:36,558:INFO:               numba: 0.60.0
2024-11-03 05:34:36,558:INFO:            requests: 2.32.3
2024-11-03 05:34:36,558:INFO:          matplotlib: 3.7.5
2024-11-03 05:34:36,559:INFO:          scikitplot: 0.3.7
2024-11-03 05:34:36,559:INFO:         yellowbrick: 1.5
2024-11-03 05:34:36,559:INFO:              plotly: 5.24.1
2024-11-03 05:34:36,559:INFO:    plotly-resampler: Not installed
2024-11-03 05:34:36,559:INFO:             kaleido: 0.2.1
2024-11-03 05:34:36,559:INFO:           schemdraw: 0.15
2024-11-03 05:34:36,559:INFO:         statsmodels: 0.14.4
2024-11-03 05:34:36,559:INFO:              sktime: 0.26.0
2024-11-03 05:34:36,559:INFO:               tbats: 1.1.3
2024-11-03 05:34:36,559:INFO:            pmdarima: 2.0.4
2024-11-03 05:34:36,559:INFO:              psutil: 5.9.5
2024-11-03 05:34:36,559:INFO:          markupsafe: 3.0.2
2024-11-03 05:34:36,559:INFO:             pickle5: Not installed
2024-11-03 05:34:36,559:INFO:         cloudpickle: 3.1.0
2024-11-03 05:34:36,559:INFO:         deprecation: 2.1.0
2024-11-03 05:34:36,559:INFO:              xxhash: 3.5.0
2024-11-03 05:34:36,559:INFO:           wurlitzer: Not installed
2024-11-03 05:34:36,559:INFO:PyCaret optional dependencies:
2024-11-03 05:34:36,582:INFO:                shap: Not installed
2024-11-03 05:34:36,582:INFO:           interpret: Not installed
2024-11-03 05:34:36,582:INFO:                umap: Not installed
2024-11-03 05:34:36,583:INFO:     ydata_profiling: Not installed
2024-11-03 05:34:36,583:INFO:  explainerdashboard: Not installed
2024-11-03 05:34:36,583:INFO:             autoviz: Not installed
2024-11-03 05:34:36,583:INFO:           fairlearn: Not installed
2024-11-03 05:34:36,583:INFO:          deepchecks: Not installed
2024-11-03 05:34:36,583:INFO:             xgboost: Not installed
2024-11-03 05:34:36,583:INFO:            catboost: Not installed
2024-11-03 05:34:36,583:INFO:              kmodes: Not installed
2024-11-03 05:34:36,583:INFO:             mlxtend: Not installed
2024-11-03 05:34:36,583:INFO:       statsforecast: Not installed
2024-11-03 05:34:36,583:INFO:        tune_sklearn: Not installed
2024-11-03 05:34:36,583:INFO:                 ray: Not installed
2024-11-03 05:34:36,583:INFO:            hyperopt: Not installed
2024-11-03 05:34:36,583:INFO:              optuna: Not installed
2024-11-03 05:34:36,583:INFO:               skopt: Not installed
2024-11-03 05:34:36,583:INFO:              mlflow: Not installed
2024-11-03 05:34:36,583:INFO:              gradio: Not installed
2024-11-03 05:34:36,583:INFO:             fastapi: Not installed
2024-11-03 05:34:36,583:INFO:             uvicorn: Not installed
2024-11-03 05:34:36,583:INFO:              m2cgen: Not installed
2024-11-03 05:34:36,583:INFO:           evidently: Not installed
2024-11-03 05:34:36,583:INFO:               fugue: Not installed
2024-11-03 05:34:36,583:INFO:           streamlit: Not installed
2024-11-03 05:34:36,583:INFO:             prophet: Not installed
2024-11-03 05:34:36,583:INFO:None
2024-11-03 05:34:36,583:INFO:Set up data.
2024-11-03 05:34:36,599:INFO:Set up folding strategy.
2024-11-03 05:34:36,599:INFO:Set up train/test split.
2024-11-03 05:34:36,607:INFO:Set up index.
2024-11-03 05:34:36,609:INFO:Assigning column types.
2024-11-03 05:34:36,615:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 05:34:36,663:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 05:34:36,667:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:34:36,706:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,706:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,755:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 05:34:36,756:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:34:36,786:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,787:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,787:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 05:34:36,841:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:34:36,873:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,873:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,922:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:34:36,952:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,952:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:36,952:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 05:34:37,029:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,111:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,113:INFO:Preparing preprocessing pipeline...
2024-11-03 05:34:37,116:INFO:Set up simple imputation.
2024-11-03 05:34:37,116:INFO:Set up feature normalization.
2024-11-03 05:34:37,116:INFO:Set up feature selection.
2024-11-03 05:34:37,193:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,194:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,254:INFO:Finished creating preprocessing pipeline.
2024-11-03 05:34:37,268:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 05:34:37,268:INFO:Creating final display dataframe.
2024-11-03 05:34:37,426:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (44, 20)
4        Transformed data shape           (44, 4)
5   Transformed train set shape           (30, 4)
6    Transformed test set shape           (14, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                 5
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              4bbf
2024-11-03 05:34:37,503:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,503:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,587:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:34:37,588:INFO:setup() successfully completed in 1.15s...............
2024-11-03 05:34:37,588:INFO:Initializing compare_models()
2024-11-03 05:34:37,588:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, include=None, fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 05:34:37,588:INFO:Checking exceptions
2024-11-03 05:34:37,597:INFO:Preparing display monitor
2024-11-03 05:34:37,599:INFO:Initializing Logistic Regression
2024-11-03 05:34:37,599:INFO:Total runtime is 0.0 minutes
2024-11-03 05:34:37,599:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:37,599:INFO:Initializing create_model()
2024-11-03 05:34:37,599:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:37,599:INFO:Checking exceptions
2024-11-03 05:34:37,600:INFO:Importing libraries
2024-11-03 05:34:37,600:INFO:Copying training dataset
2024-11-03 05:34:37,605:INFO:Defining folds
2024-11-03 05:34:37,605:INFO:Declaring metric variables
2024-11-03 05:34:37,605:INFO:Importing untrained model
2024-11-03 05:34:37,605:INFO:Logistic Regression Imported successfully
2024-11-03 05:34:37,606:INFO:Starting cross validation
2024-11-03 05:34:37,608:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:42,391:INFO:Calculating mean and std
2024-11-03 05:34:42,392:INFO:Creating metrics dataframe
2024-11-03 05:34:42,395:INFO:Uploading results into container
2024-11-03 05:34:42,395:INFO:Uploading model into container now
2024-11-03 05:34:42,395:INFO:_master_model_container: 1
2024-11-03 05:34:42,396:INFO:_display_container: 2
2024-11-03 05:34:42,396:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 05:34:42,396:INFO:create_model() successfully completed......................................
2024-11-03 05:34:42,482:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:42,482:INFO:Creating metrics dataframe
2024-11-03 05:34:42,500:INFO:Initializing K Neighbors Classifier
2024-11-03 05:34:42,500:INFO:Total runtime is 0.08168118000030518 minutes
2024-11-03 05:34:42,500:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:42,501:INFO:Initializing create_model()
2024-11-03 05:34:42,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:42,501:INFO:Checking exceptions
2024-11-03 05:34:42,501:INFO:Importing libraries
2024-11-03 05:34:42,501:INFO:Copying training dataset
2024-11-03 05:34:42,506:INFO:Defining folds
2024-11-03 05:34:42,506:INFO:Declaring metric variables
2024-11-03 05:34:42,507:INFO:Importing untrained model
2024-11-03 05:34:42,507:INFO:K Neighbors Classifier Imported successfully
2024-11-03 05:34:42,507:INFO:Starting cross validation
2024-11-03 05:34:42,509:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:43,076:INFO:Calculating mean and std
2024-11-03 05:34:43,076:INFO:Creating metrics dataframe
2024-11-03 05:34:43,078:INFO:Uploading results into container
2024-11-03 05:34:43,079:INFO:Uploading model into container now
2024-11-03 05:34:43,079:INFO:_master_model_container: 2
2024-11-03 05:34:43,079:INFO:_display_container: 2
2024-11-03 05:34:43,080:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 05:34:43,080:INFO:create_model() successfully completed......................................
2024-11-03 05:34:43,131:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:43,131:INFO:Creating metrics dataframe
2024-11-03 05:34:43,133:INFO:Initializing Naive Bayes
2024-11-03 05:34:43,134:INFO:Total runtime is 0.0922564188639323 minutes
2024-11-03 05:34:43,134:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:43,134:INFO:Initializing create_model()
2024-11-03 05:34:43,134:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:43,134:INFO:Checking exceptions
2024-11-03 05:34:43,134:INFO:Importing libraries
2024-11-03 05:34:43,134:INFO:Copying training dataset
2024-11-03 05:34:43,140:INFO:Defining folds
2024-11-03 05:34:43,140:INFO:Declaring metric variables
2024-11-03 05:34:43,140:INFO:Importing untrained model
2024-11-03 05:34:43,140:INFO:Naive Bayes Imported successfully
2024-11-03 05:34:43,141:INFO:Starting cross validation
2024-11-03 05:34:43,143:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:43,466:INFO:Calculating mean and std
2024-11-03 05:34:43,466:INFO:Creating metrics dataframe
2024-11-03 05:34:43,468:INFO:Uploading results into container
2024-11-03 05:34:43,469:INFO:Uploading model into container now
2024-11-03 05:34:43,469:INFO:_master_model_container: 3
2024-11-03 05:34:43,469:INFO:_display_container: 2
2024-11-03 05:34:43,469:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 05:34:43,470:INFO:create_model() successfully completed......................................
2024-11-03 05:34:43,520:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:43,521:INFO:Creating metrics dataframe
2024-11-03 05:34:43,523:INFO:Initializing Decision Tree Classifier
2024-11-03 05:34:43,523:INFO:Total runtime is 0.09873478015263876 minutes
2024-11-03 05:34:43,523:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:43,523:INFO:Initializing create_model()
2024-11-03 05:34:43,523:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:43,523:INFO:Checking exceptions
2024-11-03 05:34:43,524:INFO:Importing libraries
2024-11-03 05:34:43,524:INFO:Copying training dataset
2024-11-03 05:34:43,529:INFO:Defining folds
2024-11-03 05:34:43,529:INFO:Declaring metric variables
2024-11-03 05:34:43,529:INFO:Importing untrained model
2024-11-03 05:34:43,530:INFO:Decision Tree Classifier Imported successfully
2024-11-03 05:34:43,530:INFO:Starting cross validation
2024-11-03 05:34:43,532:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:43,869:INFO:Calculating mean and std
2024-11-03 05:34:43,869:INFO:Creating metrics dataframe
2024-11-03 05:34:43,871:INFO:Uploading results into container
2024-11-03 05:34:43,872:INFO:Uploading model into container now
2024-11-03 05:34:43,872:INFO:_master_model_container: 4
2024-11-03 05:34:43,872:INFO:_display_container: 2
2024-11-03 05:34:43,872:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 05:34:43,873:INFO:create_model() successfully completed......................................
2024-11-03 05:34:43,922:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:43,922:INFO:Creating metrics dataframe
2024-11-03 05:34:43,925:INFO:Initializing SVM - Linear Kernel
2024-11-03 05:34:43,925:INFO:Total runtime is 0.10543607076009115 minutes
2024-11-03 05:34:43,925:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:43,926:INFO:Initializing create_model()
2024-11-03 05:34:43,926:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:43,926:INFO:Checking exceptions
2024-11-03 05:34:43,926:INFO:Importing libraries
2024-11-03 05:34:43,926:INFO:Copying training dataset
2024-11-03 05:34:43,931:INFO:Defining folds
2024-11-03 05:34:43,931:INFO:Declaring metric variables
2024-11-03 05:34:43,931:INFO:Importing untrained model
2024-11-03 05:34:43,932:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 05:34:43,932:INFO:Starting cross validation
2024-11-03 05:34:43,934:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:44,142:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:44,242:INFO:Calculating mean and std
2024-11-03 05:34:44,243:INFO:Creating metrics dataframe
2024-11-03 05:34:44,244:INFO:Uploading results into container
2024-11-03 05:34:44,245:INFO:Uploading model into container now
2024-11-03 05:34:44,245:INFO:_master_model_container: 5
2024-11-03 05:34:44,246:INFO:_display_container: 2
2024-11-03 05:34:44,246:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 05:34:44,246:INFO:create_model() successfully completed......................................
2024-11-03 05:34:44,295:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:44,295:INFO:Creating metrics dataframe
2024-11-03 05:34:44,298:INFO:Initializing Ridge Classifier
2024-11-03 05:34:44,298:INFO:Total runtime is 0.11164770921071371 minutes
2024-11-03 05:34:44,298:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:44,299:INFO:Initializing create_model()
2024-11-03 05:34:44,299:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:44,299:INFO:Checking exceptions
2024-11-03 05:34:44,299:INFO:Importing libraries
2024-11-03 05:34:44,299:INFO:Copying training dataset
2024-11-03 05:34:44,304:INFO:Defining folds
2024-11-03 05:34:44,304:INFO:Declaring metric variables
2024-11-03 05:34:44,304:INFO:Importing untrained model
2024-11-03 05:34:44,305:INFO:Ridge Classifier Imported successfully
2024-11-03 05:34:44,305:INFO:Starting cross validation
2024-11-03 05:34:44,307:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:44,617:INFO:Calculating mean and std
2024-11-03 05:34:44,617:INFO:Creating metrics dataframe
2024-11-03 05:34:44,619:INFO:Uploading results into container
2024-11-03 05:34:44,620:INFO:Uploading model into container now
2024-11-03 05:34:44,620:INFO:_master_model_container: 6
2024-11-03 05:34:44,620:INFO:_display_container: 2
2024-11-03 05:34:44,621:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 05:34:44,621:INFO:create_model() successfully completed......................................
2024-11-03 05:34:44,671:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:44,671:INFO:Creating metrics dataframe
2024-11-03 05:34:44,674:INFO:Initializing Random Forest Classifier
2024-11-03 05:34:44,674:INFO:Total runtime is 0.11791369517644247 minutes
2024-11-03 05:34:44,674:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:44,674:INFO:Initializing create_model()
2024-11-03 05:34:44,674:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:44,674:INFO:Checking exceptions
2024-11-03 05:34:44,674:INFO:Importing libraries
2024-11-03 05:34:44,675:INFO:Copying training dataset
2024-11-03 05:34:44,680:INFO:Defining folds
2024-11-03 05:34:44,680:INFO:Declaring metric variables
2024-11-03 05:34:44,680:INFO:Importing untrained model
2024-11-03 05:34:44,680:INFO:Random Forest Classifier Imported successfully
2024-11-03 05:34:44,681:INFO:Starting cross validation
2024-11-03 05:34:44,683:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:45,499:INFO:Calculating mean and std
2024-11-03 05:34:45,500:INFO:Creating metrics dataframe
2024-11-03 05:34:45,503:INFO:Uploading results into container
2024-11-03 05:34:45,504:INFO:Uploading model into container now
2024-11-03 05:34:45,504:INFO:_master_model_container: 7
2024-11-03 05:34:45,505:INFO:_display_container: 2
2024-11-03 05:34:45,505:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 05:34:45,505:INFO:create_model() successfully completed......................................
2024-11-03 05:34:45,566:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:45,566:INFO:Creating metrics dataframe
2024-11-03 05:34:45,568:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 05:34:45,568:INFO:Total runtime is 0.13282310565312705 minutes
2024-11-03 05:34:45,569:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:45,569:INFO:Initializing create_model()
2024-11-03 05:34:45,569:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:45,569:INFO:Checking exceptions
2024-11-03 05:34:45,569:INFO:Importing libraries
2024-11-03 05:34:45,569:INFO:Copying training dataset
2024-11-03 05:34:45,574:INFO:Defining folds
2024-11-03 05:34:45,574:INFO:Declaring metric variables
2024-11-03 05:34:45,574:INFO:Importing untrained model
2024-11-03 05:34:45,575:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:34:45,575:INFO:Starting cross validation
2024-11-03 05:34:45,577:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:46,056:INFO:Calculating mean and std
2024-11-03 05:34:46,056:INFO:Creating metrics dataframe
2024-11-03 05:34:46,058:INFO:Uploading results into container
2024-11-03 05:34:46,059:INFO:Uploading model into container now
2024-11-03 05:34:46,059:INFO:_master_model_container: 8
2024-11-03 05:34:46,059:INFO:_display_container: 2
2024-11-03 05:34:46,060:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:34:46,060:INFO:create_model() successfully completed......................................
2024-11-03 05:34:46,109:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:46,109:INFO:Creating metrics dataframe
2024-11-03 05:34:46,112:INFO:Initializing Ada Boost Classifier
2024-11-03 05:34:46,112:INFO:Total runtime is 0.1418735186258952 minutes
2024-11-03 05:34:46,112:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:46,112:INFO:Initializing create_model()
2024-11-03 05:34:46,112:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:46,112:INFO:Checking exceptions
2024-11-03 05:34:46,112:INFO:Importing libraries
2024-11-03 05:34:46,112:INFO:Copying training dataset
2024-11-03 05:34:46,117:INFO:Defining folds
2024-11-03 05:34:46,117:INFO:Declaring metric variables
2024-11-03 05:34:46,118:INFO:Importing untrained model
2024-11-03 05:34:46,118:INFO:Ada Boost Classifier Imported successfully
2024-11-03 05:34:46,118:INFO:Starting cross validation
2024-11-03 05:34:46,120:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:46,314:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:34:46,315:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:34:46,320:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:34:46,378:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:34:46,516:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:34:46,647:INFO:Calculating mean and std
2024-11-03 05:34:46,648:INFO:Creating metrics dataframe
2024-11-03 05:34:46,650:INFO:Uploading results into container
2024-11-03 05:34:46,650:INFO:Uploading model into container now
2024-11-03 05:34:46,651:INFO:_master_model_container: 9
2024-11-03 05:34:46,651:INFO:_display_container: 2
2024-11-03 05:34:46,651:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 05:34:46,651:INFO:create_model() successfully completed......................................
2024-11-03 05:34:46,714:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:46,714:INFO:Creating metrics dataframe
2024-11-03 05:34:46,717:INFO:Initializing Gradient Boosting Classifier
2024-11-03 05:34:46,717:INFO:Total runtime is 0.15196712017059327 minutes
2024-11-03 05:34:46,717:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:46,718:INFO:Initializing create_model()
2024-11-03 05:34:46,719:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:46,719:INFO:Checking exceptions
2024-11-03 05:34:46,719:INFO:Importing libraries
2024-11-03 05:34:46,719:INFO:Copying training dataset
2024-11-03 05:34:46,726:INFO:Defining folds
2024-11-03 05:34:46,726:INFO:Declaring metric variables
2024-11-03 05:34:46,726:INFO:Importing untrained model
2024-11-03 05:34:46,727:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 05:34:46,727:INFO:Starting cross validation
2024-11-03 05:34:46,730:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:47,469:INFO:Calculating mean and std
2024-11-03 05:34:47,470:INFO:Creating metrics dataframe
2024-11-03 05:34:47,472:INFO:Uploading results into container
2024-11-03 05:34:47,472:INFO:Uploading model into container now
2024-11-03 05:34:47,473:INFO:_master_model_container: 10
2024-11-03 05:34:47,473:INFO:_display_container: 2
2024-11-03 05:34:47,473:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 05:34:47,473:INFO:create_model() successfully completed......................................
2024-11-03 05:34:47,583:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:47,584:INFO:Creating metrics dataframe
2024-11-03 05:34:47,591:INFO:Initializing Linear Discriminant Analysis
2024-11-03 05:34:47,591:INFO:Total runtime is 0.16653356154759727 minutes
2024-11-03 05:34:47,591:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:47,592:INFO:Initializing create_model()
2024-11-03 05:34:47,592:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:47,592:INFO:Checking exceptions
2024-11-03 05:34:47,592:INFO:Importing libraries
2024-11-03 05:34:47,592:INFO:Copying training dataset
2024-11-03 05:34:47,599:INFO:Defining folds
2024-11-03 05:34:47,599:INFO:Declaring metric variables
2024-11-03 05:34:47,599:INFO:Importing untrained model
2024-11-03 05:34:47,599:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 05:34:47,599:INFO:Starting cross validation
2024-11-03 05:34:47,609:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:47,951:INFO:Calculating mean and std
2024-11-03 05:34:47,952:INFO:Creating metrics dataframe
2024-11-03 05:34:47,953:INFO:Uploading results into container
2024-11-03 05:34:47,954:INFO:Uploading model into container now
2024-11-03 05:34:47,954:INFO:_master_model_container: 11
2024-11-03 05:34:47,954:INFO:_display_container: 2
2024-11-03 05:34:47,955:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 05:34:47,955:INFO:create_model() successfully completed......................................
2024-11-03 05:34:48,010:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:48,011:INFO:Creating metrics dataframe
2024-11-03 05:34:48,015:INFO:Initializing Extra Trees Classifier
2024-11-03 05:34:48,015:INFO:Total runtime is 0.17359316349029544 minutes
2024-11-03 05:34:48,015:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:48,015:INFO:Initializing create_model()
2024-11-03 05:34:48,015:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:48,016:INFO:Checking exceptions
2024-11-03 05:34:48,016:INFO:Importing libraries
2024-11-03 05:34:48,016:INFO:Copying training dataset
2024-11-03 05:34:48,021:INFO:Defining folds
2024-11-03 05:34:48,021:INFO:Declaring metric variables
2024-11-03 05:34:48,022:INFO:Importing untrained model
2024-11-03 05:34:48,023:INFO:Extra Trees Classifier Imported successfully
2024-11-03 05:34:48,023:INFO:Starting cross validation
2024-11-03 05:34:48,025:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:48,712:INFO:Calculating mean and std
2024-11-03 05:34:48,712:INFO:Creating metrics dataframe
2024-11-03 05:34:48,714:INFO:Uploading results into container
2024-11-03 05:34:48,715:INFO:Uploading model into container now
2024-11-03 05:34:48,715:INFO:_master_model_container: 12
2024-11-03 05:34:48,715:INFO:_display_container: 2
2024-11-03 05:34:48,716:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 05:34:48,716:INFO:create_model() successfully completed......................................
2024-11-03 05:34:48,767:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:48,767:INFO:Creating metrics dataframe
2024-11-03 05:34:48,770:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 05:34:48,770:INFO:Total runtime is 0.18618329763412478 minutes
2024-11-03 05:34:48,770:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:48,771:INFO:Initializing create_model()
2024-11-03 05:34:48,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:48,771:INFO:Checking exceptions
2024-11-03 05:34:48,771:INFO:Importing libraries
2024-11-03 05:34:48,771:INFO:Copying training dataset
2024-11-03 05:34:48,776:INFO:Defining folds
2024-11-03 05:34:48,777:INFO:Declaring metric variables
2024-11-03 05:34:48,777:INFO:Importing untrained model
2024-11-03 05:34:48,778:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 05:34:48,778:INFO:Starting cross validation
2024-11-03 05:34:48,781:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:49,150:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,150:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,156:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,188:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,285:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,306:INFO:Calculating mean and std
2024-11-03 05:34:49,307:INFO:Creating metrics dataframe
2024-11-03 05:34:49,309:INFO:Uploading results into container
2024-11-03 05:34:49,309:INFO:Uploading model into container now
2024-11-03 05:34:49,310:INFO:_master_model_container: 13
2024-11-03 05:34:49,310:INFO:_display_container: 2
2024-11-03 05:34:49,310:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 05:34:49,310:INFO:create_model() successfully completed......................................
2024-11-03 05:34:49,363:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:49,363:INFO:Creating metrics dataframe
2024-11-03 05:34:49,367:INFO:Initializing Dummy Classifier
2024-11-03 05:34:49,367:INFO:Total runtime is 0.19612545967102052 minutes
2024-11-03 05:34:49,367:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:49,367:INFO:Initializing create_model()
2024-11-03 05:34:49,367:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E09D7C610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:49,367:INFO:Checking exceptions
2024-11-03 05:34:49,367:INFO:Importing libraries
2024-11-03 05:34:49,367:INFO:Copying training dataset
2024-11-03 05:34:49,373:INFO:Defining folds
2024-11-03 05:34:49,373:INFO:Declaring metric variables
2024-11-03 05:34:49,373:INFO:Importing untrained model
2024-11-03 05:34:49,374:INFO:Dummy Classifier Imported successfully
2024-11-03 05:34:49,374:INFO:Starting cross validation
2024-11-03 05:34:49,376:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:49,595:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,596:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,597:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,629:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,683:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:34:49,697:INFO:Calculating mean and std
2024-11-03 05:34:49,697:INFO:Creating metrics dataframe
2024-11-03 05:34:49,699:INFO:Uploading results into container
2024-11-03 05:34:49,700:INFO:Uploading model into container now
2024-11-03 05:34:49,700:INFO:_master_model_container: 14
2024-11-03 05:34:49,700:INFO:_display_container: 2
2024-11-03 05:34:49,700:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 05:34:49,700:INFO:create_model() successfully completed......................................
2024-11-03 05:34:49,750:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:49,750:INFO:Creating metrics dataframe
2024-11-03 05:34:49,755:INFO:Initializing create_model()
2024-11-03 05:34:49,755:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:49,755:INFO:Checking exceptions
2024-11-03 05:34:49,755:INFO:Importing libraries
2024-11-03 05:34:49,755:INFO:Copying training dataset
2024-11-03 05:34:49,761:INFO:Defining folds
2024-11-03 05:34:49,761:INFO:Declaring metric variables
2024-11-03 05:34:49,761:INFO:Importing untrained model
2024-11-03 05:34:49,762:INFO:Declaring custom model
2024-11-03 05:34:49,762:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:34:49,764:INFO:Cross validation set to False
2024-11-03 05:34:49,764:INFO:Fitting Model
2024-11-03 05:34:49,844:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:34:49,845:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:34:49,845:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:34:49,845:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:34:49,845:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:34:49,845:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,845:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,846:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,847:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,848:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,849:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,850:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,851:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,852:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,853:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,854:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,855:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,856:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:49,861:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:34:49,861:INFO:create_model() successfully completed......................................
2024-11-03 05:34:49,922:INFO:_master_model_container: 14
2024-11-03 05:34:49,922:INFO:_display_container: 2
2024-11-03 05:34:49,922:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:34:49,922:INFO:compare_models() successfully completed......................................
2024-11-03 05:34:49,922:INFO:Initializing tune_model()
2024-11-03 05:34:49,922:INFO:tune_model(estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>)
2024-11-03 05:34:49,922:INFO:Checking exceptions
2024-11-03 05:34:49,925:INFO:Copying training dataset
2024-11-03 05:34:49,929:INFO:Checking base model
2024-11-03 05:34:49,929:INFO:Base model : Quadratic Discriminant Analysis
2024-11-03 05:34:49,929:INFO:Declaring metric variables
2024-11-03 05:34:49,929:INFO:Defining Hyperparameters
2024-11-03 05:34:49,984:INFO:Tuning with n_jobs=-1
2024-11-03 05:34:49,984:INFO:Initializing RandomizedSearchCV
2024-11-03 05:34:53,446:INFO:best_params: {'actual_estimator__reg_param': 0.47}
2024-11-03 05:34:53,446:INFO:Hyperparameter search completed
2024-11-03 05:34:53,446:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:53,447:INFO:Initializing create_model()
2024-11-03 05:34:53,447:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000018E098F41C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_param': 0.47})
2024-11-03 05:34:53,447:INFO:Checking exceptions
2024-11-03 05:34:53,447:INFO:Importing libraries
2024-11-03 05:34:53,447:INFO:Copying training dataset
2024-11-03 05:34:53,452:INFO:Defining folds
2024-11-03 05:34:53,452:INFO:Declaring metric variables
2024-11-03 05:34:53,452:INFO:Importing untrained model
2024-11-03 05:34:53,452:INFO:Declaring custom model
2024-11-03 05:34:53,453:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:34:53,453:INFO:Starting cross validation
2024-11-03 05:34:53,455:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:53,866:INFO:Calculating mean and std
2024-11-03 05:34:53,867:INFO:Creating metrics dataframe
2024-11-03 05:34:53,868:INFO:Finalizing model
2024-11-03 05:34:53,881:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:34:53,881:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:34:53,881:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:34:53,882:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:34:53,882:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:34:53,882:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,882:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,882:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,882:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,882:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,882:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,883:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,884:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,885:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,886:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,887:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,888:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,889:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,890:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,891:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,891:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,891:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,891:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,891:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,891:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:53,896:INFO:Uploading results into container
2024-11-03 05:34:53,896:INFO:Uploading model into container now
2024-11-03 05:34:53,897:INFO:_master_model_container: 15
2024-11-03 05:34:53,897:INFO:_display_container: 3
2024-11-03 05:34:53,897:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:34:53,897:INFO:create_model() successfully completed......................................
2024-11-03 05:34:53,946:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:53,946:INFO:choose_better activated
2024-11-03 05:34:53,946:INFO:SubProcess create_model() called ==================================
2024-11-03 05:34:53,947:INFO:Initializing create_model()
2024-11-03 05:34:53,947:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:34:53,947:INFO:Checking exceptions
2024-11-03 05:34:53,948:INFO:Importing libraries
2024-11-03 05:34:53,948:INFO:Copying training dataset
2024-11-03 05:34:53,953:INFO:Defining folds
2024-11-03 05:34:53,953:INFO:Declaring metric variables
2024-11-03 05:34:53,953:INFO:Importing untrained model
2024-11-03 05:34:53,953:INFO:Declaring custom model
2024-11-03 05:34:53,953:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:34:53,954:INFO:Starting cross validation
2024-11-03 05:34:53,955:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:34:54,268:INFO:Calculating mean and std
2024-11-03 05:34:54,269:INFO:Creating metrics dataframe
2024-11-03 05:34:54,270:INFO:Finalizing model
2024-11-03 05:34:54,282:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:34:54,283:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:34:54,283:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:34:54,283:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:34:54,283:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:34:54,283:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,284:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,285:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,286:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,287:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,288:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,289:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,290:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,291:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,292:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:34:54,297:INFO:Uploading results into container
2024-11-03 05:34:54,297:INFO:Uploading model into container now
2024-11-03 05:34:54,298:INFO:_master_model_container: 16
2024-11-03 05:34:54,298:INFO:_display_container: 4
2024-11-03 05:34:54,298:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:34:54,298:INFO:create_model() successfully completed......................................
2024-11-03 05:34:54,346:INFO:SubProcess create_model() end ==================================
2024-11-03 05:34:54,346:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 05:34:54,347:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 05:34:54,347:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) is best model
2024-11-03 05:34:54,347:INFO:choose_better completed
2024-11-03 05:34:54,347:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 05:34:54,347:INFO:_master_model_container: 16
2024-11-03 05:34:54,347:INFO:_display_container: 3
2024-11-03 05:34:54,347:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:34:54,348:INFO:tune_model() successfully completed......................................
2024-11-03 05:34:54,396:INFO:Initializing get_config()
2024-11-03 05:34:54,396:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018E7279F910>, variable=X)
2024-11-03 05:34:54,427:INFO:Variable:  returned as     price_increase_pct  time_to_peak_ratio  price_volatility_ratio  price_acceleration  ...  volume_momentum  buying_pressure  momentum_consistency  price_volume_correlation
21         1000.000000            0.886792                1.038080           -0.019176  ...         0.959248        -0.680315              0.288462                         0
12          722.992676            0.190476                0.887024           -0.048907  ...         2.351462        -3.464133              0.150000                         0
7          1000.000000            0.174107                0.079366           -0.001876  ...         0.752647         0.006822              0.264574                         0
1          1000.000000            0.071594                0.180332            0.000592  ...         0.570437         0.134385              0.259259                         0
36         1000.000000            0.355932                1.326494           -0.016506  ...         1.128132        -1.472953              0.241379                         0
13         1000.000000            0.162602                0.111534           -0.001583  ...         1.167485         0.009240              0.314286                         0
43          946.770691            0.125000                0.330310           -0.015294  ...        -0.566831        -0.023585              0.396825                         0
5          1000.000000            0.106494                0.215389           -0.026080  ...         1.827168         2.369128              0.466146                         0
9           778.287231            0.622642                0.245077           -0.018488  ...         2.351970         0.077951              0.576923                         0
14         1000.000000            0.168889                0.248114           -0.001723  ...         0.474585        -0.292131              0.258929                         0
30          597.761963            0.338816                0.437622           -0.001600  ...         2.018283        -0.138975              0.537068                         0
10         1000.000000            0.972973                0.189980           -0.007651  ...         1.947023         0.368072              0.347826                         0
8           717.802612            0.391304                0.237219           -0.011195  ...         0.494068         0.110336              0.400000                         0
31         1000.000000            0.337858                0.321962           -0.001464  ...         1.144936         0.034815              0.545317                         0
6          1000.000000            0.142857                0.442158           -0.002694  ...         0.186458        -0.082440              0.281437                         0
11         1000.000000            0.118902                0.458515           -0.001930  ...         1.732672         4.507457              0.281346                         0
25          104.857857            0.547974                0.547489            0.000037  ...         1.131151         0.632388              0.561966                         0
40         1000.000000            0.263675                0.303455           -0.001396  ...         2.023708        -0.174225              0.551966                         0
18         1000.000000            0.068966                0.610985            0.002702  ...         2.289208         0.951424              0.192982                         0
20          696.406555            0.944444                0.521408            0.003775  ...         1.843139        -0.020814              0.352113                         0
22          480.428497            0.812352                0.253164           -0.002298  ...         1.455075         2.386889              0.519048                         0
26          279.633240            0.542857                0.672832           -0.004673  ...         1.580506         0.033466              0.578947                         0
38         1000.000000            0.892670                0.121697           -0.002521  ...         1.080801         0.022417              0.535433                         0
34         1000.000000            0.626316                0.442895           -0.005102  ...         1.778207         0.139940              0.582011                         0
41           79.560379            0.078788                0.326965            0.000169  ...         2.323874        -0.356487              0.414634                         0
37         1000.000000            0.737805                0.193086           -0.005456  ...         1.202139         0.024029              0.570552                         0
23          453.550415            0.520000                0.349765           -0.009154  ...         1.876265         0.100328              0.484848                         0
29          443.556519            0.876033                0.161492           -0.007903  ...         0.097223        -0.032815              0.550000                         0
27          413.335205            0.388462                0.409474           -0.003389  ...         1.749817        -0.194633              0.571429                         0
15         1000.000000            0.691489                0.445066           -0.001711  ...         0.543085         0.044900              0.272727                         0
4           911.881592            0.052632                1.008598           -0.580428  ...         1.653361         8.080514              0.166667                         0
16            0.000000            0.000000                0.321984            0.002987  ...         0.361360         0.018962              0.183908                         0
28         1000.000000            0.741935                0.280946           -0.001711  ...         1.722259         0.034717              0.552962                         0
35         1000.000000            0.065217                0.560376           -0.010099  ...         0.737771        -0.753024              0.241758                         0
0          1000.000000            0.064220                0.091676           -0.000813  ...         0.575985        -0.010209              0.255172                         0
2          1000.000000            0.033333                0.340434            0.002775  ...         1.662320        10.586780              0.235955                         0
32         1000.000000            0.026087                0.477707           -0.096345  ...         1.833119         1.647011              0.394737                         0
33          584.829285            0.341317                0.322796           -0.002917  ...         1.725714         0.040304              0.573574                         0
42         1000.000000            0.992366                1.062911           -0.002286  ...         1.854335         1.613097              0.563776                         0
39          219.428467            0.493151                0.081091           -0.014378  ...         1.694305         0.272758              0.555556                         0
3          1000.000000            0.174468                0.183376           -0.001578  ...         0.851373         0.080483              0.337607                         0
19         1000.000000            0.119122                0.100933           -0.000856  ...         0.647912         0.102116              0.216981                         0
24         1000.000000            0.635535                0.412089           -0.002124  ...         0.778488        -0.299682              0.554795                         0
17          615.932373            0.902439                0.291453            0.009819  ...         1.828279         0.048574              0.350000                         0

[44 rows x 19 columns]
2024-11-03 05:34:54,427:INFO:get_config() successfully completed......................................
2024-11-03 05:36:58,439:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:36:58,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:36:58,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:36:58,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 05:37:00,387:INFO:PyCaret ClassificationExperiment
2024-11-03 05:37:00,387:INFO:Logging name: clf-default-name
2024-11-03 05:37:00,387:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 05:37:00,387:INFO:version 3.3.2
2024-11-03 05:37:00,387:INFO:Initializing setup()
2024-11-03 05:37:00,387:INFO:self.USI: c63c
2024-11-03 05:37:00,387:INFO:self._variable_keys: {'log_plots_param', 'target_param', 'gpu_n_jobs_param', 'seed', 'memory', '_available_plots', 'data', 'USI', '_ml_usecase', 'fold_shuffle_param', 'is_multiclass', 'exp_id', 'fold_groups_param', 'logging_param', 'n_jobs_param', 'gpu_param', 'exp_name_log', 'y_test', 'html_param', 'fix_imbalance', 'y_train', 'X_test', 'X_train', 'idx', 'X', 'pipeline', 'fold_generator', 'y'}
2024-11-03 05:37:00,388:INFO:Checking environment
2024-11-03 05:37:00,388:INFO:python_version: 3.9.5
2024-11-03 05:37:00,388:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 05:37:00,388:INFO:machine: AMD64
2024-11-03 05:37:00,401:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 05:37:00,404:INFO:Memory: svmem(total=17098203136, available=1457565696, percent=91.5, used=15640637440, free=1457565696)
2024-11-03 05:37:00,404:INFO:Physical Core: 4
2024-11-03 05:37:00,404:INFO:Logical Core: 4
2024-11-03 05:37:00,404:INFO:Checking libraries
2024-11-03 05:37:00,404:INFO:System:
2024-11-03 05:37:00,404:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 05:37:00,404:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 05:37:00,405:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 05:37:00,405:INFO:PyCaret required dependencies:
2024-11-03 05:37:00,467:INFO:                 pip: 21.1.3
2024-11-03 05:37:00,467:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 05:37:00,467:INFO:             pycaret: 3.3.2
2024-11-03 05:37:00,467:INFO:             IPython: 8.14.0
2024-11-03 05:37:00,467:INFO:          ipywidgets: 8.1.5
2024-11-03 05:37:00,468:INFO:                tqdm: 4.66.6
2024-11-03 05:37:00,468:INFO:               numpy: 1.26.4
2024-11-03 05:37:00,468:INFO:              pandas: 2.1.4
2024-11-03 05:37:00,468:INFO:              jinja2: 3.1.4
2024-11-03 05:37:00,468:INFO:               scipy: 1.11.4
2024-11-03 05:37:00,468:INFO:              joblib: 1.3.2
2024-11-03 05:37:00,468:INFO:             sklearn: 1.4.2
2024-11-03 05:37:00,468:INFO:                pyod: 2.0.2
2024-11-03 05:37:00,468:INFO:            imblearn: 0.12.4
2024-11-03 05:37:00,468:INFO:   category_encoders: 2.6.4
2024-11-03 05:37:00,468:INFO:            lightgbm: 4.5.0
2024-11-03 05:37:00,468:INFO:               numba: 0.60.0
2024-11-03 05:37:00,468:INFO:            requests: 2.32.3
2024-11-03 05:37:00,468:INFO:          matplotlib: 3.7.5
2024-11-03 05:37:00,468:INFO:          scikitplot: 0.3.7
2024-11-03 05:37:00,468:INFO:         yellowbrick: 1.5
2024-11-03 05:37:00,468:INFO:              plotly: 5.24.1
2024-11-03 05:37:00,468:INFO:    plotly-resampler: Not installed
2024-11-03 05:37:00,468:INFO:             kaleido: 0.2.1
2024-11-03 05:37:00,468:INFO:           schemdraw: 0.15
2024-11-03 05:37:00,468:INFO:         statsmodels: 0.14.4
2024-11-03 05:37:00,468:INFO:              sktime: 0.26.0
2024-11-03 05:37:00,468:INFO:               tbats: 1.1.3
2024-11-03 05:37:00,469:INFO:            pmdarima: 2.0.4
2024-11-03 05:37:00,469:INFO:              psutil: 5.9.5
2024-11-03 05:37:00,469:INFO:          markupsafe: 3.0.2
2024-11-03 05:37:00,469:INFO:             pickle5: Not installed
2024-11-03 05:37:00,469:INFO:         cloudpickle: 3.1.0
2024-11-03 05:37:00,469:INFO:         deprecation: 2.1.0
2024-11-03 05:37:00,469:INFO:              xxhash: 3.5.0
2024-11-03 05:37:00,469:INFO:           wurlitzer: Not installed
2024-11-03 05:37:00,469:INFO:PyCaret optional dependencies:
2024-11-03 05:37:00,492:INFO:                shap: Not installed
2024-11-03 05:37:00,492:INFO:           interpret: Not installed
2024-11-03 05:37:00,492:INFO:                umap: Not installed
2024-11-03 05:37:00,492:INFO:     ydata_profiling: Not installed
2024-11-03 05:37:00,492:INFO:  explainerdashboard: Not installed
2024-11-03 05:37:00,492:INFO:             autoviz: Not installed
2024-11-03 05:37:00,492:INFO:           fairlearn: Not installed
2024-11-03 05:37:00,492:INFO:          deepchecks: Not installed
2024-11-03 05:37:00,492:INFO:             xgboost: Not installed
2024-11-03 05:37:00,492:INFO:            catboost: Not installed
2024-11-03 05:37:00,492:INFO:              kmodes: Not installed
2024-11-03 05:37:00,492:INFO:             mlxtend: Not installed
2024-11-03 05:37:00,493:INFO:       statsforecast: Not installed
2024-11-03 05:37:00,493:INFO:        tune_sklearn: Not installed
2024-11-03 05:37:00,493:INFO:                 ray: Not installed
2024-11-03 05:37:00,493:INFO:            hyperopt: Not installed
2024-11-03 05:37:00,493:INFO:              optuna: Not installed
2024-11-03 05:37:00,493:INFO:               skopt: Not installed
2024-11-03 05:37:00,493:INFO:              mlflow: Not installed
2024-11-03 05:37:00,493:INFO:              gradio: Not installed
2024-11-03 05:37:00,493:INFO:             fastapi: Not installed
2024-11-03 05:37:00,493:INFO:             uvicorn: Not installed
2024-11-03 05:37:00,493:INFO:              m2cgen: Not installed
2024-11-03 05:37:00,493:INFO:           evidently: Not installed
2024-11-03 05:37:00,493:INFO:               fugue: Not installed
2024-11-03 05:37:00,493:INFO:           streamlit: Not installed
2024-11-03 05:37:00,493:INFO:             prophet: Not installed
2024-11-03 05:37:00,493:INFO:None
2024-11-03 05:37:00,493:INFO:Set up data.
2024-11-03 05:37:00,500:INFO:Set up folding strategy.
2024-11-03 05:37:00,500:INFO:Set up train/test split.
2024-11-03 05:37:00,505:INFO:Set up index.
2024-11-03 05:37:00,505:INFO:Assigning column types.
2024-11-03 05:37:00,510:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 05:37:00,557:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 05:37:00,561:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:37:00,599:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,600:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,650:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 05:37:00,650:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:37:00,680:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,680:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,681:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 05:37:00,732:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:37:00,764:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,815:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 05:37:00,848:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,848:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,848:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 05:37:00,929:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:00,930:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,011:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,012:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,013:INFO:Preparing preprocessing pipeline...
2024-11-03 05:37:01,015:INFO:Set up simple imputation.
2024-11-03 05:37:01,015:INFO:Set up feature normalization.
2024-11-03 05:37:01,015:INFO:Set up feature selection.
2024-11-03 05:37:01,096:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,146:INFO:Finished creating preprocessing pipeline.
2024-11-03 05:37:01,158:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 05:37:01,158:INFO:Creating final display dataframe.
2024-11-03 05:37:01,317:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (44, 20)
4        Transformed data shape           (44, 4)
5   Transformed train set shape           (30, 4)
6    Transformed test set shape           (14, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                 5
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              c63c
2024-11-03 05:37:01,398:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,398:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,480:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,480:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 05:37:01,482:INFO:setup() successfully completed in 1.1s...............
2024-11-03 05:37:01,482:INFO:Initializing compare_models()
2024-11-03 05:37:01,482:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, include=None, fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 05:37:01,482:INFO:Checking exceptions
2024-11-03 05:37:01,489:INFO:Preparing display monitor
2024-11-03 05:37:01,491:INFO:Initializing Logistic Regression
2024-11-03 05:37:01,491:INFO:Total runtime is 0.0 minutes
2024-11-03 05:37:01,491:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:01,492:INFO:Initializing create_model()
2024-11-03 05:37:01,492:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:01,492:INFO:Checking exceptions
2024-11-03 05:37:01,492:INFO:Importing libraries
2024-11-03 05:37:01,492:INFO:Copying training dataset
2024-11-03 05:37:01,497:INFO:Defining folds
2024-11-03 05:37:01,497:INFO:Declaring metric variables
2024-11-03 05:37:01,497:INFO:Importing untrained model
2024-11-03 05:37:01,497:INFO:Logistic Regression Imported successfully
2024-11-03 05:37:01,498:INFO:Starting cross validation
2024-11-03 05:37:01,500:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:06,327:INFO:Calculating mean and std
2024-11-03 05:37:06,328:INFO:Creating metrics dataframe
2024-11-03 05:37:06,330:INFO:Uploading results into container
2024-11-03 05:37:06,330:INFO:Uploading model into container now
2024-11-03 05:37:06,330:INFO:_master_model_container: 1
2024-11-03 05:37:06,330:INFO:_display_container: 2
2024-11-03 05:37:06,331:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 05:37:06,331:INFO:create_model() successfully completed......................................
2024-11-03 05:37:06,389:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:06,389:INFO:Creating metrics dataframe
2024-11-03 05:37:06,392:INFO:Initializing K Neighbors Classifier
2024-11-03 05:37:06,392:INFO:Total runtime is 0.08167992035547893 minutes
2024-11-03 05:37:06,392:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:06,393:INFO:Initializing create_model()
2024-11-03 05:37:06,393:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:06,393:INFO:Checking exceptions
2024-11-03 05:37:06,393:INFO:Importing libraries
2024-11-03 05:37:06,393:INFO:Copying training dataset
2024-11-03 05:37:06,398:INFO:Defining folds
2024-11-03 05:37:06,398:INFO:Declaring metric variables
2024-11-03 05:37:06,398:INFO:Importing untrained model
2024-11-03 05:37:06,398:INFO:K Neighbors Classifier Imported successfully
2024-11-03 05:37:06,398:INFO:Starting cross validation
2024-11-03 05:37:06,400:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:06,748:INFO:Calculating mean and std
2024-11-03 05:37:06,748:INFO:Creating metrics dataframe
2024-11-03 05:37:06,750:INFO:Uploading results into container
2024-11-03 05:37:06,751:INFO:Uploading model into container now
2024-11-03 05:37:06,751:INFO:_master_model_container: 2
2024-11-03 05:37:06,751:INFO:_display_container: 2
2024-11-03 05:37:06,752:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 05:37:06,752:INFO:create_model() successfully completed......................................
2024-11-03 05:37:06,800:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:06,800:INFO:Creating metrics dataframe
2024-11-03 05:37:06,802:INFO:Initializing Naive Bayes
2024-11-03 05:37:06,803:INFO:Total runtime is 0.08853904803593954 minutes
2024-11-03 05:37:06,803:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:06,803:INFO:Initializing create_model()
2024-11-03 05:37:06,803:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:06,803:INFO:Checking exceptions
2024-11-03 05:37:06,803:INFO:Importing libraries
2024-11-03 05:37:06,803:INFO:Copying training dataset
2024-11-03 05:37:06,808:INFO:Defining folds
2024-11-03 05:37:06,808:INFO:Declaring metric variables
2024-11-03 05:37:06,809:INFO:Importing untrained model
2024-11-03 05:37:06,809:INFO:Naive Bayes Imported successfully
2024-11-03 05:37:06,809:INFO:Starting cross validation
2024-11-03 05:37:06,811:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:07,076:INFO:Calculating mean and std
2024-11-03 05:37:07,076:INFO:Creating metrics dataframe
2024-11-03 05:37:07,078:INFO:Uploading results into container
2024-11-03 05:37:07,079:INFO:Uploading model into container now
2024-11-03 05:37:07,079:INFO:_master_model_container: 3
2024-11-03 05:37:07,079:INFO:_display_container: 2
2024-11-03 05:37:07,080:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 05:37:07,080:INFO:create_model() successfully completed......................................
2024-11-03 05:37:07,128:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:07,128:INFO:Creating metrics dataframe
2024-11-03 05:37:07,131:INFO:Initializing Decision Tree Classifier
2024-11-03 05:37:07,131:INFO:Total runtime is 0.09399851560592652 minutes
2024-11-03 05:37:07,132:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:07,132:INFO:Initializing create_model()
2024-11-03 05:37:07,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:07,132:INFO:Checking exceptions
2024-11-03 05:37:07,132:INFO:Importing libraries
2024-11-03 05:37:07,132:INFO:Copying training dataset
2024-11-03 05:37:07,138:INFO:Defining folds
2024-11-03 05:37:07,138:INFO:Declaring metric variables
2024-11-03 05:37:07,138:INFO:Importing untrained model
2024-11-03 05:37:07,138:INFO:Decision Tree Classifier Imported successfully
2024-11-03 05:37:07,139:INFO:Starting cross validation
2024-11-03 05:37:07,140:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:07,390:INFO:Calculating mean and std
2024-11-03 05:37:07,390:INFO:Creating metrics dataframe
2024-11-03 05:37:07,392:INFO:Uploading results into container
2024-11-03 05:37:07,393:INFO:Uploading model into container now
2024-11-03 05:37:07,393:INFO:_master_model_container: 4
2024-11-03 05:37:07,393:INFO:_display_container: 2
2024-11-03 05:37:07,394:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 05:37:07,394:INFO:create_model() successfully completed......................................
2024-11-03 05:37:07,441:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:07,441:INFO:Creating metrics dataframe
2024-11-03 05:37:07,444:INFO:Initializing SVM - Linear Kernel
2024-11-03 05:37:07,444:INFO:Total runtime is 0.09921663204828898 minutes
2024-11-03 05:37:07,444:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:07,444:INFO:Initializing create_model()
2024-11-03 05:37:07,444:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:07,444:INFO:Checking exceptions
2024-11-03 05:37:07,444:INFO:Importing libraries
2024-11-03 05:37:07,444:INFO:Copying training dataset
2024-11-03 05:37:07,449:INFO:Defining folds
2024-11-03 05:37:07,449:INFO:Declaring metric variables
2024-11-03 05:37:07,450:INFO:Importing untrained model
2024-11-03 05:37:07,450:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 05:37:07,450:INFO:Starting cross validation
2024-11-03 05:37:07,453:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:07,628:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:07,718:INFO:Calculating mean and std
2024-11-03 05:37:07,718:INFO:Creating metrics dataframe
2024-11-03 05:37:07,720:INFO:Uploading results into container
2024-11-03 05:37:07,721:INFO:Uploading model into container now
2024-11-03 05:37:07,721:INFO:_master_model_container: 5
2024-11-03 05:37:07,721:INFO:_display_container: 2
2024-11-03 05:37:07,721:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 05:37:07,722:INFO:create_model() successfully completed......................................
2024-11-03 05:37:07,774:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:07,775:INFO:Creating metrics dataframe
2024-11-03 05:37:07,778:INFO:Initializing Ridge Classifier
2024-11-03 05:37:07,778:INFO:Total runtime is 0.10477908452351888 minutes
2024-11-03 05:37:07,778:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:07,778:INFO:Initializing create_model()
2024-11-03 05:37:07,778:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:07,778:INFO:Checking exceptions
2024-11-03 05:37:07,778:INFO:Importing libraries
2024-11-03 05:37:07,778:INFO:Copying training dataset
2024-11-03 05:37:07,785:INFO:Defining folds
2024-11-03 05:37:07,786:INFO:Declaring metric variables
2024-11-03 05:37:07,786:INFO:Importing untrained model
2024-11-03 05:37:07,786:INFO:Ridge Classifier Imported successfully
2024-11-03 05:37:07,786:INFO:Starting cross validation
2024-11-03 05:37:07,789:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:08,063:INFO:Calculating mean and std
2024-11-03 05:37:08,063:INFO:Creating metrics dataframe
2024-11-03 05:37:08,065:INFO:Uploading results into container
2024-11-03 05:37:08,066:INFO:Uploading model into container now
2024-11-03 05:37:08,066:INFO:_master_model_container: 6
2024-11-03 05:37:08,066:INFO:_display_container: 2
2024-11-03 05:37:08,066:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 05:37:08,066:INFO:create_model() successfully completed......................................
2024-11-03 05:37:08,114:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:08,114:INFO:Creating metrics dataframe
2024-11-03 05:37:08,117:INFO:Initializing Random Forest Classifier
2024-11-03 05:37:08,117:INFO:Total runtime is 0.1104423443476359 minutes
2024-11-03 05:37:08,117:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:08,117:INFO:Initializing create_model()
2024-11-03 05:37:08,117:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:08,117:INFO:Checking exceptions
2024-11-03 05:37:08,117:INFO:Importing libraries
2024-11-03 05:37:08,117:INFO:Copying training dataset
2024-11-03 05:37:08,122:INFO:Defining folds
2024-11-03 05:37:08,122:INFO:Declaring metric variables
2024-11-03 05:37:08,122:INFO:Importing untrained model
2024-11-03 05:37:08,123:INFO:Random Forest Classifier Imported successfully
2024-11-03 05:37:08,123:INFO:Starting cross validation
2024-11-03 05:37:08,125:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:08,779:INFO:Calculating mean and std
2024-11-03 05:37:08,780:INFO:Creating metrics dataframe
2024-11-03 05:37:08,782:INFO:Uploading results into container
2024-11-03 05:37:08,782:INFO:Uploading model into container now
2024-11-03 05:37:08,783:INFO:_master_model_container: 7
2024-11-03 05:37:08,783:INFO:_display_container: 2
2024-11-03 05:37:08,783:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 05:37:08,783:INFO:create_model() successfully completed......................................
2024-11-03 05:37:08,833:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:08,833:INFO:Creating metrics dataframe
2024-11-03 05:37:08,837:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 05:37:08,837:INFO:Total runtime is 0.12243996858596802 minutes
2024-11-03 05:37:08,837:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:08,837:INFO:Initializing create_model()
2024-11-03 05:37:08,838:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:08,838:INFO:Checking exceptions
2024-11-03 05:37:08,838:INFO:Importing libraries
2024-11-03 05:37:08,838:INFO:Copying training dataset
2024-11-03 05:37:08,845:INFO:Defining folds
2024-11-03 05:37:08,845:INFO:Declaring metric variables
2024-11-03 05:37:08,845:INFO:Importing untrained model
2024-11-03 05:37:08,845:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:37:08,846:INFO:Starting cross validation
2024-11-03 05:37:08,848:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:09,110:INFO:Calculating mean and std
2024-11-03 05:37:09,111:INFO:Creating metrics dataframe
2024-11-03 05:37:09,112:INFO:Uploading results into container
2024-11-03 05:37:09,113:INFO:Uploading model into container now
2024-11-03 05:37:09,113:INFO:_master_model_container: 8
2024-11-03 05:37:09,113:INFO:_display_container: 2
2024-11-03 05:37:09,113:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:37:09,114:INFO:create_model() successfully completed......................................
2024-11-03 05:37:09,161:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:09,162:INFO:Creating metrics dataframe
2024-11-03 05:37:09,164:INFO:Initializing Ada Boost Classifier
2024-11-03 05:37:09,164:INFO:Total runtime is 0.12789368629455566 minutes
2024-11-03 05:37:09,165:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:09,165:INFO:Initializing create_model()
2024-11-03 05:37:09,165:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:09,165:INFO:Checking exceptions
2024-11-03 05:37:09,165:INFO:Importing libraries
2024-11-03 05:37:09,165:INFO:Copying training dataset
2024-11-03 05:37:09,170:INFO:Defining folds
2024-11-03 05:37:09,170:INFO:Declaring metric variables
2024-11-03 05:37:09,171:INFO:Importing untrained model
2024-11-03 05:37:09,171:INFO:Ada Boost Classifier Imported successfully
2024-11-03 05:37:09,172:INFO:Starting cross validation
2024-11-03 05:37:09,174:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:09,312:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:37:09,317:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:37:09,321:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:37:09,338:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:37:09,494:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 05:37:09,609:INFO:Calculating mean and std
2024-11-03 05:37:09,610:INFO:Creating metrics dataframe
2024-11-03 05:37:09,612:INFO:Uploading results into container
2024-11-03 05:37:09,613:INFO:Uploading model into container now
2024-11-03 05:37:09,613:INFO:_master_model_container: 9
2024-11-03 05:37:09,614:INFO:_display_container: 2
2024-11-03 05:37:09,614:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 05:37:09,614:INFO:create_model() successfully completed......................................
2024-11-03 05:37:09,670:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:09,670:INFO:Creating metrics dataframe
2024-11-03 05:37:09,672:INFO:Initializing Gradient Boosting Classifier
2024-11-03 05:37:09,673:INFO:Total runtime is 0.13636207580566406 minutes
2024-11-03 05:37:09,673:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:09,673:INFO:Initializing create_model()
2024-11-03 05:37:09,673:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:09,673:INFO:Checking exceptions
2024-11-03 05:37:09,674:INFO:Importing libraries
2024-11-03 05:37:09,674:INFO:Copying training dataset
2024-11-03 05:37:09,678:INFO:Defining folds
2024-11-03 05:37:09,678:INFO:Declaring metric variables
2024-11-03 05:37:09,678:INFO:Importing untrained model
2024-11-03 05:37:09,679:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 05:37:09,679:INFO:Starting cross validation
2024-11-03 05:37:09,681:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:10,235:INFO:Calculating mean and std
2024-11-03 05:37:10,236:INFO:Creating metrics dataframe
2024-11-03 05:37:10,238:INFO:Uploading results into container
2024-11-03 05:37:10,238:INFO:Uploading model into container now
2024-11-03 05:37:10,239:INFO:_master_model_container: 10
2024-11-03 05:37:10,239:INFO:_display_container: 2
2024-11-03 05:37:10,239:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 05:37:10,239:INFO:create_model() successfully completed......................................
2024-11-03 05:37:10,292:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:10,292:INFO:Creating metrics dataframe
2024-11-03 05:37:10,295:INFO:Initializing Linear Discriminant Analysis
2024-11-03 05:37:10,295:INFO:Total runtime is 0.14674312671025594 minutes
2024-11-03 05:37:10,295:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:10,295:INFO:Initializing create_model()
2024-11-03 05:37:10,295:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:10,295:INFO:Checking exceptions
2024-11-03 05:37:10,296:INFO:Importing libraries
2024-11-03 05:37:10,296:INFO:Copying training dataset
2024-11-03 05:37:10,301:INFO:Defining folds
2024-11-03 05:37:10,302:INFO:Declaring metric variables
2024-11-03 05:37:10,302:INFO:Importing untrained model
2024-11-03 05:37:10,302:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 05:37:10,303:INFO:Starting cross validation
2024-11-03 05:37:10,305:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:10,562:INFO:Calculating mean and std
2024-11-03 05:37:10,562:INFO:Creating metrics dataframe
2024-11-03 05:37:10,564:INFO:Uploading results into container
2024-11-03 05:37:10,565:INFO:Uploading model into container now
2024-11-03 05:37:10,565:INFO:_master_model_container: 11
2024-11-03 05:37:10,565:INFO:_display_container: 2
2024-11-03 05:37:10,566:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 05:37:10,566:INFO:create_model() successfully completed......................................
2024-11-03 05:37:10,618:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:10,618:INFO:Creating metrics dataframe
2024-11-03 05:37:10,621:INFO:Initializing Extra Trees Classifier
2024-11-03 05:37:10,621:INFO:Total runtime is 0.15216261943181356 minutes
2024-11-03 05:37:10,621:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:10,622:INFO:Initializing create_model()
2024-11-03 05:37:10,622:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:10,622:INFO:Checking exceptions
2024-11-03 05:37:10,622:INFO:Importing libraries
2024-11-03 05:37:10,622:INFO:Copying training dataset
2024-11-03 05:37:10,628:INFO:Defining folds
2024-11-03 05:37:10,628:INFO:Declaring metric variables
2024-11-03 05:37:10,628:INFO:Importing untrained model
2024-11-03 05:37:10,628:INFO:Extra Trees Classifier Imported successfully
2024-11-03 05:37:10,629:INFO:Starting cross validation
2024-11-03 05:37:10,631:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:11,199:INFO:Calculating mean and std
2024-11-03 05:37:11,200:INFO:Creating metrics dataframe
2024-11-03 05:37:11,201:INFO:Uploading results into container
2024-11-03 05:37:11,202:INFO:Uploading model into container now
2024-11-03 05:37:11,202:INFO:_master_model_container: 12
2024-11-03 05:37:11,203:INFO:_display_container: 2
2024-11-03 05:37:11,203:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 05:37:11,203:INFO:create_model() successfully completed......................................
2024-11-03 05:37:11,261:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:11,261:INFO:Creating metrics dataframe
2024-11-03 05:37:11,264:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 05:37:11,264:INFO:Total runtime is 0.16288164854049683 minutes
2024-11-03 05:37:11,265:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:11,265:INFO:Initializing create_model()
2024-11-03 05:37:11,265:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:11,265:INFO:Checking exceptions
2024-11-03 05:37:11,265:INFO:Importing libraries
2024-11-03 05:37:11,265:INFO:Copying training dataset
2024-11-03 05:37:11,270:INFO:Defining folds
2024-11-03 05:37:11,271:INFO:Declaring metric variables
2024-11-03 05:37:11,271:INFO:Importing untrained model
2024-11-03 05:37:11,271:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 05:37:11,271:INFO:Starting cross validation
2024-11-03 05:37:11,273:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:11,548:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,553:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,559:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,564:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,658:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,671:INFO:Calculating mean and std
2024-11-03 05:37:11,672:INFO:Creating metrics dataframe
2024-11-03 05:37:11,673:INFO:Uploading results into container
2024-11-03 05:37:11,674:INFO:Uploading model into container now
2024-11-03 05:37:11,674:INFO:_master_model_container: 13
2024-11-03 05:37:11,674:INFO:_display_container: 2
2024-11-03 05:37:11,675:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 05:37:11,675:INFO:create_model() successfully completed......................................
2024-11-03 05:37:11,725:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:11,725:INFO:Creating metrics dataframe
2024-11-03 05:37:11,728:INFO:Initializing Dummy Classifier
2024-11-03 05:37:11,728:INFO:Total runtime is 0.1706149975458781 minutes
2024-11-03 05:37:11,729:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:11,729:INFO:Initializing create_model()
2024-11-03 05:37:11,729:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DCFB2EE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:11,729:INFO:Checking exceptions
2024-11-03 05:37:11,729:INFO:Importing libraries
2024-11-03 05:37:11,729:INFO:Copying training dataset
2024-11-03 05:37:11,735:INFO:Defining folds
2024-11-03 05:37:11,735:INFO:Declaring metric variables
2024-11-03 05:37:11,735:INFO:Importing untrained model
2024-11-03 05:37:11,736:INFO:Dummy Classifier Imported successfully
2024-11-03 05:37:11,736:INFO:Starting cross validation
2024-11-03 05:37:11,738:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:11,901:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,902:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,904:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,910:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,974:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 05:37:11,983:INFO:Calculating mean and std
2024-11-03 05:37:11,984:INFO:Creating metrics dataframe
2024-11-03 05:37:11,986:INFO:Uploading results into container
2024-11-03 05:37:11,987:INFO:Uploading model into container now
2024-11-03 05:37:11,987:INFO:_master_model_container: 14
2024-11-03 05:37:11,987:INFO:_display_container: 2
2024-11-03 05:37:11,987:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 05:37:11,987:INFO:create_model() successfully completed......................................
2024-11-03 05:37:12,038:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:12,038:INFO:Creating metrics dataframe
2024-11-03 05:37:12,042:INFO:Initializing create_model()
2024-11-03 05:37:12,042:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:12,042:INFO:Checking exceptions
2024-11-03 05:37:12,043:INFO:Importing libraries
2024-11-03 05:37:12,043:INFO:Copying training dataset
2024-11-03 05:37:12,048:INFO:Defining folds
2024-11-03 05:37:12,048:INFO:Declaring metric variables
2024-11-03 05:37:12,048:INFO:Importing untrained model
2024-11-03 05:37:12,048:INFO:Declaring custom model
2024-11-03 05:37:12,049:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:37:12,051:INFO:Cross validation set to False
2024-11-03 05:37:12,051:INFO:Fitting Model
2024-11-03 05:37:12,131:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:37:12,132:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:37:12,132:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:37:12,132:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:37:12,132:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:37:12,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,141:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,142:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,142:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:12,147:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:37:12,147:INFO:create_model() successfully completed......................................
2024-11-03 05:37:12,203:INFO:_master_model_container: 14
2024-11-03 05:37:12,203:INFO:_display_container: 2
2024-11-03 05:37:12,203:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:37:12,203:INFO:compare_models() successfully completed......................................
2024-11-03 05:37:12,204:INFO:Initializing tune_model()
2024-11-03 05:37:12,204:INFO:tune_model(estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>)
2024-11-03 05:37:12,204:INFO:Checking exceptions
2024-11-03 05:37:12,207:INFO:Copying training dataset
2024-11-03 05:37:12,210:INFO:Checking base model
2024-11-03 05:37:12,210:INFO:Base model : Quadratic Discriminant Analysis
2024-11-03 05:37:12,210:INFO:Declaring metric variables
2024-11-03 05:37:12,211:INFO:Defining Hyperparameters
2024-11-03 05:37:12,261:INFO:Tuning with n_jobs=-1
2024-11-03 05:37:12,261:INFO:Initializing RandomizedSearchCV
2024-11-03 05:37:14,455:INFO:best_params: {'actual_estimator__reg_param': 0.47}
2024-11-03 05:37:14,455:INFO:Hyperparameter search completed
2024-11-03 05:37:14,455:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:14,455:INFO:Initializing create_model()
2024-11-03 05:37:14,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E1DD015880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_param': 0.47})
2024-11-03 05:37:14,455:INFO:Checking exceptions
2024-11-03 05:37:14,455:INFO:Importing libraries
2024-11-03 05:37:14,455:INFO:Copying training dataset
2024-11-03 05:37:14,462:INFO:Defining folds
2024-11-03 05:37:14,462:INFO:Declaring metric variables
2024-11-03 05:37:14,462:INFO:Importing untrained model
2024-11-03 05:37:14,462:INFO:Declaring custom model
2024-11-03 05:37:14,463:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:37:14,463:INFO:Starting cross validation
2024-11-03 05:37:14,465:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:14,719:INFO:Calculating mean and std
2024-11-03 05:37:14,720:INFO:Creating metrics dataframe
2024-11-03 05:37:14,722:INFO:Finalizing model
2024-11-03 05:37:14,735:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:37:14,735:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:37:14,735:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:37:14,735:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:37:14,736:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,736:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,737:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,738:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,739:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,740:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,741:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,742:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,743:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,744:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,745:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:14,750:INFO:Uploading results into container
2024-11-03 05:37:14,751:INFO:Uploading model into container now
2024-11-03 05:37:14,751:INFO:_master_model_container: 15
2024-11-03 05:37:14,751:INFO:_display_container: 3
2024-11-03 05:37:14,752:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:37:14,752:INFO:create_model() successfully completed......................................
2024-11-03 05:37:14,798:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:14,798:INFO:choose_better activated
2024-11-03 05:37:14,799:INFO:SubProcess create_model() called ==================================
2024-11-03 05:37:14,799:INFO:Initializing create_model()
2024-11-03 05:37:14,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 05:37:14,799:INFO:Checking exceptions
2024-11-03 05:37:14,800:INFO:Importing libraries
2024-11-03 05:37:14,800:INFO:Copying training dataset
2024-11-03 05:37:14,805:INFO:Defining folds
2024-11-03 05:37:14,805:INFO:Declaring metric variables
2024-11-03 05:37:14,806:INFO:Importing untrained model
2024-11-03 05:37:14,806:INFO:Declaring custom model
2024-11-03 05:37:14,806:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 05:37:14,806:INFO:Starting cross validation
2024-11-03 05:37:14,808:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 05:37:15,156:INFO:Calculating mean and std
2024-11-03 05:37:15,156:INFO:Creating metrics dataframe
2024-11-03 05:37:15,158:INFO:Finalizing model
2024-11-03 05:37:15,170:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 05:37:15,170:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 05:37:15,171:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 05:37:15,171:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 05:37:15,171:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 05:37:15,171:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,171:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,171:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,171:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,171:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,172:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,173:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,174:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,175:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,176:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,177:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,178:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,179:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,180:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,181:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,181:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 05:37:15,186:INFO:Uploading results into container
2024-11-03 05:37:15,186:INFO:Uploading model into container now
2024-11-03 05:37:15,187:INFO:_master_model_container: 16
2024-11-03 05:37:15,187:INFO:_display_container: 4
2024-11-03 05:37:15,188:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:37:15,188:INFO:create_model() successfully completed......................................
2024-11-03 05:37:15,234:INFO:SubProcess create_model() end ==================================
2024-11-03 05:37:15,234:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 05:37:15,235:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 05:37:15,235:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) is best model
2024-11-03 05:37:15,235:INFO:choose_better completed
2024-11-03 05:37:15,235:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 05:37:15,235:INFO:_master_model_container: 16
2024-11-03 05:37:15,235:INFO:_display_container: 3
2024-11-03 05:37:15,235:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 05:37:15,236:INFO:tune_model() successfully completed......................................
2024-11-03 05:37:15,282:INFO:Initializing get_config()
2024-11-03 05:37:15,283:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E1C5A5FAC0>, variable=X)
2024-11-03 05:37:15,311:INFO:Variable:  returned as     price_increase_pct  time_to_peak_ratio  price_volatility_ratio  price_acceleration  ...  volume_momentum  buying_pressure  momentum_consistency  price_volume_correlation
21         1000.000000            0.886792                1.038080           -0.019176  ...         0.959248        -0.680315              0.288462                         0
12          722.992676            0.190476                0.887024           -0.048907  ...         2.351462        -3.464133              0.150000                         0
7          1000.000000            0.174107                0.079366           -0.001876  ...         0.752647         0.006822              0.264574                         0
1          1000.000000            0.071594                0.180332            0.000592  ...         0.570437         0.134385              0.259259                         0
36         1000.000000            0.355932                1.326494           -0.016506  ...         1.128132        -1.472953              0.241379                         0
13         1000.000000            0.162602                0.111534           -0.001583  ...         1.167485         0.009240              0.314286                         0
43          946.770691            0.125000                0.330310           -0.015294  ...        -0.566831        -0.023585              0.396825                         0
5          1000.000000            0.106494                0.215389           -0.026080  ...         1.827168         2.369128              0.466146                         0
9           778.287231            0.622642                0.245077           -0.018488  ...         2.351970         0.077951              0.576923                         0
14         1000.000000            0.168889                0.248114           -0.001723  ...         0.474585        -0.292131              0.258929                         0
30          597.761963            0.338816                0.437622           -0.001600  ...         2.018283        -0.138975              0.537068                         0
10         1000.000000            0.972973                0.189980           -0.007651  ...         1.947023         0.368072              0.347826                         0
8           717.802612            0.391304                0.237219           -0.011195  ...         0.494068         0.110336              0.400000                         0
31         1000.000000            0.337858                0.321962           -0.001464  ...         1.144936         0.034815              0.545317                         0
6          1000.000000            0.142857                0.442158           -0.002694  ...         0.186458        -0.082440              0.281437                         0
11         1000.000000            0.118902                0.458515           -0.001930  ...         1.732672         4.507457              0.281346                         0
25          104.857857            0.547974                0.547489            0.000037  ...         1.131151         0.632388              0.561966                         0
40         1000.000000            0.263675                0.303455           -0.001396  ...         2.023708        -0.174225              0.551966                         0
18         1000.000000            0.068966                0.610985            0.002702  ...         2.289208         0.951424              0.192982                         0
20          696.406555            0.944444                0.521408            0.003775  ...         1.843139        -0.020814              0.352113                         0
22          480.428497            0.812352                0.253164           -0.002298  ...         1.455075         2.386889              0.519048                         0
26          279.633240            0.542857                0.672832           -0.004673  ...         1.580506         0.033466              0.578947                         0
38         1000.000000            0.892670                0.121697           -0.002521  ...         1.080801         0.022417              0.535433                         0
34         1000.000000            0.626316                0.442895           -0.005102  ...         1.778207         0.139940              0.582011                         0
41           79.560379            0.078788                0.326965            0.000169  ...         2.323874        -0.356487              0.414634                         0
37         1000.000000            0.737805                0.193086           -0.005456  ...         1.202139         0.024029              0.570552                         0
23          453.550415            0.520000                0.349765           -0.009154  ...         1.876265         0.100328              0.484848                         0
29          443.556519            0.876033                0.161492           -0.007903  ...         0.097223        -0.032815              0.550000                         0
27          413.335205            0.388462                0.409474           -0.003389  ...         1.749817        -0.194633              0.571429                         0
15         1000.000000            0.691489                0.445066           -0.001711  ...         0.543085         0.044900              0.272727                         0
4           911.881592            0.052632                1.008598           -0.580428  ...         1.653361         8.080514              0.166667                         0
16            0.000000            0.000000                0.321984            0.002987  ...         0.361360         0.018962              0.183908                         0
28         1000.000000            0.741935                0.280946           -0.001711  ...         1.722259         0.034717              0.552962                         0
35         1000.000000            0.065217                0.560376           -0.010099  ...         0.737771        -0.753024              0.241758                         0
0          1000.000000            0.064220                0.091676           -0.000813  ...         0.575985        -0.010209              0.255172                         0
2          1000.000000            0.033333                0.340434            0.002775  ...         1.662320        10.586780              0.235955                         0
32         1000.000000            0.026087                0.477707           -0.096345  ...         1.833119         1.647011              0.394737                         0
33          584.829285            0.341317                0.322796           -0.002917  ...         1.725714         0.040304              0.573574                         0
42         1000.000000            0.992366                1.062911           -0.002286  ...         1.854335         1.613097              0.563776                         0
39          219.428467            0.493151                0.081091           -0.014378  ...         1.694305         0.272758              0.555556                         0
3          1000.000000            0.174468                0.183376           -0.001578  ...         0.851373         0.080483              0.337607                         0
19         1000.000000            0.119122                0.100933           -0.000856  ...         0.647912         0.102116              0.216981                         0
24         1000.000000            0.635535                0.412089           -0.002124  ...         0.778488        -0.299682              0.554795                         0
17          615.932373            0.902439                0.291453            0.009819  ...         1.828279         0.048574              0.350000                         0

[44 rows x 19 columns]
2024-11-03 05:37:15,312:INFO:get_config() successfully completed......................................
2024-11-03 06:03:46,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:03:46,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:03:46,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:03:46,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:07,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:07,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:07,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:07,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:30,868:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:30,868:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:30,868:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:30,868:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:04:32,828:INFO:PyCaret ClassificationExperiment
2024-11-03 06:04:32,829:INFO:Logging name: clf-default-name
2024-11-03 06:04:32,829:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-03 06:04:32,829:INFO:version 3.3.2
2024-11-03 06:04:32,829:INFO:Initializing setup()
2024-11-03 06:04:32,829:INFO:self.USI: 3e63
2024-11-03 06:04:32,829:INFO:self._variable_keys: {'_ml_usecase', 'X_train', 'memory', 'exp_id', 'is_multiclass', 'X', 'fix_imbalance', 'logging_param', '_available_plots', 'fold_shuffle_param', 'fold_generator', 'y_test', 'n_jobs_param', 'idx', 'X_test', 'target_param', 'y_train', 'log_plots_param', 'exp_name_log', 'data', 'seed', 'y', 'html_param', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'pipeline'}
2024-11-03 06:04:32,829:INFO:Checking environment
2024-11-03 06:04:32,829:INFO:python_version: 3.9.5
2024-11-03 06:04:32,829:INFO:python_build: ('default', 'May 18 2021 14:42:02')
2024-11-03 06:04:32,829:INFO:machine: AMD64
2024-11-03 06:04:32,844:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-03 06:04:32,848:INFO:Memory: svmem(total=17098203136, available=1549684736, percent=90.9, used=15548518400, free=1549684736)
2024-11-03 06:04:32,848:INFO:Physical Core: 4
2024-11-03 06:04:32,848:INFO:Logical Core: 4
2024-11-03 06:04:32,848:INFO:Checking libraries
2024-11-03 06:04:32,848:INFO:System:
2024-11-03 06:04:32,848:INFO:    python: 3.9.5 (default, May 18 2021, 14:42:02) [MSC v.1916 64 bit (AMD64)]
2024-11-03 06:04:32,848:INFO:executable: C:\Users\haris\miniconda3\python.exe
2024-11-03 06:04:32,849:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-03 06:04:32,849:INFO:PyCaret required dependencies:
2024-11-03 06:04:32,932:INFO:                 pip: 21.1.3
2024-11-03 06:04:32,932:INFO:          setuptools: 52.0.0.post20210125
2024-11-03 06:04:32,932:INFO:             pycaret: 3.3.2
2024-11-03 06:04:32,932:INFO:             IPython: 8.14.0
2024-11-03 06:04:32,932:INFO:          ipywidgets: 8.1.5
2024-11-03 06:04:32,932:INFO:                tqdm: 4.66.6
2024-11-03 06:04:32,932:INFO:               numpy: 1.26.4
2024-11-03 06:04:32,933:INFO:              pandas: 2.1.4
2024-11-03 06:04:32,933:INFO:              jinja2: 3.1.4
2024-11-03 06:04:32,933:INFO:               scipy: 1.11.4
2024-11-03 06:04:32,933:INFO:              joblib: 1.3.2
2024-11-03 06:04:32,933:INFO:             sklearn: 1.4.2
2024-11-03 06:04:32,933:INFO:                pyod: 2.0.2
2024-11-03 06:04:32,933:INFO:            imblearn: 0.12.4
2024-11-03 06:04:32,933:INFO:   category_encoders: 2.6.4
2024-11-03 06:04:32,933:INFO:            lightgbm: 4.5.0
2024-11-03 06:04:32,933:INFO:               numba: 0.60.0
2024-11-03 06:04:32,933:INFO:            requests: 2.32.3
2024-11-03 06:04:32,933:INFO:          matplotlib: 3.7.5
2024-11-03 06:04:32,933:INFO:          scikitplot: 0.3.7
2024-11-03 06:04:32,934:INFO:         yellowbrick: 1.5
2024-11-03 06:04:32,934:INFO:              plotly: 5.24.1
2024-11-03 06:04:32,934:INFO:    plotly-resampler: Not installed
2024-11-03 06:04:32,934:INFO:             kaleido: 0.2.1
2024-11-03 06:04:32,934:INFO:           schemdraw: 0.15
2024-11-03 06:04:32,934:INFO:         statsmodels: 0.14.4
2024-11-03 06:04:32,934:INFO:              sktime: 0.26.0
2024-11-03 06:04:32,934:INFO:               tbats: 1.1.3
2024-11-03 06:04:32,934:INFO:            pmdarima: 2.0.4
2024-11-03 06:04:32,934:INFO:              psutil: 5.9.5
2024-11-03 06:04:32,934:INFO:          markupsafe: 3.0.2
2024-11-03 06:04:32,934:INFO:             pickle5: Not installed
2024-11-03 06:04:32,934:INFO:         cloudpickle: 3.1.0
2024-11-03 06:04:32,934:INFO:         deprecation: 2.1.0
2024-11-03 06:04:32,934:INFO:              xxhash: 3.5.0
2024-11-03 06:04:32,934:INFO:           wurlitzer: Not installed
2024-11-03 06:04:32,934:INFO:PyCaret optional dependencies:
2024-11-03 06:04:32,958:INFO:                shap: Not installed
2024-11-03 06:04:32,958:INFO:           interpret: Not installed
2024-11-03 06:04:32,958:INFO:                umap: Not installed
2024-11-03 06:04:32,958:INFO:     ydata_profiling: Not installed
2024-11-03 06:04:32,958:INFO:  explainerdashboard: Not installed
2024-11-03 06:04:32,958:INFO:             autoviz: Not installed
2024-11-03 06:04:32,959:INFO:           fairlearn: Not installed
2024-11-03 06:04:32,959:INFO:          deepchecks: Not installed
2024-11-03 06:04:32,959:INFO:             xgboost: Not installed
2024-11-03 06:04:32,959:INFO:            catboost: Not installed
2024-11-03 06:04:32,959:INFO:              kmodes: Not installed
2024-11-03 06:04:32,959:INFO:             mlxtend: Not installed
2024-11-03 06:04:32,959:INFO:       statsforecast: Not installed
2024-11-03 06:04:32,959:INFO:        tune_sklearn: Not installed
2024-11-03 06:04:32,959:INFO:                 ray: Not installed
2024-11-03 06:04:32,959:INFO:            hyperopt: Not installed
2024-11-03 06:04:32,959:INFO:              optuna: Not installed
2024-11-03 06:04:32,959:INFO:               skopt: Not installed
2024-11-03 06:04:32,959:INFO:              mlflow: Not installed
2024-11-03 06:04:32,959:INFO:              gradio: Not installed
2024-11-03 06:04:32,959:INFO:             fastapi: Not installed
2024-11-03 06:04:32,960:INFO:             uvicorn: Not installed
2024-11-03 06:04:32,960:INFO:              m2cgen: Not installed
2024-11-03 06:04:32,960:INFO:           evidently: Not installed
2024-11-03 06:04:32,960:INFO:               fugue: Not installed
2024-11-03 06:04:32,960:INFO:           streamlit: Not installed
2024-11-03 06:04:32,960:INFO:             prophet: Not installed
2024-11-03 06:04:32,960:INFO:None
2024-11-03 06:04:32,960:INFO:Set up data.
2024-11-03 06:04:32,966:INFO:Set up folding strategy.
2024-11-03 06:04:32,967:INFO:Set up train/test split.
2024-11-03 06:04:32,971:INFO:Set up index.
2024-11-03 06:04:32,972:INFO:Assigning column types.
2024-11-03 06:04:32,978:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-03 06:04:33,026:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 06:04:33,031:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 06:04:33,072:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,072:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,123:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-03 06:04:33,123:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 06:04:33,154:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,154:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,155:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-03 06:04:33,209:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 06:04:33,239:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,291:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-03 06:04:33,324:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,324:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,325:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-03 06:04:33,407:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,408:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,495:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,497:INFO:Preparing preprocessing pipeline...
2024-11-03 06:04:33,498:INFO:Set up simple imputation.
2024-11-03 06:04:33,498:INFO:Set up feature normalization.
2024-11-03 06:04:33,498:INFO:Set up feature selection.
2024-11-03 06:04:33,579:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,579:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,632:INFO:Finished creating preprocessing pipeline.
2024-11-03 06:04:33,646:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\haris\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['price_increase_pct',
                                             'time_to_peak_ratio',
                                             'price_volatility_ratio',
                                             'price_acceleration',
                                             'sustained_growth_ratio',
                                             'volume_spike_ratio',
                                             'volume_acceleration',
                                             'tx_density_spike_ratio',
                                             'volume_concentration'...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=3,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-11-03 06:04:33,646:INFO:Creating final display dataframe.
2024-11-03 06:04:33,808:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           is_pump
2                   Target type            Binary
3           Original data shape          (44, 20)
4        Transformed data shape           (44, 4)
5   Transformed train set shape           (30, 4)
6    Transformed test set shape           (14, 4)
7              Numeric features                19
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14            Feature selection              True
15     Feature selection method           classic
16  Feature selection estimator          lightgbm
17  Number of features selected               0.2
18               Fold Generator   StratifiedKFold
19                  Fold Number                 5
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              3e63
2024-11-03 06:04:33,901:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,902:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,985:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,985:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-03 06:04:33,986:INFO:setup() successfully completed in 1.16s...............
2024-11-03 06:04:33,986:INFO:Initializing compare_models()
2024-11-03 06:04:33,986:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, include=None, fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, 'include': None, 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-03 06:04:33,986:INFO:Checking exceptions
2024-11-03 06:04:33,993:INFO:Preparing display monitor
2024-11-03 06:04:33,998:INFO:Initializing Logistic Regression
2024-11-03 06:04:33,998:INFO:Total runtime is 0.0 minutes
2024-11-03 06:04:33,998:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:33,998:INFO:Initializing create_model()
2024-11-03 06:04:33,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:33,998:INFO:Checking exceptions
2024-11-03 06:04:33,998:INFO:Importing libraries
2024-11-03 06:04:33,999:INFO:Copying training dataset
2024-11-03 06:04:34,004:INFO:Defining folds
2024-11-03 06:04:34,004:INFO:Declaring metric variables
2024-11-03 06:04:34,004:INFO:Importing untrained model
2024-11-03 06:04:34,004:INFO:Logistic Regression Imported successfully
2024-11-03 06:04:34,005:INFO:Starting cross validation
2024-11-03 06:04:34,007:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:38,177:INFO:Calculating mean and std
2024-11-03 06:04:38,178:INFO:Creating metrics dataframe
2024-11-03 06:04:38,181:INFO:Uploading results into container
2024-11-03 06:04:38,182:INFO:Uploading model into container now
2024-11-03 06:04:38,182:INFO:_master_model_container: 1
2024-11-03 06:04:38,182:INFO:_display_container: 2
2024-11-03 06:04:38,183:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-03 06:04:38,183:INFO:create_model() successfully completed......................................
2024-11-03 06:04:38,246:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:38,246:INFO:Creating metrics dataframe
2024-11-03 06:04:38,249:INFO:Initializing K Neighbors Classifier
2024-11-03 06:04:38,249:INFO:Total runtime is 0.07084020376205444 minutes
2024-11-03 06:04:38,249:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:38,250:INFO:Initializing create_model()
2024-11-03 06:04:38,250:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:38,250:INFO:Checking exceptions
2024-11-03 06:04:38,250:INFO:Importing libraries
2024-11-03 06:04:38,250:INFO:Copying training dataset
2024-11-03 06:04:38,257:INFO:Defining folds
2024-11-03 06:04:38,257:INFO:Declaring metric variables
2024-11-03 06:04:38,258:INFO:Importing untrained model
2024-11-03 06:04:38,258:INFO:K Neighbors Classifier Imported successfully
2024-11-03 06:04:38,258:INFO:Starting cross validation
2024-11-03 06:04:38,261:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:38,627:INFO:Calculating mean and std
2024-11-03 06:04:38,628:INFO:Creating metrics dataframe
2024-11-03 06:04:38,630:INFO:Uploading results into container
2024-11-03 06:04:38,630:INFO:Uploading model into container now
2024-11-03 06:04:38,631:INFO:_master_model_container: 2
2024-11-03 06:04:38,631:INFO:_display_container: 2
2024-11-03 06:04:38,631:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-03 06:04:38,631:INFO:create_model() successfully completed......................................
2024-11-03 06:04:38,687:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:38,687:INFO:Creating metrics dataframe
2024-11-03 06:04:38,691:INFO:Initializing Naive Bayes
2024-11-03 06:04:38,691:INFO:Total runtime is 0.07821424007415771 minutes
2024-11-03 06:04:38,691:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:38,691:INFO:Initializing create_model()
2024-11-03 06:04:38,691:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:38,691:INFO:Checking exceptions
2024-11-03 06:04:38,691:INFO:Importing libraries
2024-11-03 06:04:38,692:INFO:Copying training dataset
2024-11-03 06:04:38,697:INFO:Defining folds
2024-11-03 06:04:38,697:INFO:Declaring metric variables
2024-11-03 06:04:38,697:INFO:Importing untrained model
2024-11-03 06:04:38,698:INFO:Naive Bayes Imported successfully
2024-11-03 06:04:38,698:INFO:Starting cross validation
2024-11-03 06:04:38,700:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:38,989:INFO:Calculating mean and std
2024-11-03 06:04:38,990:INFO:Creating metrics dataframe
2024-11-03 06:04:38,992:INFO:Uploading results into container
2024-11-03 06:04:38,992:INFO:Uploading model into container now
2024-11-03 06:04:38,993:INFO:_master_model_container: 3
2024-11-03 06:04:38,993:INFO:_display_container: 2
2024-11-03 06:04:38,993:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-03 06:04:38,993:INFO:create_model() successfully completed......................................
2024-11-03 06:04:39,047:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:39,047:INFO:Creating metrics dataframe
2024-11-03 06:04:39,050:INFO:Initializing Decision Tree Classifier
2024-11-03 06:04:39,050:INFO:Total runtime is 0.08419888019561768 minutes
2024-11-03 06:04:39,051:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:39,051:INFO:Initializing create_model()
2024-11-03 06:04:39,051:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:39,051:INFO:Checking exceptions
2024-11-03 06:04:39,051:INFO:Importing libraries
2024-11-03 06:04:39,051:INFO:Copying training dataset
2024-11-03 06:04:39,057:INFO:Defining folds
2024-11-03 06:04:39,057:INFO:Declaring metric variables
2024-11-03 06:04:39,057:INFO:Importing untrained model
2024-11-03 06:04:39,058:INFO:Decision Tree Classifier Imported successfully
2024-11-03 06:04:39,058:INFO:Starting cross validation
2024-11-03 06:04:39,060:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:39,318:INFO:Calculating mean and std
2024-11-03 06:04:39,319:INFO:Creating metrics dataframe
2024-11-03 06:04:39,321:INFO:Uploading results into container
2024-11-03 06:04:39,321:INFO:Uploading model into container now
2024-11-03 06:04:39,322:INFO:_master_model_container: 4
2024-11-03 06:04:39,322:INFO:_display_container: 2
2024-11-03 06:04:39,322:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-03 06:04:39,322:INFO:create_model() successfully completed......................................
2024-11-03 06:04:39,377:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:39,377:INFO:Creating metrics dataframe
2024-11-03 06:04:39,380:INFO:Initializing SVM - Linear Kernel
2024-11-03 06:04:39,380:INFO:Total runtime is 0.08969374895095826 minutes
2024-11-03 06:04:39,380:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:39,381:INFO:Initializing create_model()
2024-11-03 06:04:39,381:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:39,381:INFO:Checking exceptions
2024-11-03 06:04:39,381:INFO:Importing libraries
2024-11-03 06:04:39,381:INFO:Copying training dataset
2024-11-03 06:04:39,386:INFO:Defining folds
2024-11-03 06:04:39,386:INFO:Declaring metric variables
2024-11-03 06:04:39,386:INFO:Importing untrained model
2024-11-03 06:04:39,387:INFO:SVM - Linear Kernel Imported successfully
2024-11-03 06:04:39,387:INFO:Starting cross validation
2024-11-03 06:04:39,389:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:39,580:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:39,662:INFO:Calculating mean and std
2024-11-03 06:04:39,663:INFO:Creating metrics dataframe
2024-11-03 06:04:39,665:INFO:Uploading results into container
2024-11-03 06:04:39,665:INFO:Uploading model into container now
2024-11-03 06:04:39,666:INFO:_master_model_container: 5
2024-11-03 06:04:39,666:INFO:_display_container: 2
2024-11-03 06:04:39,666:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-03 06:04:39,667:INFO:create_model() successfully completed......................................
2024-11-03 06:04:39,729:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:39,729:INFO:Creating metrics dataframe
2024-11-03 06:04:39,733:INFO:Initializing Ridge Classifier
2024-11-03 06:04:39,733:INFO:Total runtime is 0.09557478030522665 minutes
2024-11-03 06:04:39,734:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:39,734:INFO:Initializing create_model()
2024-11-03 06:04:39,734:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:39,734:INFO:Checking exceptions
2024-11-03 06:04:39,734:INFO:Importing libraries
2024-11-03 06:04:39,734:INFO:Copying training dataset
2024-11-03 06:04:39,740:INFO:Defining folds
2024-11-03 06:04:39,740:INFO:Declaring metric variables
2024-11-03 06:04:39,740:INFO:Importing untrained model
2024-11-03 06:04:39,740:INFO:Ridge Classifier Imported successfully
2024-11-03 06:04:39,741:INFO:Starting cross validation
2024-11-03 06:04:39,743:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:40,160:INFO:Calculating mean and std
2024-11-03 06:04:40,161:INFO:Creating metrics dataframe
2024-11-03 06:04:40,163:INFO:Uploading results into container
2024-11-03 06:04:40,164:INFO:Uploading model into container now
2024-11-03 06:04:40,164:INFO:_master_model_container: 6
2024-11-03 06:04:40,164:INFO:_display_container: 2
2024-11-03 06:04:40,164:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-03 06:04:40,165:INFO:create_model() successfully completed......................................
2024-11-03 06:04:40,221:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:40,222:INFO:Creating metrics dataframe
2024-11-03 06:04:40,226:INFO:Initializing Random Forest Classifier
2024-11-03 06:04:40,226:INFO:Total runtime is 0.10378957192103068 minutes
2024-11-03 06:04:40,227:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:40,227:INFO:Initializing create_model()
2024-11-03 06:04:40,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:40,227:INFO:Checking exceptions
2024-11-03 06:04:40,227:INFO:Importing libraries
2024-11-03 06:04:40,227:INFO:Copying training dataset
2024-11-03 06:04:40,234:INFO:Defining folds
2024-11-03 06:04:40,234:INFO:Declaring metric variables
2024-11-03 06:04:40,234:INFO:Importing untrained model
2024-11-03 06:04:40,235:INFO:Random Forest Classifier Imported successfully
2024-11-03 06:04:40,235:INFO:Starting cross validation
2024-11-03 06:04:40,238:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:41,079:INFO:Calculating mean and std
2024-11-03 06:04:41,080:INFO:Creating metrics dataframe
2024-11-03 06:04:41,082:INFO:Uploading results into container
2024-11-03 06:04:41,082:INFO:Uploading model into container now
2024-11-03 06:04:41,083:INFO:_master_model_container: 7
2024-11-03 06:04:41,083:INFO:_display_container: 2
2024-11-03 06:04:41,084:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-03 06:04:41,084:INFO:create_model() successfully completed......................................
2024-11-03 06:04:41,140:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:41,140:INFO:Creating metrics dataframe
2024-11-03 06:04:41,143:INFO:Initializing Quadratic Discriminant Analysis
2024-11-03 06:04:41,143:INFO:Total runtime is 0.11906999349594116 minutes
2024-11-03 06:04:41,144:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:41,144:INFO:Initializing create_model()
2024-11-03 06:04:41,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:41,144:INFO:Checking exceptions
2024-11-03 06:04:41,144:INFO:Importing libraries
2024-11-03 06:04:41,144:INFO:Copying training dataset
2024-11-03 06:04:41,149:INFO:Defining folds
2024-11-03 06:04:41,150:INFO:Declaring metric variables
2024-11-03 06:04:41,150:INFO:Importing untrained model
2024-11-03 06:04:41,150:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 06:04:41,150:INFO:Starting cross validation
2024-11-03 06:04:41,152:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:41,583:INFO:Calculating mean and std
2024-11-03 06:04:41,584:INFO:Creating metrics dataframe
2024-11-03 06:04:41,586:INFO:Uploading results into container
2024-11-03 06:04:41,587:INFO:Uploading model into container now
2024-11-03 06:04:41,587:INFO:_master_model_container: 8
2024-11-03 06:04:41,587:INFO:_display_container: 2
2024-11-03 06:04:41,588:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 06:04:41,588:INFO:create_model() successfully completed......................................
2024-11-03 06:04:41,641:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:41,641:INFO:Creating metrics dataframe
2024-11-03 06:04:41,644:INFO:Initializing Ada Boost Classifier
2024-11-03 06:04:41,644:INFO:Total runtime is 0.1274176836013794 minutes
2024-11-03 06:04:41,644:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:41,644:INFO:Initializing create_model()
2024-11-03 06:04:41,644:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:41,645:INFO:Checking exceptions
2024-11-03 06:04:41,645:INFO:Importing libraries
2024-11-03 06:04:41,645:INFO:Copying training dataset
2024-11-03 06:04:41,649:INFO:Defining folds
2024-11-03 06:04:41,649:INFO:Declaring metric variables
2024-11-03 06:04:41,649:INFO:Importing untrained model
2024-11-03 06:04:41,649:INFO:Ada Boost Classifier Imported successfully
2024-11-03 06:04:41,650:INFO:Starting cross validation
2024-11-03 06:04:41,652:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:41,836:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 06:04:41,837:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 06:04:41,840:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 06:04:41,849:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 06:04:42,056:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-03 06:04:42,201:INFO:Calculating mean and std
2024-11-03 06:04:42,202:INFO:Creating metrics dataframe
2024-11-03 06:04:42,204:INFO:Uploading results into container
2024-11-03 06:04:42,205:INFO:Uploading model into container now
2024-11-03 06:04:42,205:INFO:_master_model_container: 9
2024-11-03 06:04:42,205:INFO:_display_container: 2
2024-11-03 06:04:42,206:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-03 06:04:42,206:INFO:create_model() successfully completed......................................
2024-11-03 06:04:42,273:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:42,273:INFO:Creating metrics dataframe
2024-11-03 06:04:42,276:INFO:Initializing Gradient Boosting Classifier
2024-11-03 06:04:42,277:INFO:Total runtime is 0.1379756530125936 minutes
2024-11-03 06:04:42,277:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:42,277:INFO:Initializing create_model()
2024-11-03 06:04:42,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:42,277:INFO:Checking exceptions
2024-11-03 06:04:42,277:INFO:Importing libraries
2024-11-03 06:04:42,277:INFO:Copying training dataset
2024-11-03 06:04:42,284:INFO:Defining folds
2024-11-03 06:04:42,284:INFO:Declaring metric variables
2024-11-03 06:04:42,285:INFO:Importing untrained model
2024-11-03 06:04:42,285:INFO:Gradient Boosting Classifier Imported successfully
2024-11-03 06:04:42,286:INFO:Starting cross validation
2024-11-03 06:04:42,288:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:43,049:INFO:Calculating mean and std
2024-11-03 06:04:43,050:INFO:Creating metrics dataframe
2024-11-03 06:04:43,052:INFO:Uploading results into container
2024-11-03 06:04:43,052:INFO:Uploading model into container now
2024-11-03 06:04:43,053:INFO:_master_model_container: 10
2024-11-03 06:04:43,053:INFO:_display_container: 2
2024-11-03 06:04:43,053:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-03 06:04:43,053:INFO:create_model() successfully completed......................................
2024-11-03 06:04:43,110:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:43,110:INFO:Creating metrics dataframe
2024-11-03 06:04:43,113:INFO:Initializing Linear Discriminant Analysis
2024-11-03 06:04:43,113:INFO:Total runtime is 0.15191004673639935 minutes
2024-11-03 06:04:43,113:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:43,114:INFO:Initializing create_model()
2024-11-03 06:04:43,114:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:43,114:INFO:Checking exceptions
2024-11-03 06:04:43,114:INFO:Importing libraries
2024-11-03 06:04:43,114:INFO:Copying training dataset
2024-11-03 06:04:43,119:INFO:Defining folds
2024-11-03 06:04:43,119:INFO:Declaring metric variables
2024-11-03 06:04:43,120:INFO:Importing untrained model
2024-11-03 06:04:43,120:INFO:Linear Discriminant Analysis Imported successfully
2024-11-03 06:04:43,120:INFO:Starting cross validation
2024-11-03 06:04:43,122:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:43,454:INFO:Calculating mean and std
2024-11-03 06:04:43,455:INFO:Creating metrics dataframe
2024-11-03 06:04:43,457:INFO:Uploading results into container
2024-11-03 06:04:43,458:INFO:Uploading model into container now
2024-11-03 06:04:43,458:INFO:_master_model_container: 11
2024-11-03 06:04:43,458:INFO:_display_container: 2
2024-11-03 06:04:43,458:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-03 06:04:43,458:INFO:create_model() successfully completed......................................
2024-11-03 06:04:43,516:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:43,516:INFO:Creating metrics dataframe
2024-11-03 06:04:43,520:INFO:Initializing Extra Trees Classifier
2024-11-03 06:04:43,520:INFO:Total runtime is 0.15868633588155112 minutes
2024-11-03 06:04:43,520:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:43,521:INFO:Initializing create_model()
2024-11-03 06:04:43,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:43,521:INFO:Checking exceptions
2024-11-03 06:04:43,521:INFO:Importing libraries
2024-11-03 06:04:43,521:INFO:Copying training dataset
2024-11-03 06:04:43,528:INFO:Defining folds
2024-11-03 06:04:43,528:INFO:Declaring metric variables
2024-11-03 06:04:43,529:INFO:Importing untrained model
2024-11-03 06:04:43,529:INFO:Extra Trees Classifier Imported successfully
2024-11-03 06:04:43,529:INFO:Starting cross validation
2024-11-03 06:04:43,531:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:44,295:INFO:Calculating mean and std
2024-11-03 06:04:44,295:INFO:Creating metrics dataframe
2024-11-03 06:04:44,298:INFO:Uploading results into container
2024-11-03 06:04:44,298:INFO:Uploading model into container now
2024-11-03 06:04:44,299:INFO:_master_model_container: 12
2024-11-03 06:04:44,300:INFO:_display_container: 2
2024-11-03 06:04:44,300:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-03 06:04:44,300:INFO:create_model() successfully completed......................................
2024-11-03 06:04:44,377:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:44,377:INFO:Creating metrics dataframe
2024-11-03 06:04:44,384:INFO:Initializing Light Gradient Boosting Machine
2024-11-03 06:04:44,384:INFO:Total runtime is 0.17308990955352785 minutes
2024-11-03 06:04:44,385:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:44,385:INFO:Initializing create_model()
2024-11-03 06:04:44,385:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:44,385:INFO:Checking exceptions
2024-11-03 06:04:44,385:INFO:Importing libraries
2024-11-03 06:04:44,385:INFO:Copying training dataset
2024-11-03 06:04:44,394:INFO:Defining folds
2024-11-03 06:04:44,394:INFO:Declaring metric variables
2024-11-03 06:04:44,394:INFO:Importing untrained model
2024-11-03 06:04:44,395:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-03 06:04:44,396:INFO:Starting cross validation
2024-11-03 06:04:44,398:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:44,771:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:44,775:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:44,775:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:44,776:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,016:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,029:INFO:Calculating mean and std
2024-11-03 06:04:45,030:INFO:Creating metrics dataframe
2024-11-03 06:04:45,032:INFO:Uploading results into container
2024-11-03 06:04:45,033:INFO:Uploading model into container now
2024-11-03 06:04:45,034:INFO:_master_model_container: 13
2024-11-03 06:04:45,034:INFO:_display_container: 2
2024-11-03 06:04:45,034:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-03 06:04:45,034:INFO:create_model() successfully completed......................................
2024-11-03 06:04:45,090:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:45,090:INFO:Creating metrics dataframe
2024-11-03 06:04:45,093:INFO:Initializing Dummy Classifier
2024-11-03 06:04:45,093:INFO:Total runtime is 0.18491069873174032 minutes
2024-11-03 06:04:45,093:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:45,094:INFO:Initializing create_model()
2024-11-03 06:04:45,094:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EDC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:45,094:INFO:Checking exceptions
2024-11-03 06:04:45,094:INFO:Importing libraries
2024-11-03 06:04:45,094:INFO:Copying training dataset
2024-11-03 06:04:45,100:INFO:Defining folds
2024-11-03 06:04:45,100:INFO:Declaring metric variables
2024-11-03 06:04:45,100:INFO:Importing untrained model
2024-11-03 06:04:45,101:INFO:Dummy Classifier Imported successfully
2024-11-03 06:04:45,101:INFO:Starting cross validation
2024-11-03 06:04:45,103:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:45,286:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,293:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,295:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,300:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,363:WARNING:C:\Users\haris\miniconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-03 06:04:45,371:INFO:Calculating mean and std
2024-11-03 06:04:45,372:INFO:Creating metrics dataframe
2024-11-03 06:04:45,375:INFO:Uploading results into container
2024-11-03 06:04:45,376:INFO:Uploading model into container now
2024-11-03 06:04:45,377:INFO:_master_model_container: 14
2024-11-03 06:04:45,377:INFO:_display_container: 2
2024-11-03 06:04:45,377:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-03 06:04:45,377:INFO:create_model() successfully completed......................................
2024-11-03 06:04:45,438:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:45,438:INFO:Creating metrics dataframe
2024-11-03 06:04:45,445:WARNING:C:\Users\haris\miniconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-03 06:04:45,447:INFO:Initializing create_model()
2024-11-03 06:04:45,447:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:45,447:INFO:Checking exceptions
2024-11-03 06:04:45,448:INFO:Importing libraries
2024-11-03 06:04:45,448:INFO:Copying training dataset
2024-11-03 06:04:45,454:INFO:Defining folds
2024-11-03 06:04:45,455:INFO:Declaring metric variables
2024-11-03 06:04:45,455:INFO:Importing untrained model
2024-11-03 06:04:45,455:INFO:Declaring custom model
2024-11-03 06:04:45,456:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 06:04:45,457:INFO:Cross validation set to False
2024-11-03 06:04:45,458:INFO:Fitting Model
2024-11-03 06:04:45,546:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 06:04:45,547:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 06:04:45,547:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 06:04:45,547:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 06:04:45,547:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 06:04:45,547:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,547:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,547:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,548:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,551:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,555:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,557:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,557:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:45,564:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 06:04:45,564:INFO:create_model() successfully completed......................................
2024-11-03 06:04:45,636:INFO:_master_model_container: 14
2024-11-03 06:04:45,636:INFO:_display_container: 2
2024-11-03 06:04:45,636:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 06:04:45,637:INFO:compare_models() successfully completed......................................
2024-11-03 06:04:45,637:INFO:Initializing tune_model()
2024-11-03 06:04:45,637:INFO:tune_model(estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>)
2024-11-03 06:04:45,637:INFO:Checking exceptions
2024-11-03 06:04:45,641:INFO:Copying training dataset
2024-11-03 06:04:45,645:INFO:Checking base model
2024-11-03 06:04:45,645:INFO:Base model : Quadratic Discriminant Analysis
2024-11-03 06:04:45,646:INFO:Declaring metric variables
2024-11-03 06:04:45,646:INFO:Defining Hyperparameters
2024-11-03 06:04:45,712:INFO:Tuning with n_jobs=-1
2024-11-03 06:04:45,712:INFO:Initializing RandomizedSearchCV
2024-11-03 06:04:48,364:INFO:best_params: {'actual_estimator__reg_param': 0.47}
2024-11-03 06:04:48,365:INFO:Hyperparameter search completed
2024-11-03 06:04:48,365:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:48,365:INFO:Initializing create_model()
2024-11-03 06:04:48,365:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F95AD3EE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_param': 0.47})
2024-11-03 06:04:48,366:INFO:Checking exceptions
2024-11-03 06:04:48,366:INFO:Importing libraries
2024-11-03 06:04:48,366:INFO:Copying training dataset
2024-11-03 06:04:48,377:INFO:Defining folds
2024-11-03 06:04:48,377:INFO:Declaring metric variables
2024-11-03 06:04:48,377:INFO:Importing untrained model
2024-11-03 06:04:48,377:INFO:Declaring custom model
2024-11-03 06:04:48,379:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 06:04:48,379:INFO:Starting cross validation
2024-11-03 06:04:48,381:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:48,738:INFO:Calculating mean and std
2024-11-03 06:04:48,739:INFO:Creating metrics dataframe
2024-11-03 06:04:48,741:INFO:Finalizing model
2024-11-03 06:04:48,758:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 06:04:48,759:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 06:04:48,759:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 06:04:48,759:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 06:04:48,759:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 06:04:48,759:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,759:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,759:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,760:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,761:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,762:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,762:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,762:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,762:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,762:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,762:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,764:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,764:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,765:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,765:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,765:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,765:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,765:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,765:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,766:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,767:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,768:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,769:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,770:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,771:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,771:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,771:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,771:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,771:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,772:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,773:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,773:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,773:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,773:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,773:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,773:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:48,779:INFO:Uploading results into container
2024-11-03 06:04:48,780:INFO:Uploading model into container now
2024-11-03 06:04:48,780:INFO:_master_model_container: 15
2024-11-03 06:04:48,780:INFO:_display_container: 3
2024-11-03 06:04:48,780:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001)
2024-11-03 06:04:48,780:INFO:create_model() successfully completed......................................
2024-11-03 06:04:48,833:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:48,833:INFO:choose_better activated
2024-11-03 06:04:48,834:INFO:SubProcess create_model() called ==================================
2024-11-03 06:04:48,834:INFO:Initializing create_model()
2024-11-03 06:04:48,834:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F94360FA30>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-03 06:04:48,834:INFO:Checking exceptions
2024-11-03 06:04:48,835:INFO:Importing libraries
2024-11-03 06:04:48,835:INFO:Copying training dataset
2024-11-03 06:04:48,841:INFO:Defining folds
2024-11-03 06:04:48,841:INFO:Declaring metric variables
2024-11-03 06:04:48,841:INFO:Importing untrained model
2024-11-03 06:04:48,841:INFO:Declaring custom model
2024-11-03 06:04:48,842:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-03 06:04:48,842:INFO:Starting cross validation
2024-11-03 06:04:48,844:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-03 06:04:49,112:INFO:Calculating mean and std
2024-11-03 06:04:49,113:INFO:Creating metrics dataframe
2024-11-03 06:04:49,115:INFO:Finalizing model
2024-11-03 06:04:49,128:INFO:[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.
2024-11-03 06:04:49,129:INFO:[LightGBM] [Info] Number of positive: 15, number of negative: 15
2024-11-03 06:04:49,129:INFO:[LightGBM] [Info] Total Bins 0
2024-11-03 06:04:49,129:INFO:[LightGBM] [Info] Number of data points in the train set: 30, number of used features: 0
2024-11-03 06:04:49,129:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,130:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,131:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,132:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,133:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,134:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,135:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,136:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,137:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,138:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,139:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,140:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-11-03 06:04:49,145:INFO:Uploading results into container
2024-11-03 06:04:49,145:INFO:Uploading model into container now
2024-11-03 06:04:49,146:INFO:_master_model_container: 16
2024-11-03 06:04:49,146:INFO:_display_container: 4
2024-11-03 06:04:49,146:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 06:04:49,146:INFO:create_model() successfully completed......................................
2024-11-03 06:04:49,195:INFO:SubProcess create_model() end ==================================
2024-11-03 06:04:49,195:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 06:04:49,196:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.47,
                              store_covariance=False, tol=0.0001) result for AUC is 0.8667
2024-11-03 06:04:49,196:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001) is best model
2024-11-03 06:04:49,196:INFO:choose_better completed
2024-11-03 06:04:49,197:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-03 06:04:49,207:INFO:_master_model_container: 16
2024-11-03 06:04:49,207:INFO:_display_container: 3
2024-11-03 06:04:49,208:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-03 06:04:49,208:INFO:tune_model() successfully completed......................................
2024-11-03 06:05:17,177:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:05:17,177:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:05:17,177:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:05:17,177:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:05:18,845:INFO:Initializing load_model()
2024-11-03 06:05:18,845:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 06:05:19,229:INFO:Initializing predict_model()
2024-11-03 06:05:19,229:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699CD3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EF70>)
2024-11-03 06:05:19,229:INFO:Checking exceptions
2024-11-03 06:05:19,229:INFO:Preloading libraries
2024-11-03 06:05:19,229:INFO:Set up data.
2024-11-03 06:05:19,238:INFO:Set up index.
2024-11-03 06:05:19,388:INFO:Initializing predict_model()
2024-11-03 06:05:19,388:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699CDBB0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:19,389:INFO:Checking exceptions
2024-11-03 06:05:19,389:INFO:Preloading libraries
2024-11-03 06:05:19,389:INFO:Set up data.
2024-11-03 06:05:19,394:INFO:Set up index.
2024-11-03 06:05:19,531:INFO:Initializing predict_model()
2024-11-03 06:05:19,531:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761942EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971F70>)
2024-11-03 06:05:19,531:INFO:Checking exceptions
2024-11-03 06:05:19,531:INFO:Preloading libraries
2024-11-03 06:05:19,531:INFO:Set up data.
2024-11-03 06:05:19,535:INFO:Set up index.
2024-11-03 06:05:19,678:INFO:Initializing predict_model()
2024-11-03 06:05:19,679:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:19,679:INFO:Checking exceptions
2024-11-03 06:05:19,679:INFO:Preloading libraries
2024-11-03 06:05:19,679:INFO:Set up data.
2024-11-03 06:05:19,682:INFO:Set up index.
2024-11-03 06:05:19,801:INFO:Initializing predict_model()
2024-11-03 06:05:19,801:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F757EE2070>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D0D0>)
2024-11-03 06:05:19,801:INFO:Checking exceptions
2024-11-03 06:05:19,801:INFO:Preloading libraries
2024-11-03 06:05:19,802:INFO:Set up data.
2024-11-03 06:05:19,807:INFO:Set up index.
2024-11-03 06:05:19,941:INFO:Initializing predict_model()
2024-11-03 06:05:19,941:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971F70>)
2024-11-03 06:05:19,941:INFO:Checking exceptions
2024-11-03 06:05:19,941:INFO:Preloading libraries
2024-11-03 06:05:19,942:INFO:Set up data.
2024-11-03 06:05:19,945:INFO:Set up index.
2024-11-03 06:05:20,103:INFO:Initializing predict_model()
2024-11-03 06:05:20,104:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:20,104:INFO:Checking exceptions
2024-11-03 06:05:20,104:INFO:Preloading libraries
2024-11-03 06:05:20,104:INFO:Set up data.
2024-11-03 06:05:20,109:INFO:Set up index.
2024-11-03 06:05:20,522:INFO:Initializing predict_model()
2024-11-03 06:05:20,522:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971F70>)
2024-11-03 06:05:20,522:INFO:Checking exceptions
2024-11-03 06:05:20,522:INFO:Preloading libraries
2024-11-03 06:05:20,523:INFO:Set up data.
2024-11-03 06:05:20,531:INFO:Set up index.
2024-11-03 06:05:20,670:INFO:Initializing predict_model()
2024-11-03 06:05:20,671:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D430>)
2024-11-03 06:05:20,671:INFO:Checking exceptions
2024-11-03 06:05:20,671:INFO:Preloading libraries
2024-11-03 06:05:20,672:INFO:Set up data.
2024-11-03 06:05:20,676:INFO:Set up index.
2024-11-03 06:05:20,813:INFO:Initializing predict_model()
2024-11-03 06:05:20,813:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:20,813:INFO:Checking exceptions
2024-11-03 06:05:20,813:INFO:Preloading libraries
2024-11-03 06:05:20,813:INFO:Set up data.
2024-11-03 06:05:20,817:INFO:Set up index.
2024-11-03 06:05:20,943:INFO:Initializing predict_model()
2024-11-03 06:05:20,943:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EDC0>)
2024-11-03 06:05:20,943:INFO:Checking exceptions
2024-11-03 06:05:20,943:INFO:Preloading libraries
2024-11-03 06:05:20,943:INFO:Set up data.
2024-11-03 06:05:20,948:INFO:Set up index.
2024-11-03 06:05:21,085:INFO:Initializing predict_model()
2024-11-03 06:05:21,085:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:21,085:INFO:Checking exceptions
2024-11-03 06:05:21,085:INFO:Preloading libraries
2024-11-03 06:05:21,086:INFO:Set up data.
2024-11-03 06:05:21,090:INFO:Set up index.
2024-11-03 06:05:21,240:INFO:Initializing predict_model()
2024-11-03 06:05:21,240:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EDC0>)
2024-11-03 06:05:21,241:INFO:Checking exceptions
2024-11-03 06:05:21,241:INFO:Preloading libraries
2024-11-03 06:05:21,241:INFO:Set up data.
2024-11-03 06:05:21,247:INFO:Set up index.
2024-11-03 06:05:21,393:INFO:Initializing predict_model()
2024-11-03 06:05:21,393:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:21,393:INFO:Checking exceptions
2024-11-03 06:05:21,393:INFO:Preloading libraries
2024-11-03 06:05:21,393:INFO:Set up data.
2024-11-03 06:05:21,399:INFO:Set up index.
2024-11-03 06:05:21,544:INFO:Initializing predict_model()
2024-11-03 06:05:21,544:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F757EE2070>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EDC0>)
2024-11-03 06:05:21,545:INFO:Checking exceptions
2024-11-03 06:05:21,545:INFO:Preloading libraries
2024-11-03 06:05:21,545:INFO:Set up data.
2024-11-03 06:05:21,550:INFO:Set up index.
2024-11-03 06:05:21,696:INFO:Initializing predict_model()
2024-11-03 06:05:21,696:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F757EE2040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EF70>)
2024-11-03 06:05:21,696:INFO:Checking exceptions
2024-11-03 06:05:21,696:INFO:Preloading libraries
2024-11-03 06:05:21,696:INFO:Set up data.
2024-11-03 06:05:21,703:INFO:Set up index.
2024-11-03 06:05:21,859:INFO:Initializing predict_model()
2024-11-03 06:05:21,859:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:21,859:INFO:Checking exceptions
2024-11-03 06:05:21,859:INFO:Preloading libraries
2024-11-03 06:05:21,860:INFO:Set up data.
2024-11-03 06:05:21,866:INFO:Set up index.
2024-11-03 06:05:22,012:INFO:Initializing predict_model()
2024-11-03 06:05:22,012:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971E50>)
2024-11-03 06:05:22,012:INFO:Checking exceptions
2024-11-03 06:05:22,012:INFO:Preloading libraries
2024-11-03 06:05:22,012:INFO:Set up data.
2024-11-03 06:05:22,017:INFO:Set up index.
2024-11-03 06:05:22,155:INFO:Initializing predict_model()
2024-11-03 06:05:22,156:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EF70>)
2024-11-03 06:05:22,156:INFO:Checking exceptions
2024-11-03 06:05:22,156:INFO:Preloading libraries
2024-11-03 06:05:22,157:INFO:Set up data.
2024-11-03 06:05:22,160:INFO:Set up index.
2024-11-03 06:05:22,285:INFO:Initializing predict_model()
2024-11-03 06:05:22,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D0D0>)
2024-11-03 06:05:22,286:INFO:Checking exceptions
2024-11-03 06:05:22,286:INFO:Preloading libraries
2024-11-03 06:05:22,286:INFO:Set up data.
2024-11-03 06:05:22,289:INFO:Set up index.
2024-11-03 06:05:22,445:INFO:Initializing predict_model()
2024-11-03 06:05:22,445:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:22,445:INFO:Checking exceptions
2024-11-03 06:05:22,445:INFO:Preloading libraries
2024-11-03 06:05:22,445:INFO:Set up data.
2024-11-03 06:05:22,450:INFO:Set up index.
2024-11-03 06:05:22,581:INFO:Initializing predict_model()
2024-11-03 06:05:22,581:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971B80>)
2024-11-03 06:05:22,581:INFO:Checking exceptions
2024-11-03 06:05:22,582:INFO:Preloading libraries
2024-11-03 06:05:22,582:INFO:Set up data.
2024-11-03 06:05:22,587:INFO:Set up index.
2024-11-03 06:05:22,735:INFO:Initializing predict_model()
2024-11-03 06:05:22,735:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EF70>)
2024-11-03 06:05:22,735:INFO:Checking exceptions
2024-11-03 06:05:22,735:INFO:Preloading libraries
2024-11-03 06:05:22,735:INFO:Set up data.
2024-11-03 06:05:22,740:INFO:Set up index.
2024-11-03 06:05:22,908:INFO:Initializing predict_model()
2024-11-03 06:05:22,908:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:22,908:INFO:Checking exceptions
2024-11-03 06:05:22,909:INFO:Preloading libraries
2024-11-03 06:05:22,909:INFO:Set up data.
2024-11-03 06:05:22,914:INFO:Set up index.
2024-11-03 06:05:23,076:INFO:Initializing predict_model()
2024-11-03 06:05:23,076:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971DC0>)
2024-11-03 06:05:23,077:INFO:Checking exceptions
2024-11-03 06:05:23,077:INFO:Preloading libraries
2024-11-03 06:05:23,078:INFO:Set up data.
2024-11-03 06:05:23,195:INFO:Set up index.
2024-11-03 06:05:23,345:INFO:Initializing predict_model()
2024-11-03 06:05:23,345:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EDC0>)
2024-11-03 06:05:23,346:INFO:Checking exceptions
2024-11-03 06:05:23,346:INFO:Preloading libraries
2024-11-03 06:05:23,346:INFO:Set up data.
2024-11-03 06:05:23,350:INFO:Set up index.
2024-11-03 06:05:23,500:INFO:Initializing predict_model()
2024-11-03 06:05:23,501:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D040>)
2024-11-03 06:05:23,501:INFO:Checking exceptions
2024-11-03 06:05:23,501:INFO:Preloading libraries
2024-11-03 06:05:23,501:INFO:Set up data.
2024-11-03 06:05:23,505:INFO:Set up index.
2024-11-03 06:05:23,661:INFO:Initializing predict_model()
2024-11-03 06:05:23,662:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971CA0>)
2024-11-03 06:05:23,662:INFO:Checking exceptions
2024-11-03 06:05:23,662:INFO:Preloading libraries
2024-11-03 06:05:23,663:INFO:Set up data.
2024-11-03 06:05:23,671:INFO:Set up index.
2024-11-03 06:05:23,825:INFO:Initializing predict_model()
2024-11-03 06:05:23,826:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971B80>)
2024-11-03 06:05:23,826:INFO:Checking exceptions
2024-11-03 06:05:23,826:INFO:Preloading libraries
2024-11-03 06:05:23,826:INFO:Set up data.
2024-11-03 06:05:23,831:INFO:Set up index.
2024-11-03 06:05:23,981:INFO:Initializing predict_model()
2024-11-03 06:05:23,981:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D160>)
2024-11-03 06:05:23,981:INFO:Checking exceptions
2024-11-03 06:05:23,981:INFO:Preloading libraries
2024-11-03 06:05:23,981:INFO:Set up data.
2024-11-03 06:05:23,985:INFO:Set up index.
2024-11-03 06:05:24,130:INFO:Initializing predict_model()
2024-11-03 06:05:24,130:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:24,130:INFO:Checking exceptions
2024-11-03 06:05:24,130:INFO:Preloading libraries
2024-11-03 06:05:24,131:INFO:Set up data.
2024-11-03 06:05:24,136:INFO:Set up index.
2024-11-03 06:05:24,281:INFO:Initializing predict_model()
2024-11-03 06:05:24,281:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971EE0>)
2024-11-03 06:05:24,281:INFO:Checking exceptions
2024-11-03 06:05:24,281:INFO:Preloading libraries
2024-11-03 06:05:24,282:INFO:Set up data.
2024-11-03 06:05:24,288:INFO:Set up index.
2024-11-03 06:05:24,439:INFO:Initializing predict_model()
2024-11-03 06:05:24,439:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971DC0>)
2024-11-03 06:05:24,439:INFO:Checking exceptions
2024-11-03 06:05:24,439:INFO:Preloading libraries
2024-11-03 06:05:24,439:INFO:Set up data.
2024-11-03 06:05:24,445:INFO:Set up index.
2024-11-03 06:05:24,589:INFO:Initializing predict_model()
2024-11-03 06:05:24,589:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971D30>)
2024-11-03 06:05:24,589:INFO:Checking exceptions
2024-11-03 06:05:24,589:INFO:Preloading libraries
2024-11-03 06:05:24,590:INFO:Set up data.
2024-11-03 06:05:24,594:INFO:Set up index.
2024-11-03 06:05:24,740:INFO:Initializing predict_model()
2024-11-03 06:05:24,740:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D310>)
2024-11-03 06:05:24,741:INFO:Checking exceptions
2024-11-03 06:05:24,741:INFO:Preloading libraries
2024-11-03 06:05:24,741:INFO:Set up data.
2024-11-03 06:05:24,745:INFO:Set up index.
2024-11-03 06:05:24,883:INFO:Initializing predict_model()
2024-11-03 06:05:24,883:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:24,883:INFO:Checking exceptions
2024-11-03 06:05:24,883:INFO:Preloading libraries
2024-11-03 06:05:24,884:INFO:Set up data.
2024-11-03 06:05:24,888:INFO:Set up index.
2024-11-03 06:05:25,051:INFO:Initializing predict_model()
2024-11-03 06:05:25,051:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:25,052:INFO:Checking exceptions
2024-11-03 06:05:25,052:INFO:Preloading libraries
2024-11-03 06:05:25,052:INFO:Set up data.
2024-11-03 06:05:25,057:INFO:Set up index.
2024-11-03 06:05:25,215:INFO:Initializing predict_model()
2024-11-03 06:05:25,215:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:25,215:INFO:Checking exceptions
2024-11-03 06:05:25,215:INFO:Preloading libraries
2024-11-03 06:05:25,216:INFO:Set up data.
2024-11-03 06:05:25,224:INFO:Set up index.
2024-11-03 06:05:25,374:INFO:Initializing predict_model()
2024-11-03 06:05:25,374:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:25,374:INFO:Checking exceptions
2024-11-03 06:05:25,374:INFO:Preloading libraries
2024-11-03 06:05:25,375:INFO:Set up data.
2024-11-03 06:05:25,379:INFO:Set up index.
2024-11-03 06:05:25,524:INFO:Initializing predict_model()
2024-11-03 06:05:25,524:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:25,524:INFO:Checking exceptions
2024-11-03 06:05:25,524:INFO:Preloading libraries
2024-11-03 06:05:25,524:INFO:Set up data.
2024-11-03 06:05:25,528:INFO:Set up index.
2024-11-03 06:05:25,668:INFO:Initializing predict_model()
2024-11-03 06:05:25,668:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:25,668:INFO:Checking exceptions
2024-11-03 06:05:25,668:INFO:Preloading libraries
2024-11-03 06:05:25,669:INFO:Set up data.
2024-11-03 06:05:25,674:INFO:Set up index.
2024-11-03 06:05:25,821:INFO:Initializing predict_model()
2024-11-03 06:05:25,821:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:25,821:INFO:Checking exceptions
2024-11-03 06:05:25,821:INFO:Preloading libraries
2024-11-03 06:05:25,821:INFO:Set up data.
2024-11-03 06:05:25,825:INFO:Set up index.
2024-11-03 06:05:25,972:INFO:Initializing predict_model()
2024-11-03 06:05:25,972:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:25,972:INFO:Checking exceptions
2024-11-03 06:05:25,972:INFO:Preloading libraries
2024-11-03 06:05:25,972:INFO:Set up data.
2024-11-03 06:05:25,976:INFO:Set up index.
2024-11-03 06:05:26,123:INFO:Initializing predict_model()
2024-11-03 06:05:26,123:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:26,123:INFO:Checking exceptions
2024-11-03 06:05:26,123:INFO:Preloading libraries
2024-11-03 06:05:26,124:INFO:Set up data.
2024-11-03 06:05:26,130:INFO:Set up index.
2024-11-03 06:05:26,269:INFO:Initializing predict_model()
2024-11-03 06:05:26,269:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:26,269:INFO:Checking exceptions
2024-11-03 06:05:26,269:INFO:Preloading libraries
2024-11-03 06:05:26,269:INFO:Set up data.
2024-11-03 06:05:26,273:INFO:Set up index.
2024-11-03 06:05:26,428:INFO:Initializing predict_model()
2024-11-03 06:05:26,428:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:26,428:INFO:Checking exceptions
2024-11-03 06:05:26,428:INFO:Preloading libraries
2024-11-03 06:05:26,428:INFO:Set up data.
2024-11-03 06:05:26,432:INFO:Set up index.
2024-11-03 06:05:26,580:INFO:Initializing predict_model()
2024-11-03 06:05:26,580:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:26,580:INFO:Checking exceptions
2024-11-03 06:05:26,580:INFO:Preloading libraries
2024-11-03 06:05:26,581:INFO:Set up data.
2024-11-03 06:05:26,629:INFO:Set up index.
2024-11-03 06:05:26,850:INFO:Initializing predict_model()
2024-11-03 06:05:26,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D160>)
2024-11-03 06:05:26,851:INFO:Checking exceptions
2024-11-03 06:05:26,851:INFO:Preloading libraries
2024-11-03 06:05:26,851:INFO:Set up data.
2024-11-03 06:05:26,855:INFO:Set up index.
2024-11-03 06:05:26,995:INFO:Initializing predict_model()
2024-11-03 06:05:26,995:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:26,995:INFO:Checking exceptions
2024-11-03 06:05:26,995:INFO:Preloading libraries
2024-11-03 06:05:26,995:INFO:Set up data.
2024-11-03 06:05:27,000:INFO:Set up index.
2024-11-03 06:05:27,237:INFO:Initializing predict_model()
2024-11-03 06:05:27,237:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:27,238:INFO:Checking exceptions
2024-11-03 06:05:27,238:INFO:Preloading libraries
2024-11-03 06:05:27,240:INFO:Set up data.
2024-11-03 06:05:27,249:INFO:Set up index.
2024-11-03 06:05:27,396:INFO:Initializing predict_model()
2024-11-03 06:05:27,397:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F7699718B0>)
2024-11-03 06:05:27,397:INFO:Checking exceptions
2024-11-03 06:05:27,397:INFO:Preloading libraries
2024-11-03 06:05:27,397:INFO:Set up data.
2024-11-03 06:05:27,405:INFO:Set up index.
2024-11-03 06:05:27,543:INFO:Initializing predict_model()
2024-11-03 06:05:27,543:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971AF0>)
2024-11-03 06:05:27,543:INFO:Checking exceptions
2024-11-03 06:05:27,543:INFO:Preloading libraries
2024-11-03 06:05:27,543:INFO:Set up data.
2024-11-03 06:05:27,547:INFO:Set up index.
2024-11-03 06:05:27,692:INFO:Initializing predict_model()
2024-11-03 06:05:27,692:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:27,693:INFO:Checking exceptions
2024-11-03 06:05:27,693:INFO:Preloading libraries
2024-11-03 06:05:27,693:INFO:Set up data.
2024-11-03 06:05:27,701:INFO:Set up index.
2024-11-03 06:05:27,849:INFO:Initializing predict_model()
2024-11-03 06:05:27,850:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:27,850:INFO:Checking exceptions
2024-11-03 06:05:27,850:INFO:Preloading libraries
2024-11-03 06:05:27,850:INFO:Set up data.
2024-11-03 06:05:27,855:INFO:Set up index.
2024-11-03 06:05:27,996:INFO:Initializing predict_model()
2024-11-03 06:05:27,996:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:27,996:INFO:Checking exceptions
2024-11-03 06:05:27,996:INFO:Preloading libraries
2024-11-03 06:05:27,996:INFO:Set up data.
2024-11-03 06:05:28,000:INFO:Set up index.
2024-11-03 06:05:28,133:INFO:Initializing predict_model()
2024-11-03 06:05:28,134:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:28,134:INFO:Checking exceptions
2024-11-03 06:05:28,134:INFO:Preloading libraries
2024-11-03 06:05:28,134:INFO:Set up data.
2024-11-03 06:05:28,138:INFO:Set up index.
2024-11-03 06:05:28,286:INFO:Initializing predict_model()
2024-11-03 06:05:28,287:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:28,287:INFO:Checking exceptions
2024-11-03 06:05:28,287:INFO:Preloading libraries
2024-11-03 06:05:28,287:INFO:Set up data.
2024-11-03 06:05:28,292:INFO:Set up index.
2024-11-03 06:05:28,431:INFO:Initializing predict_model()
2024-11-03 06:05:28,431:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:28,431:INFO:Checking exceptions
2024-11-03 06:05:28,431:INFO:Preloading libraries
2024-11-03 06:05:28,432:INFO:Set up data.
2024-11-03 06:05:28,436:INFO:Set up index.
2024-11-03 06:05:28,564:INFO:Initializing predict_model()
2024-11-03 06:05:28,564:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:28,564:INFO:Checking exceptions
2024-11-03 06:05:28,564:INFO:Preloading libraries
2024-11-03 06:05:28,564:INFO:Set up data.
2024-11-03 06:05:28,569:INFO:Set up index.
2024-11-03 06:05:28,701:INFO:Initializing predict_model()
2024-11-03 06:05:28,701:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:28,701:INFO:Checking exceptions
2024-11-03 06:05:28,701:INFO:Preloading libraries
2024-11-03 06:05:28,702:INFO:Set up data.
2024-11-03 06:05:28,707:INFO:Set up index.
2024-11-03 06:05:28,849:INFO:Initializing predict_model()
2024-11-03 06:05:28,849:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:28,849:INFO:Checking exceptions
2024-11-03 06:05:28,849:INFO:Preloading libraries
2024-11-03 06:05:28,849:INFO:Set up data.
2024-11-03 06:05:28,853:INFO:Set up index.
2024-11-03 06:05:28,995:INFO:Initializing predict_model()
2024-11-03 06:05:28,996:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:28,996:INFO:Checking exceptions
2024-11-03 06:05:28,996:INFO:Preloading libraries
2024-11-03 06:05:28,996:INFO:Set up data.
2024-11-03 06:05:29,000:INFO:Set up index.
2024-11-03 06:05:29,139:INFO:Initializing predict_model()
2024-11-03 06:05:29,139:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:29,139:INFO:Checking exceptions
2024-11-03 06:05:29,139:INFO:Preloading libraries
2024-11-03 06:05:29,140:INFO:Set up data.
2024-11-03 06:05:29,147:INFO:Set up index.
2024-11-03 06:05:29,292:INFO:Initializing predict_model()
2024-11-03 06:05:29,292:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:29,293:INFO:Checking exceptions
2024-11-03 06:05:29,293:INFO:Preloading libraries
2024-11-03 06:05:29,293:INFO:Set up data.
2024-11-03 06:05:29,297:INFO:Set up index.
2024-11-03 06:05:29,435:INFO:Initializing predict_model()
2024-11-03 06:05:29,435:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:29,435:INFO:Checking exceptions
2024-11-03 06:05:29,436:INFO:Preloading libraries
2024-11-03 06:05:29,436:INFO:Set up data.
2024-11-03 06:05:29,440:INFO:Set up index.
2024-11-03 06:05:29,591:INFO:Initializing predict_model()
2024-11-03 06:05:29,591:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:29,591:INFO:Checking exceptions
2024-11-03 06:05:29,591:INFO:Preloading libraries
2024-11-03 06:05:29,592:INFO:Set up data.
2024-11-03 06:05:29,596:INFO:Set up index.
2024-11-03 06:05:29,733:INFO:Initializing predict_model()
2024-11-03 06:05:29,733:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:29,734:INFO:Checking exceptions
2024-11-03 06:05:29,734:INFO:Preloading libraries
2024-11-03 06:05:29,734:INFO:Set up data.
2024-11-03 06:05:29,738:INFO:Set up index.
2024-11-03 06:05:29,873:INFO:Initializing predict_model()
2024-11-03 06:05:29,874:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:29,874:INFO:Checking exceptions
2024-11-03 06:05:29,874:INFO:Preloading libraries
2024-11-03 06:05:29,874:INFO:Set up data.
2024-11-03 06:05:29,879:INFO:Set up index.
2024-11-03 06:05:30,030:INFO:Initializing predict_model()
2024-11-03 06:05:30,030:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:30,030:INFO:Checking exceptions
2024-11-03 06:05:30,030:INFO:Preloading libraries
2024-11-03 06:05:30,030:INFO:Set up data.
2024-11-03 06:05:30,034:INFO:Set up index.
2024-11-03 06:05:30,154:INFO:Initializing predict_model()
2024-11-03 06:05:30,154:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8040>)
2024-11-03 06:05:30,154:INFO:Checking exceptions
2024-11-03 06:05:30,155:INFO:Preloading libraries
2024-11-03 06:05:30,155:INFO:Set up data.
2024-11-03 06:05:30,161:INFO:Set up index.
2024-11-03 06:05:30,297:INFO:Initializing predict_model()
2024-11-03 06:05:30,297:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8F70>)
2024-11-03 06:05:30,297:INFO:Checking exceptions
2024-11-03 06:05:30,297:INFO:Preloading libraries
2024-11-03 06:05:30,297:INFO:Set up data.
2024-11-03 06:05:30,302:INFO:Set up index.
2024-11-03 06:05:30,438:INFO:Initializing predict_model()
2024-11-03 06:05:30,438:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8A60>)
2024-11-03 06:05:30,438:INFO:Checking exceptions
2024-11-03 06:05:30,438:INFO:Preloading libraries
2024-11-03 06:05:30,439:INFO:Set up data.
2024-11-03 06:05:30,445:INFO:Set up index.
2024-11-03 06:05:30,579:INFO:Initializing predict_model()
2024-11-03 06:05:30,579:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:30,579:INFO:Checking exceptions
2024-11-03 06:05:30,579:INFO:Preloading libraries
2024-11-03 06:05:30,579:INFO:Set up data.
2024-11-03 06:05:30,583:INFO:Set up index.
2024-11-03 06:05:30,707:INFO:Initializing predict_model()
2024-11-03 06:05:30,708:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:30,708:INFO:Checking exceptions
2024-11-03 06:05:30,708:INFO:Preloading libraries
2024-11-03 06:05:30,708:INFO:Set up data.
2024-11-03 06:05:30,712:INFO:Set up index.
2024-11-03 06:05:30,849:INFO:Initializing predict_model()
2024-11-03 06:05:30,849:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D430>)
2024-11-03 06:05:30,849:INFO:Checking exceptions
2024-11-03 06:05:30,849:INFO:Preloading libraries
2024-11-03 06:05:30,850:INFO:Set up data.
2024-11-03 06:05:30,855:INFO:Set up index.
2024-11-03 06:05:31,004:INFO:Initializing predict_model()
2024-11-03 06:05:31,004:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971F70>)
2024-11-03 06:05:31,004:INFO:Checking exceptions
2024-11-03 06:05:31,004:INFO:Preloading libraries
2024-11-03 06:05:31,004:INFO:Set up data.
2024-11-03 06:05:31,009:INFO:Set up index.
2024-11-03 06:05:31,173:INFO:Initializing predict_model()
2024-11-03 06:05:31,174:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:31,174:INFO:Checking exceptions
2024-11-03 06:05:31,174:INFO:Preloading libraries
2024-11-03 06:05:31,174:INFO:Set up data.
2024-11-03 06:05:31,189:INFO:Set up index.
2024-11-03 06:05:31,398:INFO:Initializing predict_model()
2024-11-03 06:05:31,398:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:31,398:INFO:Checking exceptions
2024-11-03 06:05:31,398:INFO:Preloading libraries
2024-11-03 06:05:31,398:INFO:Set up data.
2024-11-03 06:05:31,402:INFO:Set up index.
2024-11-03 06:05:31,530:INFO:Initializing predict_model()
2024-11-03 06:05:31,531:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:31,531:INFO:Checking exceptions
2024-11-03 06:05:31,531:INFO:Preloading libraries
2024-11-03 06:05:31,531:INFO:Set up data.
2024-11-03 06:05:31,535:INFO:Set up index.
2024-11-03 06:05:31,670:INFO:Initializing predict_model()
2024-11-03 06:05:31,671:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F0885E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:31,671:INFO:Checking exceptions
2024-11-03 06:05:31,671:INFO:Preloading libraries
2024-11-03 06:05:31,671:INFO:Set up data.
2024-11-03 06:05:31,676:INFO:Set up index.
2024-11-03 06:05:31,806:INFO:Initializing predict_model()
2024-11-03 06:05:31,806:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:31,806:INFO:Checking exceptions
2024-11-03 06:05:31,806:INFO:Preloading libraries
2024-11-03 06:05:31,807:INFO:Set up data.
2024-11-03 06:05:31,811:INFO:Set up index.
2024-11-03 06:05:31,946:INFO:Initializing predict_model()
2024-11-03 06:05:31,947:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:31,947:INFO:Checking exceptions
2024-11-03 06:05:31,947:INFO:Preloading libraries
2024-11-03 06:05:31,947:INFO:Set up data.
2024-11-03 06:05:31,951:INFO:Set up index.
2024-11-03 06:05:32,081:INFO:Initializing predict_model()
2024-11-03 06:05:32,082:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:32,082:INFO:Checking exceptions
2024-11-03 06:05:32,082:INFO:Preloading libraries
2024-11-03 06:05:32,083:INFO:Set up data.
2024-11-03 06:05:32,087:INFO:Set up index.
2024-11-03 06:05:32,224:INFO:Initializing predict_model()
2024-11-03 06:05:32,224:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:32,224:INFO:Checking exceptions
2024-11-03 06:05:32,224:INFO:Preloading libraries
2024-11-03 06:05:32,224:INFO:Set up data.
2024-11-03 06:05:32,230:INFO:Set up index.
2024-11-03 06:05:32,362:INFO:Initializing predict_model()
2024-11-03 06:05:32,363:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D1F0>)
2024-11-03 06:05:32,364:INFO:Checking exceptions
2024-11-03 06:05:32,364:INFO:Preloading libraries
2024-11-03 06:05:32,364:INFO:Set up data.
2024-11-03 06:05:32,368:INFO:Set up index.
2024-11-03 06:05:32,500:INFO:Initializing predict_model()
2024-11-03 06:05:32,500:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699B2730>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:32,500:INFO:Checking exceptions
2024-11-03 06:05:32,500:INFO:Preloading libraries
2024-11-03 06:05:32,500:INFO:Set up data.
2024-11-03 06:05:32,505:INFO:Set up index.
2024-11-03 06:05:32,646:INFO:Initializing predict_model()
2024-11-03 06:05:32,646:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:32,646:INFO:Checking exceptions
2024-11-03 06:05:32,646:INFO:Preloading libraries
2024-11-03 06:05:32,647:INFO:Set up data.
2024-11-03 06:05:32,651:INFO:Set up index.
2024-11-03 06:05:32,800:INFO:Initializing predict_model()
2024-11-03 06:05:32,800:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:32,800:INFO:Checking exceptions
2024-11-03 06:05:32,801:INFO:Preloading libraries
2024-11-03 06:05:32,802:INFO:Set up data.
2024-11-03 06:05:32,809:INFO:Set up index.
2024-11-03 06:05:32,963:INFO:Initializing predict_model()
2024-11-03 06:05:32,963:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699CD400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:32,963:INFO:Checking exceptions
2024-11-03 06:05:32,963:INFO:Preloading libraries
2024-11-03 06:05:32,963:INFO:Set up data.
2024-11-03 06:05:32,968:INFO:Set up index.
2024-11-03 06:05:33,095:INFO:Initializing predict_model()
2024-11-03 06:05:33,095:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:33,095:INFO:Checking exceptions
2024-11-03 06:05:33,096:INFO:Preloading libraries
2024-11-03 06:05:33,096:INFO:Set up data.
2024-11-03 06:05:33,100:INFO:Set up index.
2024-11-03 06:05:33,234:INFO:Initializing predict_model()
2024-11-03 06:05:33,234:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F0885E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:33,234:INFO:Checking exceptions
2024-11-03 06:05:33,234:INFO:Preloading libraries
2024-11-03 06:05:33,235:INFO:Set up data.
2024-11-03 06:05:33,239:INFO:Set up index.
2024-11-03 06:05:33,374:INFO:Initializing predict_model()
2024-11-03 06:05:33,374:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:33,374:INFO:Checking exceptions
2024-11-03 06:05:33,374:INFO:Preloading libraries
2024-11-03 06:05:33,374:INFO:Set up data.
2024-11-03 06:05:33,378:INFO:Set up index.
2024-11-03 06:05:33,514:INFO:Initializing predict_model()
2024-11-03 06:05:33,514:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:33,514:INFO:Checking exceptions
2024-11-03 06:05:33,514:INFO:Preloading libraries
2024-11-03 06:05:33,514:INFO:Set up data.
2024-11-03 06:05:33,518:INFO:Set up index.
2024-11-03 06:05:33,651:INFO:Initializing predict_model()
2024-11-03 06:05:33,651:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:33,651:INFO:Checking exceptions
2024-11-03 06:05:33,651:INFO:Preloading libraries
2024-11-03 06:05:33,652:INFO:Set up data.
2024-11-03 06:05:33,656:INFO:Set up index.
2024-11-03 06:05:33,784:INFO:Initializing predict_model()
2024-11-03 06:05:33,785:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F09D160>)
2024-11-03 06:05:33,785:INFO:Checking exceptions
2024-11-03 06:05:33,785:INFO:Preloading libraries
2024-11-03 06:05:33,785:INFO:Set up data.
2024-11-03 06:05:33,790:INFO:Set up index.
2024-11-03 06:05:33,922:INFO:Initializing predict_model()
2024-11-03 06:05:33,922:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EEE0>)
2024-11-03 06:05:33,922:INFO:Checking exceptions
2024-11-03 06:05:33,922:INFO:Preloading libraries
2024-11-03 06:05:33,923:INFO:Set up data.
2024-11-03 06:05:33,927:INFO:Set up index.
2024-11-03 06:05:34,064:INFO:Initializing predict_model()
2024-11-03 06:05:34,064:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:34,064:INFO:Checking exceptions
2024-11-03 06:05:34,064:INFO:Preloading libraries
2024-11-03 06:05:34,065:INFO:Set up data.
2024-11-03 06:05:34,071:INFO:Set up index.
2024-11-03 06:05:34,211:INFO:Initializing predict_model()
2024-11-03 06:05:34,211:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:34,211:INFO:Checking exceptions
2024-11-03 06:05:34,211:INFO:Preloading libraries
2024-11-03 06:05:34,211:INFO:Set up data.
2024-11-03 06:05:34,218:INFO:Set up index.
2024-11-03 06:05:34,363:INFO:Initializing predict_model()
2024-11-03 06:05:34,363:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:34,363:INFO:Checking exceptions
2024-11-03 06:05:34,363:INFO:Preloading libraries
2024-11-03 06:05:34,364:INFO:Set up data.
2024-11-03 06:05:34,369:INFO:Set up index.
2024-11-03 06:05:34,501:INFO:Initializing predict_model()
2024-11-03 06:05:34,501:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:34,501:INFO:Checking exceptions
2024-11-03 06:05:34,501:INFO:Preloading libraries
2024-11-03 06:05:34,502:INFO:Set up data.
2024-11-03 06:05:34,505:INFO:Set up index.
2024-11-03 06:05:34,648:INFO:Initializing predict_model()
2024-11-03 06:05:34,648:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:34,648:INFO:Checking exceptions
2024-11-03 06:05:34,649:INFO:Preloading libraries
2024-11-03 06:05:34,649:INFO:Set up data.
2024-11-03 06:05:34,653:INFO:Set up index.
2024-11-03 06:05:34,776:INFO:Initializing predict_model()
2024-11-03 06:05:34,777:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699B2310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:34,777:INFO:Checking exceptions
2024-11-03 06:05:34,777:INFO:Preloading libraries
2024-11-03 06:05:34,777:INFO:Set up data.
2024-11-03 06:05:34,782:INFO:Set up index.
2024-11-03 06:05:34,916:INFO:Initializing predict_model()
2024-11-03 06:05:34,917:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:34,917:INFO:Checking exceptions
2024-11-03 06:05:34,917:INFO:Preloading libraries
2024-11-03 06:05:34,917:INFO:Set up data.
2024-11-03 06:05:34,922:INFO:Set up index.
2024-11-03 06:05:35,056:INFO:Initializing predict_model()
2024-11-03 06:05:35,057:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:35,057:INFO:Checking exceptions
2024-11-03 06:05:35,057:INFO:Preloading libraries
2024-11-03 06:05:35,057:INFO:Set up data.
2024-11-03 06:05:35,061:INFO:Set up index.
2024-11-03 06:05:35,193:INFO:Initializing predict_model()
2024-11-03 06:05:35,193:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:35,193:INFO:Checking exceptions
2024-11-03 06:05:35,193:INFO:Preloading libraries
2024-11-03 06:05:35,194:INFO:Set up data.
2024-11-03 06:05:35,198:INFO:Set up index.
2024-11-03 06:05:35,426:INFO:Initializing predict_model()
2024-11-03 06:05:35,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:35,426:INFO:Checking exceptions
2024-11-03 06:05:35,426:INFO:Preloading libraries
2024-11-03 06:05:35,426:INFO:Set up data.
2024-11-03 06:05:35,432:INFO:Set up index.
2024-11-03 06:05:35,572:INFO:Initializing predict_model()
2024-11-03 06:05:35,572:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8280>)
2024-11-03 06:05:35,572:INFO:Checking exceptions
2024-11-03 06:05:35,572:INFO:Preloading libraries
2024-11-03 06:05:35,573:INFO:Set up data.
2024-11-03 06:05:35,577:INFO:Set up index.
2024-11-03 06:05:35,700:INFO:Initializing predict_model()
2024-11-03 06:05:35,700:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D85E0>)
2024-11-03 06:05:35,700:INFO:Checking exceptions
2024-11-03 06:05:35,701:INFO:Preloading libraries
2024-11-03 06:05:35,701:INFO:Set up data.
2024-11-03 06:05:35,705:INFO:Set up index.
2024-11-03 06:05:35,827:INFO:Initializing predict_model()
2024-11-03 06:05:35,827:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:35,827:INFO:Checking exceptions
2024-11-03 06:05:35,827:INFO:Preloading libraries
2024-11-03 06:05:35,828:INFO:Set up data.
2024-11-03 06:05:35,833:INFO:Set up index.
2024-11-03 06:05:35,978:INFO:Initializing predict_model()
2024-11-03 06:05:35,978:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:35,978:INFO:Checking exceptions
2024-11-03 06:05:35,978:INFO:Preloading libraries
2024-11-03 06:05:35,978:INFO:Set up data.
2024-11-03 06:05:35,982:INFO:Set up index.
2024-11-03 06:05:36,156:INFO:Initializing predict_model()
2024-11-03 06:05:36,156:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F0885E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:36,156:INFO:Checking exceptions
2024-11-03 06:05:36,156:INFO:Preloading libraries
2024-11-03 06:05:36,156:INFO:Set up data.
2024-11-03 06:05:36,163:INFO:Set up index.
2024-11-03 06:05:36,286:INFO:Initializing predict_model()
2024-11-03 06:05:36,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:36,286:INFO:Checking exceptions
2024-11-03 06:05:36,286:INFO:Preloading libraries
2024-11-03 06:05:36,286:INFO:Set up data.
2024-11-03 06:05:36,291:INFO:Set up index.
2024-11-03 06:05:36,426:INFO:Initializing predict_model()
2024-11-03 06:05:36,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:36,426:INFO:Checking exceptions
2024-11-03 06:05:36,426:INFO:Preloading libraries
2024-11-03 06:05:36,426:INFO:Set up data.
2024-11-03 06:05:36,430:INFO:Set up index.
2024-11-03 06:05:36,564:INFO:Initializing predict_model()
2024-11-03 06:05:36,564:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F757ED5E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:36,564:INFO:Checking exceptions
2024-11-03 06:05:36,564:INFO:Preloading libraries
2024-11-03 06:05:36,564:INFO:Set up data.
2024-11-03 06:05:36,569:INFO:Set up index.
2024-11-03 06:05:36,689:INFO:Initializing predict_model()
2024-11-03 06:05:36,689:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:36,689:INFO:Checking exceptions
2024-11-03 06:05:36,689:INFO:Preloading libraries
2024-11-03 06:05:36,690:INFO:Set up data.
2024-11-03 06:05:36,693:INFO:Set up index.
2024-11-03 06:05:36,828:INFO:Initializing predict_model()
2024-11-03 06:05:36,828:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F0885E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:36,828:INFO:Checking exceptions
2024-11-03 06:05:36,828:INFO:Preloading libraries
2024-11-03 06:05:36,828:INFO:Set up data.
2024-11-03 06:05:36,833:INFO:Set up index.
2024-11-03 06:05:36,968:INFO:Initializing predict_model()
2024-11-03 06:05:36,969:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:36,969:INFO:Checking exceptions
2024-11-03 06:05:36,969:INFO:Preloading libraries
2024-11-03 06:05:36,969:INFO:Set up data.
2024-11-03 06:05:36,974:INFO:Set up index.
2024-11-03 06:05:37,111:INFO:Initializing predict_model()
2024-11-03 06:05:37,111:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:37,111:INFO:Checking exceptions
2024-11-03 06:05:37,111:INFO:Preloading libraries
2024-11-03 06:05:37,111:INFO:Set up data.
2024-11-03 06:05:37,115:INFO:Set up index.
2024-11-03 06:05:37,256:INFO:Initializing predict_model()
2024-11-03 06:05:37,256:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:37,256:INFO:Checking exceptions
2024-11-03 06:05:37,256:INFO:Preloading libraries
2024-11-03 06:05:37,257:INFO:Set up data.
2024-11-03 06:05:37,262:INFO:Set up index.
2024-11-03 06:05:37,439:INFO:Initializing predict_model()
2024-11-03 06:05:37,439:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:37,439:INFO:Checking exceptions
2024-11-03 06:05:37,439:INFO:Preloading libraries
2024-11-03 06:05:37,439:INFO:Set up data.
2024-11-03 06:05:37,444:INFO:Set up index.
2024-11-03 06:05:37,581:INFO:Initializing predict_model()
2024-11-03 06:05:37,581:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:37,581:INFO:Checking exceptions
2024-11-03 06:05:37,581:INFO:Preloading libraries
2024-11-03 06:05:37,581:INFO:Set up data.
2024-11-03 06:05:37,586:INFO:Set up index.
2024-11-03 06:05:37,748:INFO:Initializing predict_model()
2024-11-03 06:05:37,748:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:37,748:INFO:Checking exceptions
2024-11-03 06:05:37,749:INFO:Preloading libraries
2024-11-03 06:05:37,749:INFO:Set up data.
2024-11-03 06:05:37,753:INFO:Set up index.
2024-11-03 06:05:37,905:INFO:Initializing predict_model()
2024-11-03 06:05:37,905:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:37,906:INFO:Checking exceptions
2024-11-03 06:05:37,906:INFO:Preloading libraries
2024-11-03 06:05:37,906:INFO:Set up data.
2024-11-03 06:05:37,912:INFO:Set up index.
2024-11-03 06:05:38,060:INFO:Initializing predict_model()
2024-11-03 06:05:38,061:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699CD100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:38,061:INFO:Checking exceptions
2024-11-03 06:05:38,061:INFO:Preloading libraries
2024-11-03 06:05:38,061:INFO:Set up data.
2024-11-03 06:05:38,065:INFO:Set up index.
2024-11-03 06:05:38,195:INFO:Initializing predict_model()
2024-11-03 06:05:38,195:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:38,195:INFO:Checking exceptions
2024-11-03 06:05:38,195:INFO:Preloading libraries
2024-11-03 06:05:38,195:INFO:Set up data.
2024-11-03 06:05:38,199:INFO:Set up index.
2024-11-03 06:05:38,331:INFO:Initializing predict_model()
2024-11-03 06:05:38,332:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:38,332:INFO:Checking exceptions
2024-11-03 06:05:38,332:INFO:Preloading libraries
2024-11-03 06:05:38,332:INFO:Set up data.
2024-11-03 06:05:38,336:INFO:Set up index.
2024-11-03 06:05:38,479:INFO:Initializing predict_model()
2024-11-03 06:05:38,479:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F7699CD520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:38,479:INFO:Checking exceptions
2024-11-03 06:05:38,479:INFO:Preloading libraries
2024-11-03 06:05:38,480:INFO:Set up data.
2024-11-03 06:05:38,483:INFO:Set up index.
2024-11-03 06:05:38,629:INFO:Initializing predict_model()
2024-11-03 06:05:38,629:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F0885E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:38,629:INFO:Checking exceptions
2024-11-03 06:05:38,629:INFO:Preloading libraries
2024-11-03 06:05:38,629:INFO:Set up data.
2024-11-03 06:05:38,633:INFO:Set up index.
2024-11-03 06:05:38,772:INFO:Initializing predict_model()
2024-11-03 06:05:38,772:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:38,772:INFO:Checking exceptions
2024-11-03 06:05:38,772:INFO:Preloading libraries
2024-11-03 06:05:38,773:INFO:Set up data.
2024-11-03 06:05:38,776:INFO:Set up index.
2024-11-03 06:05:38,907:INFO:Initializing predict_model()
2024-11-03 06:05:38,907:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:38,907:INFO:Checking exceptions
2024-11-03 06:05:38,907:INFO:Preloading libraries
2024-11-03 06:05:38,907:INFO:Set up data.
2024-11-03 06:05:38,912:INFO:Set up index.
2024-11-03 06:05:39,042:INFO:Initializing predict_model()
2024-11-03 06:05:39,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F761A36D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F0D8430>)
2024-11-03 06:05:39,042:INFO:Checking exceptions
2024-11-03 06:05:39,042:INFO:Preloading libraries
2024-11-03 06:05:39,042:INFO:Set up data.
2024-11-03 06:05:39,047:INFO:Set up index.
2024-11-03 06:05:39,267:INFO:Initializing predict_model()
2024-11-03 06:05:39,267:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F0885E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76F091B80>)
2024-11-03 06:05:39,267:INFO:Checking exceptions
2024-11-03 06:05:39,267:INFO:Preloading libraries
2024-11-03 06:05:39,267:INFO:Set up data.
2024-11-03 06:05:39,272:INFO:Set up index.
2024-11-03 06:05:39,406:INFO:Initializing predict_model()
2024-11-03 06:05:39,407:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F769971EE0>)
2024-11-03 06:05:39,407:INFO:Checking exceptions
2024-11-03 06:05:39,407:INFO:Preloading libraries
2024-11-03 06:05:39,407:INFO:Set up data.
2024-11-03 06:05:39,412:INFO:Set up index.
2024-11-03 06:05:39,548:INFO:Initializing predict_model()
2024-11-03 06:05:39,548:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F76F088B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F76993EDC0>)
2024-11-03 06:05:39,548:INFO:Checking exceptions
2024-11-03 06:05:39,548:INFO:Preloading libraries
2024-11-03 06:05:39,549:INFO:Set up data.
2024-11-03 06:05:39,553:INFO:Set up index.
2024-11-03 06:06:32,152:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:06:32,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:06:32,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:06:32,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:06:33,243:INFO:Initializing load_model()
2024-11-03 06:06:33,243:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 06:06:33,527:INFO:Initializing predict_model()
2024-11-03 06:06:33,527:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E130D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:33,528:INFO:Checking exceptions
2024-11-03 06:06:33,528:INFO:Preloading libraries
2024-11-03 06:06:33,528:INFO:Set up data.
2024-11-03 06:06:33,532:INFO:Set up index.
2024-11-03 06:06:33,657:INFO:Initializing predict_model()
2024-11-03 06:06:33,657:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:33,658:INFO:Checking exceptions
2024-11-03 06:06:33,658:INFO:Preloading libraries
2024-11-03 06:06:33,658:INFO:Set up data.
2024-11-03 06:06:33,663:INFO:Set up index.
2024-11-03 06:06:33,802:INFO:Initializing predict_model()
2024-11-03 06:06:33,803:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9282EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1F70>)
2024-11-03 06:06:33,803:INFO:Checking exceptions
2024-11-03 06:06:33,803:INFO:Preloading libraries
2024-11-03 06:06:33,803:INFO:Set up data.
2024-11-03 06:06:33,807:INFO:Set up index.
2024-11-03 06:06:33,945:INFO:Initializing predict_model()
2024-11-03 06:06:33,945:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E12DAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:33,946:INFO:Checking exceptions
2024-11-03 06:06:33,946:INFO:Preloading libraries
2024-11-03 06:06:33,946:INFO:Set up data.
2024-11-03 06:06:33,949:INFO:Set up index.
2024-11-03 06:06:34,084:INFO:Initializing predict_model()
2024-11-03 06:06:34,084:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:34,085:INFO:Checking exceptions
2024-11-03 06:06:34,085:INFO:Preloading libraries
2024-11-03 06:06:34,085:INFO:Set up data.
2024-11-03 06:06:34,090:INFO:Set up index.
2024-11-03 06:06:34,224:INFO:Initializing predict_model()
2024-11-03 06:06:34,224:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8F70>)
2024-11-03 06:06:34,224:INFO:Checking exceptions
2024-11-03 06:06:34,224:INFO:Preloading libraries
2024-11-03 06:06:34,225:INFO:Set up data.
2024-11-03 06:06:34,231:INFO:Set up index.
2024-11-03 06:06:34,371:INFO:Initializing predict_model()
2024-11-03 06:06:34,371:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:34,371:INFO:Checking exceptions
2024-11-03 06:06:34,371:INFO:Preloading libraries
2024-11-03 06:06:34,371:INFO:Set up data.
2024-11-03 06:06:34,375:INFO:Set up index.
2024-11-03 06:06:34,506:INFO:Initializing predict_model()
2024-11-03 06:06:34,506:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8F70>)
2024-11-03 06:06:34,506:INFO:Checking exceptions
2024-11-03 06:06:34,506:INFO:Preloading libraries
2024-11-03 06:06:34,507:INFO:Set up data.
2024-11-03 06:06:34,513:INFO:Set up index.
2024-11-03 06:06:34,687:INFO:Initializing predict_model()
2024-11-03 06:06:34,687:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8430>)
2024-11-03 06:06:34,688:INFO:Checking exceptions
2024-11-03 06:06:34,688:INFO:Preloading libraries
2024-11-03 06:06:34,688:INFO:Set up data.
2024-11-03 06:06:34,693:INFO:Set up index.
2024-11-03 06:06:34,855:INFO:Initializing predict_model()
2024-11-03 06:06:34,855:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:34,855:INFO:Checking exceptions
2024-11-03 06:06:34,855:INFO:Preloading libraries
2024-11-03 06:06:34,855:INFO:Set up data.
2024-11-03 06:06:34,860:INFO:Set up index.
2024-11-03 06:06:34,986:INFO:Initializing predict_model()
2024-11-03 06:06:34,986:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1C10>)
2024-11-03 06:06:34,986:INFO:Checking exceptions
2024-11-03 06:06:34,986:INFO:Preloading libraries
2024-11-03 06:06:34,987:INFO:Set up data.
2024-11-03 06:06:34,991:INFO:Set up index.
2024-11-03 06:06:35,117:INFO:Initializing predict_model()
2024-11-03 06:06:35,117:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8430>)
2024-11-03 06:06:35,117:INFO:Checking exceptions
2024-11-03 06:06:35,117:INFO:Preloading libraries
2024-11-03 06:06:35,117:INFO:Set up data.
2024-11-03 06:06:35,123:INFO:Set up index.
2024-11-03 06:06:35,256:INFO:Initializing predict_model()
2024-11-03 06:06:35,256:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:35,256:INFO:Checking exceptions
2024-11-03 06:06:35,256:INFO:Preloading libraries
2024-11-03 06:06:35,257:INFO:Set up data.
2024-11-03 06:06:35,262:INFO:Set up index.
2024-11-03 06:06:35,397:INFO:Initializing predict_model()
2024-11-03 06:06:35,398:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E130D100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8430>)
2024-11-03 06:06:35,398:INFO:Checking exceptions
2024-11-03 06:06:35,398:INFO:Preloading libraries
2024-11-03 06:06:35,398:INFO:Set up data.
2024-11-03 06:06:35,403:INFO:Set up index.
2024-11-03 06:06:35,539:INFO:Initializing predict_model()
2024-11-03 06:06:35,539:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:35,540:INFO:Checking exceptions
2024-11-03 06:06:35,540:INFO:Preloading libraries
2024-11-03 06:06:35,540:INFO:Set up data.
2024-11-03 06:06:35,545:INFO:Set up index.
2024-11-03 06:06:35,677:INFO:Initializing predict_model()
2024-11-03 06:06:35,677:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8430>)
2024-11-03 06:06:35,677:INFO:Checking exceptions
2024-11-03 06:06:35,678:INFO:Preloading libraries
2024-11-03 06:06:35,678:INFO:Set up data.
2024-11-03 06:06:35,684:INFO:Set up index.
2024-11-03 06:06:35,814:INFO:Initializing predict_model()
2024-11-03 06:06:35,814:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E85E0>)
2024-11-03 06:06:35,815:INFO:Checking exceptions
2024-11-03 06:06:35,815:INFO:Preloading libraries
2024-11-03 06:06:35,815:INFO:Set up data.
2024-11-03 06:06:35,820:INFO:Set up index.
2024-11-03 06:06:35,961:INFO:Initializing predict_model()
2024-11-03 06:06:35,961:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:35,961:INFO:Checking exceptions
2024-11-03 06:06:35,961:INFO:Preloading libraries
2024-11-03 06:06:35,961:INFO:Set up data.
2024-11-03 06:06:35,965:INFO:Set up index.
2024-11-03 06:06:36,093:INFO:Initializing predict_model()
2024-11-03 06:06:36,093:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD040>)
2024-11-03 06:06:36,093:INFO:Checking exceptions
2024-11-03 06:06:36,093:INFO:Preloading libraries
2024-11-03 06:06:36,093:INFO:Set up data.
2024-11-03 06:06:36,097:INFO:Set up index.
2024-11-03 06:06:36,240:INFO:Initializing predict_model()
2024-11-03 06:06:36,240:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E85E0>)
2024-11-03 06:06:36,240:INFO:Checking exceptions
2024-11-03 06:06:36,240:INFO:Preloading libraries
2024-11-03 06:06:36,241:INFO:Set up data.
2024-11-03 06:06:36,245:INFO:Set up index.
2024-11-03 06:06:36,379:INFO:Initializing predict_model()
2024-11-03 06:06:36,379:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E89D0>)
2024-11-03 06:06:36,379:INFO:Checking exceptions
2024-11-03 06:06:36,379:INFO:Preloading libraries
2024-11-03 06:06:36,379:INFO:Set up data.
2024-11-03 06:06:36,383:INFO:Set up index.
2024-11-03 06:06:36,540:INFO:Initializing predict_model()
2024-11-03 06:06:36,540:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:36,540:INFO:Checking exceptions
2024-11-03 06:06:36,540:INFO:Preloading libraries
2024-11-03 06:06:36,541:INFO:Set up data.
2024-11-03 06:06:36,545:INFO:Set up index.
2024-11-03 06:06:36,671:INFO:Initializing predict_model()
2024-11-03 06:06:36,671:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD0D0>)
2024-11-03 06:06:36,671:INFO:Checking exceptions
2024-11-03 06:06:36,672:INFO:Preloading libraries
2024-11-03 06:06:36,672:INFO:Set up data.
2024-11-03 06:06:36,677:INFO:Set up index.
2024-11-03 06:06:36,861:INFO:Initializing predict_model()
2024-11-03 06:06:36,861:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1D30>)
2024-11-03 06:06:36,861:INFO:Checking exceptions
2024-11-03 06:06:36,861:INFO:Preloading libraries
2024-11-03 06:06:36,862:INFO:Set up data.
2024-11-03 06:06:36,866:INFO:Set up index.
2024-11-03 06:06:37,022:INFO:Initializing predict_model()
2024-11-03 06:06:37,022:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E89D0>)
2024-11-03 06:06:37,022:INFO:Checking exceptions
2024-11-03 06:06:37,022:INFO:Preloading libraries
2024-11-03 06:06:37,023:INFO:Set up data.
2024-11-03 06:06:37,029:INFO:Set up index.
2024-11-03 06:06:37,166:INFO:Initializing predict_model()
2024-11-03 06:06:37,166:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD160>)
2024-11-03 06:06:37,167:INFO:Checking exceptions
2024-11-03 06:06:37,167:INFO:Preloading libraries
2024-11-03 06:06:37,167:INFO:Set up data.
2024-11-03 06:06:37,171:INFO:Set up index.
2024-11-03 06:06:37,305:INFO:Initializing predict_model()
2024-11-03 06:06:37,305:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:37,305:INFO:Checking exceptions
2024-11-03 06:06:37,305:INFO:Preloading libraries
2024-11-03 06:06:37,306:INFO:Set up data.
2024-11-03 06:06:37,311:INFO:Set up index.
2024-11-03 06:06:37,448:INFO:Initializing predict_model()
2024-11-03 06:06:37,449:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD160>)
2024-11-03 06:06:37,449:INFO:Checking exceptions
2024-11-03 06:06:37,449:INFO:Preloading libraries
2024-11-03 06:06:37,449:INFO:Set up data.
2024-11-03 06:06:37,454:INFO:Set up index.
2024-11-03 06:06:37,646:INFO:Initializing predict_model()
2024-11-03 06:06:37,646:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:37,646:INFO:Checking exceptions
2024-11-03 06:06:37,646:INFO:Preloading libraries
2024-11-03 06:06:37,647:INFO:Set up data.
2024-11-03 06:06:37,656:INFO:Set up index.
2024-11-03 06:06:37,859:INFO:Initializing predict_model()
2024-11-03 06:06:37,859:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD160>)
2024-11-03 06:06:37,859:INFO:Checking exceptions
2024-11-03 06:06:37,859:INFO:Preloading libraries
2024-11-03 06:06:37,860:INFO:Set up data.
2024-11-03 06:06:37,864:INFO:Set up index.
2024-11-03 06:06:38,059:INFO:Initializing predict_model()
2024-11-03 06:06:38,059:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:38,059:INFO:Checking exceptions
2024-11-03 06:06:38,059:INFO:Preloading libraries
2024-11-03 06:06:38,059:INFO:Set up data.
2024-11-03 06:06:38,065:INFO:Set up index.
2024-11-03 06:06:38,207:INFO:Initializing predict_model()
2024-11-03 06:06:38,207:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:38,208:INFO:Checking exceptions
2024-11-03 06:06:38,208:INFO:Preloading libraries
2024-11-03 06:06:38,208:INFO:Set up data.
2024-11-03 06:06:38,212:INFO:Set up index.
2024-11-03 06:06:38,346:INFO:Initializing predict_model()
2024-11-03 06:06:38,347:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD160>)
2024-11-03 06:06:38,347:INFO:Checking exceptions
2024-11-03 06:06:38,347:INFO:Preloading libraries
2024-11-03 06:06:38,347:INFO:Set up data.
2024-11-03 06:06:38,351:INFO:Set up index.
2024-11-03 06:06:38,489:INFO:Initializing predict_model()
2024-11-03 06:06:38,489:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:38,489:INFO:Checking exceptions
2024-11-03 06:06:38,489:INFO:Preloading libraries
2024-11-03 06:06:38,490:INFO:Set up data.
2024-11-03 06:06:38,506:INFO:Set up index.
2024-11-03 06:06:38,868:INFO:Initializing predict_model()
2024-11-03 06:06:38,869:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:38,870:INFO:Checking exceptions
2024-11-03 06:06:38,870:INFO:Preloading libraries
2024-11-03 06:06:38,871:INFO:Set up data.
2024-11-03 06:06:38,886:INFO:Set up index.
2024-11-03 06:06:39,046:INFO:Initializing predict_model()
2024-11-03 06:06:39,046:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04F70>)
2024-11-03 06:06:39,047:INFO:Checking exceptions
2024-11-03 06:06:39,047:INFO:Preloading libraries
2024-11-03 06:06:39,047:INFO:Set up data.
2024-11-03 06:06:39,051:INFO:Set up index.
2024-11-03 06:06:39,197:INFO:Initializing predict_model()
2024-11-03 06:06:39,197:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04AF0>)
2024-11-03 06:06:39,198:INFO:Checking exceptions
2024-11-03 06:06:39,198:INFO:Preloading libraries
2024-11-03 06:06:39,198:INFO:Set up data.
2024-11-03 06:06:39,202:INFO:Set up index.
2024-11-03 06:06:39,332:INFO:Initializing predict_model()
2024-11-03 06:06:39,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1EE0>)
2024-11-03 06:06:39,333:INFO:Checking exceptions
2024-11-03 06:06:39,333:INFO:Preloading libraries
2024-11-03 06:06:39,333:INFO:Set up data.
2024-11-03 06:06:39,337:INFO:Set up index.
2024-11-03 06:06:39,474:INFO:Initializing predict_model()
2024-11-03 06:06:39,474:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:39,474:INFO:Checking exceptions
2024-11-03 06:06:39,475:INFO:Preloading libraries
2024-11-03 06:06:39,475:INFO:Set up data.
2024-11-03 06:06:39,480:INFO:Set up index.
2024-11-03 06:06:39,621:INFO:Initializing predict_model()
2024-11-03 06:06:39,621:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD160>)
2024-11-03 06:06:39,621:INFO:Checking exceptions
2024-11-03 06:06:39,621:INFO:Preloading libraries
2024-11-03 06:06:39,622:INFO:Set up data.
2024-11-03 06:06:39,627:INFO:Set up index.
2024-11-03 06:06:39,769:INFO:Initializing predict_model()
2024-11-03 06:06:39,769:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:39,769:INFO:Checking exceptions
2024-11-03 06:06:39,769:INFO:Preloading libraries
2024-11-03 06:06:39,769:INFO:Set up data.
2024-11-03 06:06:39,773:INFO:Set up index.
2024-11-03 06:06:39,915:INFO:Initializing predict_model()
2024-11-03 06:06:39,915:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04AF0>)
2024-11-03 06:06:39,915:INFO:Checking exceptions
2024-11-03 06:06:39,915:INFO:Preloading libraries
2024-11-03 06:06:39,915:INFO:Set up data.
2024-11-03 06:06:39,919:INFO:Set up index.
2024-11-03 06:06:40,055:INFO:Initializing predict_model()
2024-11-03 06:06:40,056:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:40,056:INFO:Checking exceptions
2024-11-03 06:06:40,056:INFO:Preloading libraries
2024-11-03 06:06:40,056:INFO:Set up data.
2024-11-03 06:06:40,061:INFO:Set up index.
2024-11-03 06:06:40,190:INFO:Initializing predict_model()
2024-11-03 06:06:40,190:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04AF0>)
2024-11-03 06:06:40,190:INFO:Checking exceptions
2024-11-03 06:06:40,191:INFO:Preloading libraries
2024-11-03 06:06:40,191:INFO:Set up data.
2024-11-03 06:06:40,194:INFO:Set up index.
2024-11-03 06:06:40,328:INFO:Initializing predict_model()
2024-11-03 06:06:40,328:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:40,328:INFO:Checking exceptions
2024-11-03 06:06:40,328:INFO:Preloading libraries
2024-11-03 06:06:40,329:INFO:Set up data.
2024-11-03 06:06:40,333:INFO:Set up index.
2024-11-03 06:06:40,472:INFO:Initializing predict_model()
2024-11-03 06:06:40,472:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04AF0>)
2024-11-03 06:06:40,472:INFO:Checking exceptions
2024-11-03 06:06:40,472:INFO:Preloading libraries
2024-11-03 06:06:40,473:INFO:Set up data.
2024-11-03 06:06:40,477:INFO:Set up index.
2024-11-03 06:06:40,621:INFO:Initializing predict_model()
2024-11-03 06:06:40,621:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:40,622:INFO:Checking exceptions
2024-11-03 06:06:40,622:INFO:Preloading libraries
2024-11-03 06:06:40,622:INFO:Set up data.
2024-11-03 06:06:40,627:INFO:Set up index.
2024-11-03 06:06:40,901:INFO:Initializing predict_model()
2024-11-03 06:06:40,901:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04AF0>)
2024-11-03 06:06:40,902:INFO:Checking exceptions
2024-11-03 06:06:40,902:INFO:Preloading libraries
2024-11-03 06:06:40,902:INFO:Set up data.
2024-11-03 06:06:40,908:INFO:Set up index.
2024-11-03 06:06:41,049:INFO:Initializing predict_model()
2024-11-03 06:06:41,049:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:41,049:INFO:Checking exceptions
2024-11-03 06:06:41,049:INFO:Preloading libraries
2024-11-03 06:06:41,049:INFO:Set up data.
2024-11-03 06:06:41,055:INFO:Set up index.
2024-11-03 06:06:41,203:INFO:Initializing predict_model()
2024-11-03 06:06:41,203:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:41,203:INFO:Checking exceptions
2024-11-03 06:06:41,203:INFO:Preloading libraries
2024-11-03 06:06:41,204:INFO:Set up data.
2024-11-03 06:06:41,208:INFO:Set up index.
2024-11-03 06:06:41,351:INFO:Initializing predict_model()
2024-11-03 06:06:41,351:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:41,351:INFO:Checking exceptions
2024-11-03 06:06:41,351:INFO:Preloading libraries
2024-11-03 06:06:41,351:INFO:Set up data.
2024-11-03 06:06:41,356:INFO:Set up index.
2024-11-03 06:06:41,486:INFO:Initializing predict_model()
2024-11-03 06:06:41,486:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:41,487:INFO:Checking exceptions
2024-11-03 06:06:41,487:INFO:Preloading libraries
2024-11-03 06:06:41,487:INFO:Set up data.
2024-11-03 06:06:41,492:INFO:Set up index.
2024-11-03 06:06:41,626:INFO:Initializing predict_model()
2024-11-03 06:06:41,627:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:41,627:INFO:Checking exceptions
2024-11-03 06:06:41,627:INFO:Preloading libraries
2024-11-03 06:06:41,627:INFO:Set up data.
2024-11-03 06:06:41,631:INFO:Set up index.
2024-11-03 06:06:41,770:INFO:Initializing predict_model()
2024-11-03 06:06:41,770:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:41,770:INFO:Checking exceptions
2024-11-03 06:06:41,770:INFO:Preloading libraries
2024-11-03 06:06:41,770:INFO:Set up data.
2024-11-03 06:06:41,777:INFO:Set up index.
2024-11-03 06:06:41,923:INFO:Initializing predict_model()
2024-11-03 06:06:41,923:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:41,923:INFO:Checking exceptions
2024-11-03 06:06:41,923:INFO:Preloading libraries
2024-11-03 06:06:41,924:INFO:Set up data.
2024-11-03 06:06:41,929:INFO:Set up index.
2024-11-03 06:06:42,077:INFO:Initializing predict_model()
2024-11-03 06:06:42,078:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:42,078:INFO:Checking exceptions
2024-11-03 06:06:42,078:INFO:Preloading libraries
2024-11-03 06:06:42,078:INFO:Set up data.
2024-11-03 06:06:42,085:INFO:Set up index.
2024-11-03 06:06:42,224:INFO:Initializing predict_model()
2024-11-03 06:06:42,224:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:42,225:INFO:Checking exceptions
2024-11-03 06:06:42,225:INFO:Preloading libraries
2024-11-03 06:06:42,225:INFO:Set up data.
2024-11-03 06:06:42,230:INFO:Set up index.
2024-11-03 06:06:42,378:INFO:Initializing predict_model()
2024-11-03 06:06:42,378:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E130D970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:42,378:INFO:Checking exceptions
2024-11-03 06:06:42,378:INFO:Preloading libraries
2024-11-03 06:06:42,378:INFO:Set up data.
2024-11-03 06:06:42,383:INFO:Set up index.
2024-11-03 06:06:42,516:INFO:Initializing predict_model()
2024-11-03 06:06:42,516:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:42,516:INFO:Checking exceptions
2024-11-03 06:06:42,516:INFO:Preloading libraries
2024-11-03 06:06:42,516:INFO:Set up data.
2024-11-03 06:06:42,521:INFO:Set up index.
2024-11-03 06:06:42,654:INFO:Initializing predict_model()
2024-11-03 06:06:42,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:42,654:INFO:Checking exceptions
2024-11-03 06:06:42,654:INFO:Preloading libraries
2024-11-03 06:06:42,654:INFO:Set up data.
2024-11-03 06:06:42,660:INFO:Set up index.
2024-11-03 06:06:42,807:INFO:Initializing predict_model()
2024-11-03 06:06:42,807:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1DC0>)
2024-11-03 06:06:42,808:INFO:Checking exceptions
2024-11-03 06:06:42,808:INFO:Preloading libraries
2024-11-03 06:06:42,808:INFO:Set up data.
2024-11-03 06:06:42,812:INFO:Set up index.
2024-11-03 06:06:42,943:INFO:Initializing predict_model()
2024-11-03 06:06:42,943:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:42,943:INFO:Checking exceptions
2024-11-03 06:06:42,943:INFO:Preloading libraries
2024-11-03 06:06:42,944:INFO:Set up data.
2024-11-03 06:06:42,947:INFO:Set up index.
2024-11-03 06:06:43,093:INFO:Initializing predict_model()
2024-11-03 06:06:43,094:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:43,094:INFO:Checking exceptions
2024-11-03 06:06:43,094:INFO:Preloading libraries
2024-11-03 06:06:43,095:INFO:Set up data.
2024-11-03 06:06:43,100:INFO:Set up index.
2024-11-03 06:06:43,237:INFO:Initializing predict_model()
2024-11-03 06:06:43,237:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:43,238:INFO:Checking exceptions
2024-11-03 06:06:43,238:INFO:Preloading libraries
2024-11-03 06:06:43,238:INFO:Set up data.
2024-11-03 06:06:43,242:INFO:Set up index.
2024-11-03 06:06:43,397:INFO:Initializing predict_model()
2024-11-03 06:06:43,398:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:43,398:INFO:Checking exceptions
2024-11-03 06:06:43,398:INFO:Preloading libraries
2024-11-03 06:06:43,398:INFO:Set up data.
2024-11-03 06:06:43,404:INFO:Set up index.
2024-11-03 06:06:43,555:INFO:Initializing predict_model()
2024-11-03 06:06:43,555:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:43,555:INFO:Checking exceptions
2024-11-03 06:06:43,555:INFO:Preloading libraries
2024-11-03 06:06:43,555:INFO:Set up data.
2024-11-03 06:06:43,561:INFO:Set up index.
2024-11-03 06:06:43,702:INFO:Initializing predict_model()
2024-11-03 06:06:43,703:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:43,703:INFO:Checking exceptions
2024-11-03 06:06:43,703:INFO:Preloading libraries
2024-11-03 06:06:43,703:INFO:Set up data.
2024-11-03 06:06:43,708:INFO:Set up index.
2024-11-03 06:06:43,855:INFO:Initializing predict_model()
2024-11-03 06:06:43,855:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:43,855:INFO:Checking exceptions
2024-11-03 06:06:43,855:INFO:Preloading libraries
2024-11-03 06:06:43,856:INFO:Set up data.
2024-11-03 06:06:43,860:INFO:Set up index.
2024-11-03 06:06:44,016:INFO:Initializing predict_model()
2024-11-03 06:06:44,016:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:44,016:INFO:Checking exceptions
2024-11-03 06:06:44,016:INFO:Preloading libraries
2024-11-03 06:06:44,016:INFO:Set up data.
2024-11-03 06:06:44,020:INFO:Set up index.
2024-11-03 06:06:44,170:INFO:Initializing predict_model()
2024-11-03 06:06:44,170:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:44,170:INFO:Checking exceptions
2024-11-03 06:06:44,170:INFO:Preloading libraries
2024-11-03 06:06:44,171:INFO:Set up data.
2024-11-03 06:06:44,176:INFO:Set up index.
2024-11-03 06:06:44,306:INFO:Initializing predict_model()
2024-11-03 06:06:44,306:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD310>)
2024-11-03 06:06:44,306:INFO:Checking exceptions
2024-11-03 06:06:44,306:INFO:Preloading libraries
2024-11-03 06:06:44,307:INFO:Set up data.
2024-11-03 06:06:44,311:INFO:Set up index.
2024-11-03 06:06:44,445:INFO:Initializing predict_model()
2024-11-03 06:06:44,445:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:44,445:INFO:Checking exceptions
2024-11-03 06:06:44,445:INFO:Preloading libraries
2024-11-03 06:06:44,445:INFO:Set up data.
2024-11-03 06:06:44,449:INFO:Set up index.
2024-11-03 06:06:44,581:INFO:Initializing predict_model()
2024-11-03 06:06:44,581:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69CD310>)
2024-11-03 06:06:44,581:INFO:Checking exceptions
2024-11-03 06:06:44,581:INFO:Preloading libraries
2024-11-03 06:06:44,581:INFO:Set up data.
2024-11-03 06:06:44,585:INFO:Set up index.
2024-11-03 06:06:44,756:INFO:Initializing predict_model()
2024-11-03 06:06:44,756:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69C1B80>)
2024-11-03 06:06:44,756:INFO:Checking exceptions
2024-11-03 06:06:44,756:INFO:Preloading libraries
2024-11-03 06:06:44,756:INFO:Set up data.
2024-11-03 06:06:44,764:INFO:Set up index.
2024-11-03 06:06:45,003:INFO:Initializing predict_model()
2024-11-03 06:06:45,003:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:45,003:INFO:Checking exceptions
2024-11-03 06:06:45,004:INFO:Preloading libraries
2024-11-03 06:06:45,004:INFO:Set up data.
2024-11-03 06:06:45,008:INFO:Set up index.
2024-11-03 06:06:45,140:INFO:Initializing predict_model()
2024-11-03 06:06:45,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E69E8C10>)
2024-11-03 06:06:45,140:INFO:Checking exceptions
2024-11-03 06:06:45,140:INFO:Preloading libraries
2024-11-03 06:06:45,142:INFO:Set up data.
2024-11-03 06:06:45,146:INFO:Set up index.
2024-11-03 06:06:45,292:INFO:Initializing predict_model()
2024-11-03 06:06:45,292:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:45,292:INFO:Checking exceptions
2024-11-03 06:06:45,292:INFO:Preloading libraries
2024-11-03 06:06:45,293:INFO:Set up data.
2024-11-03 06:06:45,297:INFO:Set up index.
2024-11-03 06:06:45,438:INFO:Initializing predict_model()
2024-11-03 06:06:45,438:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:45,438:INFO:Checking exceptions
2024-11-03 06:06:45,439:INFO:Preloading libraries
2024-11-03 06:06:45,439:INFO:Set up data.
2024-11-03 06:06:45,444:INFO:Set up index.
2024-11-03 06:06:45,586:INFO:Initializing predict_model()
2024-11-03 06:06:45,586:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:45,586:INFO:Checking exceptions
2024-11-03 06:06:45,586:INFO:Preloading libraries
2024-11-03 06:06:45,587:INFO:Set up data.
2024-11-03 06:06:45,591:INFO:Set up index.
2024-11-03 06:06:45,741:INFO:Initializing predict_model()
2024-11-03 06:06:45,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:45,742:INFO:Checking exceptions
2024-11-03 06:06:45,742:INFO:Preloading libraries
2024-11-03 06:06:45,742:INFO:Set up data.
2024-11-03 06:06:45,746:INFO:Set up index.
2024-11-03 06:06:45,893:INFO:Initializing predict_model()
2024-11-03 06:06:45,893:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1E50>)
2024-11-03 06:06:45,893:INFO:Checking exceptions
2024-11-03 06:06:45,893:INFO:Preloading libraries
2024-11-03 06:06:45,893:INFO:Set up data.
2024-11-03 06:06:45,898:INFO:Set up index.
2024-11-03 06:06:46,029:INFO:Initializing predict_model()
2024-11-03 06:06:46,030:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:46,030:INFO:Checking exceptions
2024-11-03 06:06:46,030:INFO:Preloading libraries
2024-11-03 06:06:46,030:INFO:Set up data.
2024-11-03 06:06:46,035:INFO:Set up index.
2024-11-03 06:06:46,277:INFO:Initializing predict_model()
2024-11-03 06:06:46,277:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:46,277:INFO:Checking exceptions
2024-11-03 06:06:46,277:INFO:Preloading libraries
2024-11-03 06:06:46,277:INFO:Set up data.
2024-11-03 06:06:46,282:INFO:Set up index.
2024-11-03 06:06:46,422:INFO:Initializing predict_model()
2024-11-03 06:06:46,422:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:46,422:INFO:Checking exceptions
2024-11-03 06:06:46,422:INFO:Preloading libraries
2024-11-03 06:06:46,422:INFO:Set up data.
2024-11-03 06:06:46,426:INFO:Set up index.
2024-11-03 06:06:46,572:INFO:Initializing predict_model()
2024-11-03 06:06:46,572:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:46,572:INFO:Checking exceptions
2024-11-03 06:06:46,572:INFO:Preloading libraries
2024-11-03 06:06:46,572:INFO:Set up data.
2024-11-03 06:06:46,578:INFO:Set up index.
2024-11-03 06:06:46,725:INFO:Initializing predict_model()
2024-11-03 06:06:46,725:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1EE0>)
2024-11-03 06:06:46,725:INFO:Checking exceptions
2024-11-03 06:06:46,725:INFO:Preloading libraries
2024-11-03 06:06:46,726:INFO:Set up data.
2024-11-03 06:06:46,730:INFO:Set up index.
2024-11-03 06:06:46,861:INFO:Initializing predict_model()
2024-11-03 06:06:46,861:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B18B0>)
2024-11-03 06:06:46,861:INFO:Checking exceptions
2024-11-03 06:06:46,861:INFO:Preloading libraries
2024-11-03 06:06:46,861:INFO:Set up data.
2024-11-03 06:06:46,865:INFO:Set up index.
2024-11-03 06:06:47,001:INFO:Initializing predict_model()
2024-11-03 06:06:47,001:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:47,002:INFO:Checking exceptions
2024-11-03 06:06:47,002:INFO:Preloading libraries
2024-11-03 06:06:47,002:INFO:Set up data.
2024-11-03 06:06:47,007:INFO:Set up index.
2024-11-03 06:06:47,155:INFO:Initializing predict_model()
2024-11-03 06:06:47,155:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:47,155:INFO:Checking exceptions
2024-11-03 06:06:47,155:INFO:Preloading libraries
2024-11-03 06:06:47,156:INFO:Set up data.
2024-11-03 06:06:47,160:INFO:Set up index.
2024-11-03 06:06:47,309:INFO:Initializing predict_model()
2024-11-03 06:06:47,309:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:47,309:INFO:Checking exceptions
2024-11-03 06:06:47,309:INFO:Preloading libraries
2024-11-03 06:06:47,310:INFO:Set up data.
2024-11-03 06:06:47,314:INFO:Set up index.
2024-11-03 06:06:47,450:INFO:Initializing predict_model()
2024-11-03 06:06:47,450:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1B80>)
2024-11-03 06:06:47,450:INFO:Checking exceptions
2024-11-03 06:06:47,450:INFO:Preloading libraries
2024-11-03 06:06:47,450:INFO:Set up data.
2024-11-03 06:06:47,455:INFO:Set up index.
2024-11-03 06:06:47,586:INFO:Initializing predict_model()
2024-11-03 06:06:47,586:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:47,586:INFO:Checking exceptions
2024-11-03 06:06:47,586:INFO:Preloading libraries
2024-11-03 06:06:47,586:INFO:Set up data.
2024-11-03 06:06:47,590:INFO:Set up index.
2024-11-03 06:06:47,729:INFO:Initializing predict_model()
2024-11-03 06:06:47,729:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EDC0>)
2024-11-03 06:06:47,729:INFO:Checking exceptions
2024-11-03 06:06:47,729:INFO:Preloading libraries
2024-11-03 06:06:47,730:INFO:Set up data.
2024-11-03 06:06:47,735:INFO:Set up index.
2024-11-03 06:06:47,879:INFO:Initializing predict_model()
2024-11-03 06:06:47,879:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:47,880:INFO:Checking exceptions
2024-11-03 06:06:47,880:INFO:Preloading libraries
2024-11-03 06:06:47,880:INFO:Set up data.
2024-11-03 06:06:47,884:INFO:Set up index.
2024-11-03 06:06:48,034:INFO:Initializing predict_model()
2024-11-03 06:06:48,034:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EDC0>)
2024-11-03 06:06:48,034:INFO:Checking exceptions
2024-11-03 06:06:48,034:INFO:Preloading libraries
2024-11-03 06:06:48,034:INFO:Set up data.
2024-11-03 06:06:48,038:INFO:Set up index.
2024-11-03 06:06:48,177:INFO:Initializing predict_model()
2024-11-03 06:06:48,177:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1AF0>)
2024-11-03 06:06:48,177:INFO:Checking exceptions
2024-11-03 06:06:48,177:INFO:Preloading libraries
2024-11-03 06:06:48,177:INFO:Set up data.
2024-11-03 06:06:48,182:INFO:Set up index.
2024-11-03 06:06:48,317:INFO:Initializing predict_model()
2024-11-03 06:06:48,318:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1C10>)
2024-11-03 06:06:48,318:INFO:Checking exceptions
2024-11-03 06:06:48,318:INFO:Preloading libraries
2024-11-03 06:06:48,318:INFO:Set up data.
2024-11-03 06:06:48,324:INFO:Set up index.
2024-11-03 06:06:48,469:INFO:Initializing predict_model()
2024-11-03 06:06:48,469:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:48,470:INFO:Checking exceptions
2024-11-03 06:06:48,470:INFO:Preloading libraries
2024-11-03 06:06:48,470:INFO:Set up data.
2024-11-03 06:06:48,475:INFO:Set up index.
2024-11-03 06:06:48,614:INFO:Initializing predict_model()
2024-11-03 06:06:48,614:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:48,614:INFO:Checking exceptions
2024-11-03 06:06:48,614:INFO:Preloading libraries
2024-11-03 06:06:48,614:INFO:Set up data.
2024-11-03 06:06:48,618:INFO:Set up index.
2024-11-03 06:06:48,868:INFO:Initializing predict_model()
2024-11-03 06:06:48,868:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:48,868:INFO:Checking exceptions
2024-11-03 06:06:48,868:INFO:Preloading libraries
2024-11-03 06:06:48,868:INFO:Set up data.
2024-11-03 06:06:48,875:INFO:Set up index.
2024-11-03 06:06:49,079:INFO:Initializing predict_model()
2024-11-03 06:06:49,079:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:49,079:INFO:Checking exceptions
2024-11-03 06:06:49,079:INFO:Preloading libraries
2024-11-03 06:06:49,079:INFO:Set up data.
2024-11-03 06:06:49,086:INFO:Set up index.
2024-11-03 06:06:49,232:INFO:Initializing predict_model()
2024-11-03 06:06:49,232:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:49,232:INFO:Checking exceptions
2024-11-03 06:06:49,232:INFO:Preloading libraries
2024-11-03 06:06:49,232:INFO:Set up data.
2024-11-03 06:06:49,237:INFO:Set up index.
2024-11-03 06:06:49,386:INFO:Initializing predict_model()
2024-11-03 06:06:49,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:49,386:INFO:Checking exceptions
2024-11-03 06:06:49,386:INFO:Preloading libraries
2024-11-03 06:06:49,387:INFO:Set up data.
2024-11-03 06:06:49,394:INFO:Set up index.
2024-11-03 06:06:49,532:INFO:Initializing predict_model()
2024-11-03 06:06:49,533:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:49,533:INFO:Checking exceptions
2024-11-03 06:06:49,533:INFO:Preloading libraries
2024-11-03 06:06:49,533:INFO:Set up data.
2024-11-03 06:06:49,538:INFO:Set up index.
2024-11-03 06:06:49,687:INFO:Initializing predict_model()
2024-11-03 06:06:49,687:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:49,687:INFO:Checking exceptions
2024-11-03 06:06:49,687:INFO:Preloading libraries
2024-11-03 06:06:49,688:INFO:Set up data.
2024-11-03 06:06:49,692:INFO:Set up index.
2024-11-03 06:06:49,839:INFO:Initializing predict_model()
2024-11-03 06:06:49,839:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:49,839:INFO:Checking exceptions
2024-11-03 06:06:49,839:INFO:Preloading libraries
2024-11-03 06:06:49,839:INFO:Set up data.
2024-11-03 06:06:49,844:INFO:Set up index.
2024-11-03 06:06:50,000:INFO:Initializing predict_model()
2024-11-03 06:06:50,001:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E12F2250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:50,001:INFO:Checking exceptions
2024-11-03 06:06:50,001:INFO:Preloading libraries
2024-11-03 06:06:50,001:INFO:Set up data.
2024-11-03 06:06:50,006:INFO:Set up index.
2024-11-03 06:06:50,160:INFO:Initializing predict_model()
2024-11-03 06:06:50,161:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:50,161:INFO:Checking exceptions
2024-11-03 06:06:50,161:INFO:Preloading libraries
2024-11-03 06:06:50,161:INFO:Set up data.
2024-11-03 06:06:50,166:INFO:Set up index.
2024-11-03 06:06:50,302:INFO:Initializing predict_model()
2024-11-03 06:06:50,302:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04670>)
2024-11-03 06:06:50,302:INFO:Checking exceptions
2024-11-03 06:06:50,302:INFO:Preloading libraries
2024-11-03 06:06:50,303:INFO:Set up data.
2024-11-03 06:06:50,307:INFO:Set up index.
2024-11-03 06:06:50,441:INFO:Initializing predict_model()
2024-11-03 06:06:50,442:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:50,442:INFO:Checking exceptions
2024-11-03 06:06:50,442:INFO:Preloading libraries
2024-11-03 06:06:50,443:INFO:Set up data.
2024-11-03 06:06:50,446:INFO:Set up index.
2024-11-03 06:06:50,595:INFO:Initializing predict_model()
2024-11-03 06:06:50,596:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:50,596:INFO:Checking exceptions
2024-11-03 06:06:50,596:INFO:Preloading libraries
2024-11-03 06:06:50,597:INFO:Set up data.
2024-11-03 06:06:50,600:INFO:Set up index.
2024-11-03 06:06:50,750:INFO:Initializing predict_model()
2024-11-03 06:06:50,751:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:50,751:INFO:Checking exceptions
2024-11-03 06:06:50,751:INFO:Preloading libraries
2024-11-03 06:06:50,751:INFO:Set up data.
2024-11-03 06:06:50,757:INFO:Set up index.
2024-11-03 06:06:50,887:INFO:Initializing predict_model()
2024-11-03 06:06:50,887:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:50,887:INFO:Checking exceptions
2024-11-03 06:06:50,887:INFO:Preloading libraries
2024-11-03 06:06:50,887:INFO:Set up data.
2024-11-03 06:06:50,893:INFO:Set up index.
2024-11-03 06:06:51,035:INFO:Initializing predict_model()
2024-11-03 06:06:51,036:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:51,036:INFO:Checking exceptions
2024-11-03 06:06:51,036:INFO:Preloading libraries
2024-11-03 06:06:51,037:INFO:Set up data.
2024-11-03 06:06:51,044:INFO:Set up index.
2024-11-03 06:06:51,183:INFO:Initializing predict_model()
2024-11-03 06:06:51,183:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EF70>)
2024-11-03 06:06:51,183:INFO:Checking exceptions
2024-11-03 06:06:51,183:INFO:Preloading libraries
2024-11-03 06:06:51,183:INFO:Set up data.
2024-11-03 06:06:51,189:INFO:Set up index.
2024-11-03 06:06:51,333:INFO:Initializing predict_model()
2024-11-03 06:06:51,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:51,333:INFO:Checking exceptions
2024-11-03 06:06:51,333:INFO:Preloading libraries
2024-11-03 06:06:51,334:INFO:Set up data.
2024-11-03 06:06:51,338:INFO:Set up index.
2024-11-03 06:06:51,471:INFO:Initializing predict_model()
2024-11-03 06:06:51,471:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E12B1F70>)
2024-11-03 06:06:51,471:INFO:Checking exceptions
2024-11-03 06:06:51,471:INFO:Preloading libraries
2024-11-03 06:06:51,471:INFO:Set up data.
2024-11-03 06:06:51,476:INFO:Set up index.
2024-11-03 06:06:51,609:INFO:Initializing predict_model()
2024-11-03 06:06:51,609:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:51,609:INFO:Checking exceptions
2024-11-03 06:06:51,609:INFO:Preloading libraries
2024-11-03 06:06:51,609:INFO:Set up data.
2024-11-03 06:06:51,613:INFO:Set up index.
2024-11-03 06:06:51,755:INFO:Initializing predict_model()
2024-11-03 06:06:51,755:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:51,755:INFO:Checking exceptions
2024-11-03 06:06:51,755:INFO:Preloading libraries
2024-11-03 06:06:51,756:INFO:Set up data.
2024-11-03 06:06:51,763:INFO:Set up index.
2024-11-03 06:06:51,915:INFO:Initializing predict_model()
2024-11-03 06:06:51,916:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:51,916:INFO:Checking exceptions
2024-11-03 06:06:51,916:INFO:Preloading libraries
2024-11-03 06:06:51,917:INFO:Set up data.
2024-11-03 06:06:51,922:INFO:Set up index.
2024-11-03 06:06:52,096:INFO:Initializing predict_model()
2024-11-03 06:06:52,097:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:52,097:INFO:Checking exceptions
2024-11-03 06:06:52,097:INFO:Preloading libraries
2024-11-03 06:06:52,097:INFO:Set up data.
2024-11-03 06:06:52,102:INFO:Set up index.
2024-11-03 06:06:52,264:INFO:Initializing predict_model()
2024-11-03 06:06:52,264:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:52,266:INFO:Checking exceptions
2024-11-03 06:06:52,266:INFO:Preloading libraries
2024-11-03 06:06:52,267:INFO:Set up data.
2024-11-03 06:06:52,271:INFO:Set up index.
2024-11-03 06:06:52,456:INFO:Initializing predict_model()
2024-11-03 06:06:52,456:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:52,456:INFO:Checking exceptions
2024-11-03 06:06:52,456:INFO:Preloading libraries
2024-11-03 06:06:52,456:INFO:Set up data.
2024-11-03 06:06:52,461:INFO:Set up index.
2024-11-03 06:06:52,633:INFO:Initializing predict_model()
2024-11-03 06:06:52,633:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:52,633:INFO:Checking exceptions
2024-11-03 06:06:52,633:INFO:Preloading libraries
2024-11-03 06:06:52,635:INFO:Set up data.
2024-11-03 06:06:52,640:INFO:Set up index.
2024-11-03 06:06:52,785:INFO:Initializing predict_model()
2024-11-03 06:06:52,785:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:52,785:INFO:Checking exceptions
2024-11-03 06:06:52,785:INFO:Preloading libraries
2024-11-03 06:06:52,785:INFO:Set up data.
2024-11-03 06:06:52,791:INFO:Set up index.
2024-11-03 06:06:53,004:INFO:Initializing predict_model()
2024-11-03 06:06:53,005:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:53,005:INFO:Checking exceptions
2024-11-03 06:06:53,005:INFO:Preloading libraries
2024-11-03 06:06:53,006:INFO:Set up data.
2024-11-03 06:06:53,010:INFO:Set up index.
2024-11-03 06:06:53,176:INFO:Initializing predict_model()
2024-11-03 06:06:53,176:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:53,176:INFO:Checking exceptions
2024-11-03 06:06:53,176:INFO:Preloading libraries
2024-11-03 06:06:53,176:INFO:Set up data.
2024-11-03 06:06:53,180:INFO:Set up index.
2024-11-03 06:06:53,319:INFO:Initializing predict_model()
2024-11-03 06:06:53,320:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:53,320:INFO:Checking exceptions
2024-11-03 06:06:53,320:INFO:Preloading libraries
2024-11-03 06:06:53,320:INFO:Set up data.
2024-11-03 06:06:53,327:INFO:Set up index.
2024-11-03 06:06:53,469:INFO:Initializing predict_model()
2024-11-03 06:06:53,469:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:53,469:INFO:Checking exceptions
2024-11-03 06:06:53,469:INFO:Preloading libraries
2024-11-03 06:06:53,470:INFO:Set up data.
2024-11-03 06:06:53,474:INFO:Set up index.
2024-11-03 06:06:53,622:INFO:Initializing predict_model()
2024-11-03 06:06:53,622:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:53,622:INFO:Checking exceptions
2024-11-03 06:06:53,622:INFO:Preloading libraries
2024-11-03 06:06:53,623:INFO:Set up data.
2024-11-03 06:06:53,630:INFO:Set up index.
2024-11-03 06:06:53,831:INFO:Initializing predict_model()
2024-11-03 06:06:53,831:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:53,831:INFO:Checking exceptions
2024-11-03 06:06:53,832:INFO:Preloading libraries
2024-11-03 06:06:53,832:INFO:Set up data.
2024-11-03 06:06:53,837:INFO:Set up index.
2024-11-03 06:06:54,060:INFO:Initializing predict_model()
2024-11-03 06:06:54,060:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E130D400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E6A04430>)
2024-11-03 06:06:54,060:INFO:Checking exceptions
2024-11-03 06:06:54,060:INFO:Preloading libraries
2024-11-03 06:06:54,061:INFO:Set up data.
2024-11-03 06:06:54,073:INFO:Set up index.
2024-11-03 06:06:54,227:INFO:Initializing predict_model()
2024-11-03 06:06:54,227:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:54,227:INFO:Checking exceptions
2024-11-03 06:06:54,227:INFO:Preloading libraries
2024-11-03 06:06:54,227:INFO:Set up data.
2024-11-03 06:06:54,233:INFO:Set up index.
2024-11-03 06:06:54,373:INFO:Initializing predict_model()
2024-11-03 06:06:54,373:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1D9376D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EDC0>)
2024-11-03 06:06:54,373:INFO:Checking exceptions
2024-11-03 06:06:54,373:INFO:Preloading libraries
2024-11-03 06:06:54,373:INFO:Set up data.
2024-11-03 06:06:54,377:INFO:Set up index.
2024-11-03 06:06:54,509:INFO:Initializing predict_model()
2024-11-03 06:06:54,509:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A1E69B85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A1E127EEE0>)
2024-11-03 06:06:54,509:INFO:Checking exceptions
2024-11-03 06:06:54,509:INFO:Preloading libraries
2024-11-03 06:06:54,510:INFO:Set up data.
2024-11-03 06:06:54,513:INFO:Set up index.
2024-11-03 06:09:48,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:09:48,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:09:48,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:09:48,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-03 06:09:50,292:INFO:Initializing load_model()
2024-11-03 06:09:50,292:INFO:load_model(model_name=pump_detector_final, platform=None, authentication=None, verbose=True)
2024-11-03 06:09:50,608:INFO:Initializing predict_model()
2024-11-03 06:09:50,609:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68FD3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EF70>)
2024-11-03 06:09:50,609:INFO:Checking exceptions
2024-11-03 06:09:50,609:INFO:Preloading libraries
2024-11-03 06:09:50,609:INFO:Set up data.
2024-11-03 06:09:50,616:INFO:Set up index.
2024-11-03 06:09:50,741:INFO:Initializing predict_model()
2024-11-03 06:09:50,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68FDBB0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:50,741:INFO:Checking exceptions
2024-11-03 06:09:50,741:INFO:Preloading libraries
2024-11-03 06:09:50,741:INFO:Set up data.
2024-11-03 06:09:50,745:INFO:Set up index.
2024-11-03 06:09:50,877:INFO:Initializing predict_model()
2024-11-03 06:09:50,877:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE872EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1F70>)
2024-11-03 06:09:50,877:INFO:Checking exceptions
2024-11-03 06:09:50,877:INFO:Preloading libraries
2024-11-03 06:09:50,877:INFO:Set up data.
2024-11-03 06:09:50,881:INFO:Set up index.
2024-11-03 06:09:51,018:INFO:Initializing predict_model()
2024-11-03 06:09:51,018:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:51,018:INFO:Checking exceptions
2024-11-03 06:09:51,018:INFO:Preloading libraries
2024-11-03 06:09:51,018:INFO:Set up data.
2024-11-03 06:09:51,022:INFO:Set up index.
2024-11-03 06:09:51,146:INFO:Initializing predict_model()
2024-11-03 06:09:51,146:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD430>)
2024-11-03 06:09:51,146:INFO:Checking exceptions
2024-11-03 06:09:51,146:INFO:Preloading libraries
2024-11-03 06:09:51,146:INFO:Set up data.
2024-11-03 06:09:51,153:INFO:Set up index.
2024-11-03 06:09:51,270:INFO:Initializing predict_model()
2024-11-03 06:09:51,271:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1C10>)
2024-11-03 06:09:51,271:INFO:Checking exceptions
2024-11-03 06:09:51,271:INFO:Preloading libraries
2024-11-03 06:09:51,272:INFO:Set up data.
2024-11-03 06:09:51,277:INFO:Set up index.
2024-11-03 06:09:51,400:INFO:Initializing predict_model()
2024-11-03 06:09:51,401:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1AF0>)
2024-11-03 06:09:51,401:INFO:Checking exceptions
2024-11-03 06:09:51,401:INFO:Preloading libraries
2024-11-03 06:09:51,401:INFO:Set up data.
2024-11-03 06:09:51,405:INFO:Set up index.
2024-11-03 06:09:51,536:INFO:Initializing predict_model()
2024-11-03 06:09:51,537:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD160>)
2024-11-03 06:09:51,537:INFO:Checking exceptions
2024-11-03 06:09:51,537:INFO:Preloading libraries
2024-11-03 06:09:51,537:INFO:Set up data.
2024-11-03 06:09:51,542:INFO:Set up index.
2024-11-03 06:09:51,735:INFO:Initializing predict_model()
2024-11-03 06:09:51,735:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:51,735:INFO:Checking exceptions
2024-11-03 06:09:51,735:INFO:Preloading libraries
2024-11-03 06:09:51,736:INFO:Set up data.
2024-11-03 06:09:51,744:INFO:Set up index.
2024-11-03 06:09:51,898:INFO:Initializing predict_model()
2024-11-03 06:09:51,898:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1DC0>)
2024-11-03 06:09:51,898:INFO:Checking exceptions
2024-11-03 06:09:51,898:INFO:Preloading libraries
2024-11-03 06:09:51,899:INFO:Set up data.
2024-11-03 06:09:51,904:INFO:Set up index.
2024-11-03 06:09:52,035:INFO:Initializing predict_model()
2024-11-03 06:09:52,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD1F0>)
2024-11-03 06:09:52,035:INFO:Checking exceptions
2024-11-03 06:09:52,035:INFO:Preloading libraries
2024-11-03 06:09:52,036:INFO:Set up data.
2024-11-03 06:09:52,042:INFO:Set up index.
2024-11-03 06:09:52,160:INFO:Initializing predict_model()
2024-11-03 06:09:52,160:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EEE0>)
2024-11-03 06:09:52,160:INFO:Checking exceptions
2024-11-03 06:09:52,161:INFO:Preloading libraries
2024-11-03 06:09:52,161:INFO:Set up data.
2024-11-03 06:09:52,165:INFO:Set up index.
2024-11-03 06:09:52,303:INFO:Initializing predict_model()
2024-11-03 06:09:52,303:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD1F0>)
2024-11-03 06:09:52,303:INFO:Checking exceptions
2024-11-03 06:09:52,303:INFO:Preloading libraries
2024-11-03 06:09:52,303:INFO:Set up data.
2024-11-03 06:09:52,307:INFO:Set up index.
2024-11-03 06:09:52,446:INFO:Initializing predict_model()
2024-11-03 06:09:52,446:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD0D0>)
2024-11-03 06:09:52,446:INFO:Checking exceptions
2024-11-03 06:09:52,446:INFO:Preloading libraries
2024-11-03 06:09:52,447:INFO:Set up data.
2024-11-03 06:09:52,450:INFO:Set up index.
2024-11-03 06:09:52,575:INFO:Initializing predict_model()
2024-11-03 06:09:52,576:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A18B0>)
2024-11-03 06:09:52,576:INFO:Checking exceptions
2024-11-03 06:09:52,576:INFO:Preloading libraries
2024-11-03 06:09:52,576:INFO:Set up data.
2024-11-03 06:09:52,579:INFO:Set up index.
2024-11-03 06:09:52,707:INFO:Initializing predict_model()
2024-11-03 06:09:52,708:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EEE0>)
2024-11-03 06:09:52,708:INFO:Checking exceptions
2024-11-03 06:09:52,708:INFO:Preloading libraries
2024-11-03 06:09:52,708:INFO:Set up data.
2024-11-03 06:09:52,713:INFO:Set up index.
2024-11-03 06:09:52,841:INFO:Initializing predict_model()
2024-11-03 06:09:52,841:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EDC0>)
2024-11-03 06:09:52,841:INFO:Checking exceptions
2024-11-03 06:09:52,841:INFO:Preloading libraries
2024-11-03 06:09:52,841:INFO:Set up data.
2024-11-03 06:09:52,845:INFO:Set up index.
2024-11-03 06:09:52,978:INFO:Initializing predict_model()
2024-11-03 06:09:52,978:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD040>)
2024-11-03 06:09:52,978:INFO:Checking exceptions
2024-11-03 06:09:52,978:INFO:Preloading libraries
2024-11-03 06:09:52,979:INFO:Set up data.
2024-11-03 06:09:52,982:INFO:Set up index.
2024-11-03 06:09:53,108:INFO:Initializing predict_model()
2024-11-03 06:09:53,108:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68FDA00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1B80>)
2024-11-03 06:09:53,108:INFO:Checking exceptions
2024-11-03 06:09:53,108:INFO:Preloading libraries
2024-11-03 06:09:53,109:INFO:Set up data.
2024-11-03 06:09:53,112:INFO:Set up index.
2024-11-03 06:09:53,231:INFO:Initializing predict_model()
2024-11-03 06:09:53,232:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68FD610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EDC0>)
2024-11-03 06:09:53,232:INFO:Checking exceptions
2024-11-03 06:09:53,232:INFO:Preloading libraries
2024-11-03 06:09:53,232:INFO:Set up data.
2024-11-03 06:09:53,238:INFO:Set up index.
2024-11-03 06:09:53,367:INFO:Initializing predict_model()
2024-11-03 06:09:53,367:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EF70>)
2024-11-03 06:09:53,367:INFO:Checking exceptions
2024-11-03 06:09:53,367:INFO:Preloading libraries
2024-11-03 06:09:53,367:INFO:Set up data.
2024-11-03 06:09:53,370:INFO:Set up index.
2024-11-03 06:09:53,497:INFO:Initializing predict_model()
2024-11-03 06:09:53,497:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD0D0>)
2024-11-03 06:09:53,497:INFO:Checking exceptions
2024-11-03 06:09:53,498:INFO:Preloading libraries
2024-11-03 06:09:53,498:INFO:Set up data.
2024-11-03 06:09:53,503:INFO:Set up index.
2024-11-03 06:09:53,633:INFO:Initializing predict_model()
2024-11-03 06:09:53,633:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD1F0>)
2024-11-03 06:09:53,633:INFO:Checking exceptions
2024-11-03 06:09:53,633:INFO:Preloading libraries
2024-11-03 06:09:53,634:INFO:Set up data.
2024-11-03 06:09:53,638:INFO:Set up index.
2024-11-03 06:09:53,759:INFO:Initializing predict_model()
2024-11-03 06:09:53,759:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A18B0>)
2024-11-03 06:09:53,760:INFO:Checking exceptions
2024-11-03 06:09:53,760:INFO:Preloading libraries
2024-11-03 06:09:53,760:INFO:Set up data.
2024-11-03 06:09:53,763:INFO:Set up index.
2024-11-03 06:09:53,891:INFO:Initializing predict_model()
2024-11-03 06:09:53,892:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EF70>)
2024-11-03 06:09:53,892:INFO:Checking exceptions
2024-11-03 06:09:53,892:INFO:Preloading libraries
2024-11-03 06:09:53,892:INFO:Set up data.
2024-11-03 06:09:53,896:INFO:Set up index.
2024-11-03 06:09:54,026:INFO:Initializing predict_model()
2024-11-03 06:09:54,026:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD040>)
2024-11-03 06:09:54,027:INFO:Checking exceptions
2024-11-03 06:09:54,027:INFO:Preloading libraries
2024-11-03 06:09:54,027:INFO:Set up data.
2024-11-03 06:09:54,032:INFO:Set up index.
2024-11-03 06:09:54,169:INFO:Initializing predict_model()
2024-11-03 06:09:54,169:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1EE0>)
2024-11-03 06:09:54,169:INFO:Checking exceptions
2024-11-03 06:09:54,169:INFO:Preloading libraries
2024-11-03 06:09:54,169:INFO:Set up data.
2024-11-03 06:09:54,173:INFO:Set up index.
2024-11-03 06:09:54,312:INFO:Initializing predict_model()
2024-11-03 06:09:54,312:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EDC0>)
2024-11-03 06:09:54,312:INFO:Checking exceptions
2024-11-03 06:09:54,312:INFO:Preloading libraries
2024-11-03 06:09:54,312:INFO:Set up data.
2024-11-03 06:09:54,316:INFO:Set up index.
2024-11-03 06:09:54,441:INFO:Initializing predict_model()
2024-11-03 06:09:54,441:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD160>)
2024-11-03 06:09:54,441:INFO:Checking exceptions
2024-11-03 06:09:54,441:INFO:Preloading libraries
2024-11-03 06:09:54,442:INFO:Set up data.
2024-11-03 06:09:54,446:INFO:Set up index.
2024-11-03 06:09:54,627:INFO:Initializing predict_model()
2024-11-03 06:09:54,627:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1B80>)
2024-11-03 06:09:54,627:INFO:Checking exceptions
2024-11-03 06:09:54,627:INFO:Preloading libraries
2024-11-03 06:09:54,628:INFO:Set up data.
2024-11-03 06:09:54,635:INFO:Set up index.
2024-11-03 06:09:54,781:INFO:Initializing predict_model()
2024-11-03 06:09:54,781:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD310>)
2024-11-03 06:09:54,781:INFO:Checking exceptions
2024-11-03 06:09:54,781:INFO:Preloading libraries
2024-11-03 06:09:54,781:INFO:Set up data.
2024-11-03 06:09:54,786:INFO:Set up index.
2024-11-03 06:09:54,906:INFO:Initializing predict_model()
2024-11-03 06:09:54,906:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:54,906:INFO:Checking exceptions
2024-11-03 06:09:54,906:INFO:Preloading libraries
2024-11-03 06:09:54,906:INFO:Set up data.
2024-11-03 06:09:54,910:INFO:Set up index.
2024-11-03 06:09:55,032:INFO:Initializing predict_model()
2024-11-03 06:09:55,032:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A18B0>)
2024-11-03 06:09:55,032:INFO:Checking exceptions
2024-11-03 06:09:55,032:INFO:Preloading libraries
2024-11-03 06:09:55,032:INFO:Set up data.
2024-11-03 06:09:55,037:INFO:Set up index.
2024-11-03 06:09:55,180:INFO:Initializing predict_model()
2024-11-03 06:09:55,180:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD430>)
2024-11-03 06:09:55,180:INFO:Checking exceptions
2024-11-03 06:09:55,180:INFO:Preloading libraries
2024-11-03 06:09:55,181:INFO:Set up data.
2024-11-03 06:09:55,185:INFO:Set up index.
2024-11-03 06:09:55,313:INFO:Initializing predict_model()
2024-11-03 06:09:55,313:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EEE0>)
2024-11-03 06:09:55,313:INFO:Checking exceptions
2024-11-03 06:09:55,313:INFO:Preloading libraries
2024-11-03 06:09:55,313:INFO:Set up data.
2024-11-03 06:09:55,317:INFO:Set up index.
2024-11-03 06:09:55,438:INFO:Initializing predict_model()
2024-11-03 06:09:55,438:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008F70>)
2024-11-03 06:09:55,438:INFO:Checking exceptions
2024-11-03 06:09:55,438:INFO:Preloading libraries
2024-11-03 06:09:55,438:INFO:Set up data.
2024-11-03 06:09:55,443:INFO:Set up index.
2024-11-03 06:09:55,575:INFO:Initializing predict_model()
2024-11-03 06:09:55,575:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008B80>)
2024-11-03 06:09:55,575:INFO:Checking exceptions
2024-11-03 06:09:55,575:INFO:Preloading libraries
2024-11-03 06:09:55,576:INFO:Set up data.
2024-11-03 06:09:55,584:INFO:Set up index.
2024-11-03 06:09:55,753:INFO:Initializing predict_model()
2024-11-03 06:09:55,753:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:55,753:INFO:Checking exceptions
2024-11-03 06:09:55,753:INFO:Preloading libraries
2024-11-03 06:09:55,754:INFO:Set up data.
2024-11-03 06:09:55,759:INFO:Set up index.
2024-11-03 06:09:55,891:INFO:Initializing predict_model()
2024-11-03 06:09:55,891:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008B80>)
2024-11-03 06:09:55,891:INFO:Checking exceptions
2024-11-03 06:09:55,891:INFO:Preloading libraries
2024-11-03 06:09:55,891:INFO:Set up data.
2024-11-03 06:09:55,895:INFO:Set up index.
2024-11-03 06:09:56,014:INFO:Initializing predict_model()
2024-11-03 06:09:56,014:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC0089D0>)
2024-11-03 06:09:56,014:INFO:Checking exceptions
2024-11-03 06:09:56,014:INFO:Preloading libraries
2024-11-03 06:09:56,014:INFO:Set up data.
2024-11-03 06:09:56,019:INFO:Set up index.
2024-11-03 06:09:56,141:INFO:Initializing predict_model()
2024-11-03 06:09:56,142:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:56,142:INFO:Checking exceptions
2024-11-03 06:09:56,142:INFO:Preloading libraries
2024-11-03 06:09:56,142:INFO:Set up data.
2024-11-03 06:09:56,145:INFO:Set up index.
2024-11-03 06:09:56,296:INFO:Initializing predict_model()
2024-11-03 06:09:56,296:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC0089D0>)
2024-11-03 06:09:56,296:INFO:Checking exceptions
2024-11-03 06:09:56,296:INFO:Preloading libraries
2024-11-03 06:09:56,296:INFO:Set up data.
2024-11-03 06:09:56,302:INFO:Set up index.
2024-11-03 06:09:56,454:INFO:Initializing predict_model()
2024-11-03 06:09:56,455:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:56,455:INFO:Checking exceptions
2024-11-03 06:09:56,455:INFO:Preloading libraries
2024-11-03 06:09:56,455:INFO:Set up data.
2024-11-03 06:09:56,461:INFO:Set up index.
2024-11-03 06:09:56,610:INFO:Initializing predict_model()
2024-11-03 06:09:56,610:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC0089D0>)
2024-11-03 06:09:56,610:INFO:Checking exceptions
2024-11-03 06:09:56,610:INFO:Preloading libraries
2024-11-03 06:09:56,610:INFO:Set up data.
2024-11-03 06:09:56,615:INFO:Set up index.
2024-11-03 06:09:56,767:INFO:Initializing predict_model()
2024-11-03 06:09:56,768:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:56,768:INFO:Checking exceptions
2024-11-03 06:09:56,768:INFO:Preloading libraries
2024-11-03 06:09:56,768:INFO:Set up data.
2024-11-03 06:09:56,774:INFO:Set up index.
2024-11-03 06:09:56,920:INFO:Initializing predict_model()
2024-11-03 06:09:56,920:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC0089D0>)
2024-11-03 06:09:56,920:INFO:Checking exceptions
2024-11-03 06:09:56,920:INFO:Preloading libraries
2024-11-03 06:09:56,921:INFO:Set up data.
2024-11-03 06:09:56,925:INFO:Set up index.
2024-11-03 06:09:57,081:INFO:Initializing predict_model()
2024-11-03 06:09:57,081:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:57,081:INFO:Checking exceptions
2024-11-03 06:09:57,081:INFO:Preloading libraries
2024-11-03 06:09:57,081:INFO:Set up data.
2024-11-03 06:09:57,086:INFO:Set up index.
2024-11-03 06:09:57,227:INFO:Initializing predict_model()
2024-11-03 06:09:57,227:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC0089D0>)
2024-11-03 06:09:57,227:INFO:Checking exceptions
2024-11-03 06:09:57,227:INFO:Preloading libraries
2024-11-03 06:09:57,228:INFO:Set up data.
2024-11-03 06:09:57,232:INFO:Set up index.
2024-11-03 06:09:57,354:INFO:Initializing predict_model()
2024-11-03 06:09:57,354:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:57,354:INFO:Checking exceptions
2024-11-03 06:09:57,354:INFO:Preloading libraries
2024-11-03 06:09:57,355:INFO:Set up data.
2024-11-03 06:09:57,361:INFO:Set up index.
2024-11-03 06:09:57,484:INFO:Initializing predict_model()
2024-11-03 06:09:57,484:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:57,484:INFO:Checking exceptions
2024-11-03 06:09:57,484:INFO:Preloading libraries
2024-11-03 06:09:57,484:INFO:Set up data.
2024-11-03 06:09:57,490:INFO:Set up index.
2024-11-03 06:09:57,618:INFO:Initializing predict_model()
2024-11-03 06:09:57,618:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:57,618:INFO:Checking exceptions
2024-11-03 06:09:57,619:INFO:Preloading libraries
2024-11-03 06:09:57,619:INFO:Set up data.
2024-11-03 06:09:57,624:INFO:Set up index.
2024-11-03 06:09:57,742:INFO:Initializing predict_model()
2024-11-03 06:09:57,742:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1AF0>)
2024-11-03 06:09:57,742:INFO:Checking exceptions
2024-11-03 06:09:57,743:INFO:Preloading libraries
2024-11-03 06:09:57,743:INFO:Set up data.
2024-11-03 06:09:57,750:INFO:Set up index.
2024-11-03 06:09:57,868:INFO:Initializing predict_model()
2024-11-03 06:09:57,868:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:57,868:INFO:Checking exceptions
2024-11-03 06:09:57,868:INFO:Preloading libraries
2024-11-03 06:09:57,868:INFO:Set up data.
2024-11-03 06:09:57,874:INFO:Set up index.
2024-11-03 06:09:58,006:INFO:Initializing predict_model()
2024-11-03 06:09:58,007:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:58,007:INFO:Checking exceptions
2024-11-03 06:09:58,007:INFO:Preloading libraries
2024-11-03 06:09:58,007:INFO:Set up data.
2024-11-03 06:09:58,010:INFO:Set up index.
2024-11-03 06:09:58,206:INFO:Initializing predict_model()
2024-11-03 06:09:58,206:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:58,206:INFO:Checking exceptions
2024-11-03 06:09:58,206:INFO:Preloading libraries
2024-11-03 06:09:58,206:INFO:Set up data.
2024-11-03 06:09:58,211:INFO:Set up index.
2024-11-03 06:09:58,365:INFO:Initializing predict_model()
2024-11-03 06:09:58,365:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:58,366:INFO:Checking exceptions
2024-11-03 06:09:58,366:INFO:Preloading libraries
2024-11-03 06:09:58,366:INFO:Set up data.
2024-11-03 06:09:58,370:INFO:Set up index.
2024-11-03 06:09:58,496:INFO:Initializing predict_model()
2024-11-03 06:09:58,496:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EEE0>)
2024-11-03 06:09:58,496:INFO:Checking exceptions
2024-11-03 06:09:58,496:INFO:Preloading libraries
2024-11-03 06:09:58,496:INFO:Set up data.
2024-11-03 06:09:58,501:INFO:Set up index.
2024-11-03 06:09:58,629:INFO:Initializing predict_model()
2024-11-03 06:09:58,630:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD0D0>)
2024-11-03 06:09:58,630:INFO:Checking exceptions
2024-11-03 06:09:58,630:INFO:Preloading libraries
2024-11-03 06:09:58,630:INFO:Set up data.
2024-11-03 06:09:58,633:INFO:Set up index.
2024-11-03 06:09:58,765:INFO:Initializing predict_model()
2024-11-03 06:09:58,765:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:58,765:INFO:Checking exceptions
2024-11-03 06:09:58,765:INFO:Preloading libraries
2024-11-03 06:09:58,765:INFO:Set up data.
2024-11-03 06:09:58,771:INFO:Set up index.
2024-11-03 06:09:58,907:INFO:Initializing predict_model()
2024-11-03 06:09:58,907:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:58,907:INFO:Checking exceptions
2024-11-03 06:09:58,907:INFO:Preloading libraries
2024-11-03 06:09:58,907:INFO:Set up data.
2024-11-03 06:09:58,915:INFO:Set up index.
2024-11-03 06:09:59,047:INFO:Initializing predict_model()
2024-11-03 06:09:59,047:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:59,047:INFO:Checking exceptions
2024-11-03 06:09:59,047:INFO:Preloading libraries
2024-11-03 06:09:59,048:INFO:Set up data.
2024-11-03 06:09:59,051:INFO:Set up index.
2024-11-03 06:09:59,181:INFO:Initializing predict_model()
2024-11-03 06:09:59,182:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:59,182:INFO:Checking exceptions
2024-11-03 06:09:59,182:INFO:Preloading libraries
2024-11-03 06:09:59,183:INFO:Set up data.
2024-11-03 06:09:59,188:INFO:Set up index.
2024-11-03 06:09:59,309:INFO:Initializing predict_model()
2024-11-03 06:09:59,309:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:59,309:INFO:Checking exceptions
2024-11-03 06:09:59,309:INFO:Preloading libraries
2024-11-03 06:09:59,309:INFO:Set up data.
2024-11-03 06:09:59,316:INFO:Set up index.
2024-11-03 06:09:59,449:INFO:Initializing predict_model()
2024-11-03 06:09:59,449:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:59,449:INFO:Checking exceptions
2024-11-03 06:09:59,449:INFO:Preloading libraries
2024-11-03 06:09:59,450:INFO:Set up data.
2024-11-03 06:09:59,454:INFO:Set up index.
2024-11-03 06:09:59,594:INFO:Initializing predict_model()
2024-11-03 06:09:59,594:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:59,594:INFO:Checking exceptions
2024-11-03 06:09:59,594:INFO:Preloading libraries
2024-11-03 06:09:59,594:INFO:Set up data.
2024-11-03 06:09:59,598:INFO:Set up index.
2024-11-03 06:09:59,732:INFO:Initializing predict_model()
2024-11-03 06:09:59,732:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68CA6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:09:59,732:INFO:Checking exceptions
2024-11-03 06:09:59,732:INFO:Preloading libraries
2024-11-03 06:09:59,732:INFO:Set up data.
2024-11-03 06:09:59,736:INFO:Set up index.
2024-11-03 06:09:59,871:INFO:Initializing predict_model()
2024-11-03 06:09:59,872:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:09:59,872:INFO:Checking exceptions
2024-11-03 06:09:59,872:INFO:Preloading libraries
2024-11-03 06:09:59,872:INFO:Set up data.
2024-11-03 06:09:59,875:INFO:Set up index.
2024-11-03 06:10:00,014:INFO:Initializing predict_model()
2024-11-03 06:10:00,014:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:00,014:INFO:Checking exceptions
2024-11-03 06:10:00,014:INFO:Preloading libraries
2024-11-03 06:10:00,014:INFO:Set up data.
2024-11-03 06:10:00,018:INFO:Set up index.
2024-11-03 06:10:00,154:INFO:Initializing predict_model()
2024-11-03 06:10:00,154:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:00,154:INFO:Checking exceptions
2024-11-03 06:10:00,154:INFO:Preloading libraries
2024-11-03 06:10:00,155:INFO:Set up data.
2024-11-03 06:10:00,159:INFO:Set up index.
2024-11-03 06:10:00,288:INFO:Initializing predict_model()
2024-11-03 06:10:00,288:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:00,288:INFO:Checking exceptions
2024-11-03 06:10:00,288:INFO:Preloading libraries
2024-11-03 06:10:00,289:INFO:Set up data.
2024-11-03 06:10:00,294:INFO:Set up index.
2024-11-03 06:10:00,429:INFO:Initializing predict_model()
2024-11-03 06:10:00,429:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B68A1B80>)
2024-11-03 06:10:00,429:INFO:Checking exceptions
2024-11-03 06:10:00,429:INFO:Preloading libraries
2024-11-03 06:10:00,430:INFO:Set up data.
2024-11-03 06:10:00,433:INFO:Set up index.
2024-11-03 06:10:00,560:INFO:Initializing predict_model()
2024-11-03 06:10:00,560:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD1F0>)
2024-11-03 06:10:00,560:INFO:Checking exceptions
2024-11-03 06:10:00,560:INFO:Preloading libraries
2024-11-03 06:10:00,560:INFO:Set up data.
2024-11-03 06:10:00,564:INFO:Set up index.
2024-11-03 06:10:00,687:INFO:Initializing predict_model()
2024-11-03 06:10:00,687:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EEE0>)
2024-11-03 06:10:00,687:INFO:Checking exceptions
2024-11-03 06:10:00,687:INFO:Preloading libraries
2024-11-03 06:10:00,687:INFO:Set up data.
2024-11-03 06:10:00,693:INFO:Set up index.
2024-11-03 06:10:00,827:INFO:Initializing predict_model()
2024-11-03 06:10:00,827:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:00,827:INFO:Checking exceptions
2024-11-03 06:10:00,827:INFO:Preloading libraries
2024-11-03 06:10:00,828:INFO:Set up data.
2024-11-03 06:10:00,833:INFO:Set up index.
2024-11-03 06:10:00,951:INFO:Initializing predict_model()
2024-11-03 06:10:00,951:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:00,951:INFO:Checking exceptions
2024-11-03 06:10:00,951:INFO:Preloading libraries
2024-11-03 06:10:00,951:INFO:Set up data.
2024-11-03 06:10:00,957:INFO:Set up index.
2024-11-03 06:10:01,078:INFO:Initializing predict_model()
2024-11-03 06:10:01,078:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD1F0>)
2024-11-03 06:10:01,078:INFO:Checking exceptions
2024-11-03 06:10:01,078:INFO:Preloading libraries
2024-11-03 06:10:01,079:INFO:Set up data.
2024-11-03 06:10:01,084:INFO:Set up index.
2024-11-03 06:10:01,199:INFO:Initializing predict_model()
2024-11-03 06:10:01,199:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:01,199:INFO:Checking exceptions
2024-11-03 06:10:01,199:INFO:Preloading libraries
2024-11-03 06:10:01,199:INFO:Set up data.
2024-11-03 06:10:01,203:INFO:Set up index.
2024-11-03 06:10:01,345:INFO:Initializing predict_model()
2024-11-03 06:10:01,345:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68CA1C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:01,345:INFO:Checking exceptions
2024-11-03 06:10:01,345:INFO:Preloading libraries
2024-11-03 06:10:01,346:INFO:Set up data.
2024-11-03 06:10:01,350:INFO:Set up index.
2024-11-03 06:10:01,491:INFO:Initializing predict_model()
2024-11-03 06:10:01,491:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:01,491:INFO:Checking exceptions
2024-11-03 06:10:01,491:INFO:Preloading libraries
2024-11-03 06:10:01,491:INFO:Set up data.
2024-11-03 06:10:01,496:INFO:Set up index.
2024-11-03 06:10:01,624:INFO:Initializing predict_model()
2024-11-03 06:10:01,624:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:01,625:INFO:Checking exceptions
2024-11-03 06:10:01,625:INFO:Preloading libraries
2024-11-03 06:10:01,625:INFO:Set up data.
2024-11-03 06:10:01,629:INFO:Set up index.
2024-11-03 06:10:01,760:INFO:Initializing predict_model()
2024-11-03 06:10:01,760:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:01,760:INFO:Checking exceptions
2024-11-03 06:10:01,760:INFO:Preloading libraries
2024-11-03 06:10:01,760:INFO:Set up data.
2024-11-03 06:10:01,764:INFO:Set up index.
2024-11-03 06:10:01,890:INFO:Initializing predict_model()
2024-11-03 06:10:01,890:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:01,890:INFO:Checking exceptions
2024-11-03 06:10:01,890:INFO:Preloading libraries
2024-11-03 06:10:01,890:INFO:Set up data.
2024-11-03 06:10:01,893:INFO:Set up index.
2024-11-03 06:10:02,025:INFO:Initializing predict_model()
2024-11-03 06:10:02,025:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:02,025:INFO:Checking exceptions
2024-11-03 06:10:02,026:INFO:Preloading libraries
2024-11-03 06:10:02,026:INFO:Set up data.
2024-11-03 06:10:02,030:INFO:Set up index.
2024-11-03 06:10:02,204:INFO:Initializing predict_model()
2024-11-03 06:10:02,204:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:02,204:INFO:Checking exceptions
2024-11-03 06:10:02,204:INFO:Preloading libraries
2024-11-03 06:10:02,204:INFO:Set up data.
2024-11-03 06:10:02,211:INFO:Set up index.
2024-11-03 06:10:02,360:INFO:Initializing predict_model()
2024-11-03 06:10:02,360:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:02,360:INFO:Checking exceptions
2024-11-03 06:10:02,360:INFO:Preloading libraries
2024-11-03 06:10:02,360:INFO:Set up data.
2024-11-03 06:10:02,364:INFO:Set up index.
2024-11-03 06:10:02,476:INFO:Initializing predict_model()
2024-11-03 06:10:02,476:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFCD430>)
2024-11-03 06:10:02,476:INFO:Checking exceptions
2024-11-03 06:10:02,476:INFO:Preloading libraries
2024-11-03 06:10:02,477:INFO:Set up data.
2024-11-03 06:10:02,481:INFO:Set up index.
2024-11-03 06:10:02,601:INFO:Initializing predict_model()
2024-11-03 06:10:02,601:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:02,601:INFO:Checking exceptions
2024-11-03 06:10:02,601:INFO:Preloading libraries
2024-11-03 06:10:02,601:INFO:Set up data.
2024-11-03 06:10:02,605:INFO:Set up index.
2024-11-03 06:10:02,731:INFO:Initializing predict_model()
2024-11-03 06:10:02,731:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:02,731:INFO:Checking exceptions
2024-11-03 06:10:02,731:INFO:Preloading libraries
2024-11-03 06:10:02,731:INFO:Set up data.
2024-11-03 06:10:02,735:INFO:Set up index.
2024-11-03 06:10:02,870:INFO:Initializing predict_model()
2024-11-03 06:10:02,870:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:02,870:INFO:Checking exceptions
2024-11-03 06:10:02,870:INFO:Preloading libraries
2024-11-03 06:10:02,870:INFO:Set up data.
2024-11-03 06:10:02,876:INFO:Set up index.
2024-11-03 06:10:02,994:INFO:Initializing predict_model()
2024-11-03 06:10:02,994:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:02,995:INFO:Checking exceptions
2024-11-03 06:10:02,995:INFO:Preloading libraries
2024-11-03 06:10:02,995:INFO:Set up data.
2024-11-03 06:10:03,000:INFO:Set up index.
2024-11-03 06:10:03,140:INFO:Initializing predict_model()
2024-11-03 06:10:03,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:03,140:INFO:Checking exceptions
2024-11-03 06:10:03,140:INFO:Preloading libraries
2024-11-03 06:10:03,140:INFO:Set up data.
2024-11-03 06:10:03,146:INFO:Set up index.
2024-11-03 06:10:03,284:INFO:Initializing predict_model()
2024-11-03 06:10:03,284:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:03,284:INFO:Checking exceptions
2024-11-03 06:10:03,284:INFO:Preloading libraries
2024-11-03 06:10:03,285:INFO:Set up data.
2024-11-03 06:10:03,288:INFO:Set up index.
2024-11-03 06:10:03,425:INFO:Initializing predict_model()
2024-11-03 06:10:03,425:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:03,425:INFO:Checking exceptions
2024-11-03 06:10:03,425:INFO:Preloading libraries
2024-11-03 06:10:03,425:INFO:Set up data.
2024-11-03 06:10:03,429:INFO:Set up index.
2024-11-03 06:10:03,567:INFO:Initializing predict_model()
2024-11-03 06:10:03,567:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:03,567:INFO:Checking exceptions
2024-11-03 06:10:03,567:INFO:Preloading libraries
2024-11-03 06:10:03,567:INFO:Set up data.
2024-11-03 06:10:03,571:INFO:Set up index.
2024-11-03 06:10:03,706:INFO:Initializing predict_model()
2024-11-03 06:10:03,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:03,706:INFO:Checking exceptions
2024-11-03 06:10:03,706:INFO:Preloading libraries
2024-11-03 06:10:03,707:INFO:Set up data.
2024-11-03 06:10:03,712:INFO:Set up index.
2024-11-03 06:10:03,836:INFO:Initializing predict_model()
2024-11-03 06:10:03,836:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008790>)
2024-11-03 06:10:03,836:INFO:Checking exceptions
2024-11-03 06:10:03,836:INFO:Preloading libraries
2024-11-03 06:10:03,837:INFO:Set up data.
2024-11-03 06:10:03,842:INFO:Set up index.
2024-11-03 06:10:03,955:INFO:Initializing predict_model()
2024-11-03 06:10:03,955:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:03,955:INFO:Checking exceptions
2024-11-03 06:10:03,955:INFO:Preloading libraries
2024-11-03 06:10:03,956:INFO:Set up data.
2024-11-03 06:10:03,959:INFO:Set up index.
2024-11-03 06:10:04,086:INFO:Initializing predict_model()
2024-11-03 06:10:04,086:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:04,086:INFO:Checking exceptions
2024-11-03 06:10:04,086:INFO:Preloading libraries
2024-11-03 06:10:04,086:INFO:Set up data.
2024-11-03 06:10:04,091:INFO:Set up index.
2024-11-03 06:10:04,234:INFO:Initializing predict_model()
2024-11-03 06:10:04,234:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:04,234:INFO:Checking exceptions
2024-11-03 06:10:04,234:INFO:Preloading libraries
2024-11-03 06:10:04,234:INFO:Set up data.
2024-11-03 06:10:04,237:INFO:Set up index.
2024-11-03 06:10:04,375:INFO:Initializing predict_model()
2024-11-03 06:10:04,375:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:04,376:INFO:Checking exceptions
2024-11-03 06:10:04,376:INFO:Preloading libraries
2024-11-03 06:10:04,376:INFO:Set up data.
2024-11-03 06:10:04,379:INFO:Set up index.
2024-11-03 06:10:04,627:INFO:Initializing predict_model()
2024-11-03 06:10:04,628:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:04,628:INFO:Checking exceptions
2024-11-03 06:10:04,628:INFO:Preloading libraries
2024-11-03 06:10:04,628:INFO:Set up data.
2024-11-03 06:10:04,636:INFO:Set up index.
2024-11-03 06:10:04,778:INFO:Initializing predict_model()
2024-11-03 06:10:04,778:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:04,778:INFO:Checking exceptions
2024-11-03 06:10:04,779:INFO:Preloading libraries
2024-11-03 06:10:04,779:INFO:Set up data.
2024-11-03 06:10:04,782:INFO:Set up index.
2024-11-03 06:10:04,918:INFO:Initializing predict_model()
2024-11-03 06:10:04,918:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:04,918:INFO:Checking exceptions
2024-11-03 06:10:04,918:INFO:Preloading libraries
2024-11-03 06:10:04,918:INFO:Set up data.
2024-11-03 06:10:04,923:INFO:Set up index.
2024-11-03 06:10:05,050:INFO:Initializing predict_model()
2024-11-03 06:10:05,050:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:05,050:INFO:Checking exceptions
2024-11-03 06:10:05,050:INFO:Preloading libraries
2024-11-03 06:10:05,051:INFO:Set up data.
2024-11-03 06:10:05,056:INFO:Set up index.
2024-11-03 06:10:05,191:INFO:Initializing predict_model()
2024-11-03 06:10:05,191:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:05,191:INFO:Checking exceptions
2024-11-03 06:10:05,191:INFO:Preloading libraries
2024-11-03 06:10:05,192:INFO:Set up data.
2024-11-03 06:10:05,197:INFO:Set up index.
2024-11-03 06:10:05,330:INFO:Initializing predict_model()
2024-11-03 06:10:05,330:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:05,330:INFO:Checking exceptions
2024-11-03 06:10:05,330:INFO:Preloading libraries
2024-11-03 06:10:05,330:INFO:Set up data.
2024-11-03 06:10:05,335:INFO:Set up index.
2024-11-03 06:10:05,479:INFO:Initializing predict_model()
2024-11-03 06:10:05,479:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:05,479:INFO:Checking exceptions
2024-11-03 06:10:05,479:INFO:Preloading libraries
2024-11-03 06:10:05,479:INFO:Set up data.
2024-11-03 06:10:05,483:INFO:Set up index.
2024-11-03 06:10:05,617:INFO:Initializing predict_model()
2024-11-03 06:10:05,617:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68E3760>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:05,617:INFO:Checking exceptions
2024-11-03 06:10:05,617:INFO:Preloading libraries
2024-11-03 06:10:05,617:INFO:Set up data.
2024-11-03 06:10:05,621:INFO:Set up index.
2024-11-03 06:10:05,894:INFO:Initializing predict_model()
2024-11-03 06:10:05,894:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B688B5B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EF70>)
2024-11-03 06:10:05,894:INFO:Checking exceptions
2024-11-03 06:10:05,894:INFO:Preloading libraries
2024-11-03 06:10:05,894:INFO:Set up data.
2024-11-03 06:10:05,898:INFO:Set up index.
2024-11-03 06:10:06,023:INFO:Initializing predict_model()
2024-11-03 06:10:06,023:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6B686EDC0>)
2024-11-03 06:10:06,023:INFO:Checking exceptions
2024-11-03 06:10:06,023:INFO:Preloading libraries
2024-11-03 06:10:06,023:INFO:Set up data.
2024-11-03 06:10:06,027:INFO:Set up index.
2024-11-03 06:10:06,180:INFO:Initializing predict_model()
2024-11-03 06:10:06,180:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:06,181:INFO:Checking exceptions
2024-11-03 06:10:06,181:INFO:Preloading libraries
2024-11-03 06:10:06,181:INFO:Set up data.
2024-11-03 06:10:06,184:INFO:Set up index.
2024-11-03 06:10:06,323:INFO:Initializing predict_model()
2024-11-03 06:10:06,323:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:06,323:INFO:Checking exceptions
2024-11-03 06:10:06,323:INFO:Preloading libraries
2024-11-03 06:10:06,323:INFO:Set up data.
2024-11-03 06:10:06,327:INFO:Set up index.
2024-11-03 06:10:06,470:INFO:Initializing predict_model()
2024-11-03 06:10:06,470:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:06,470:INFO:Checking exceptions
2024-11-03 06:10:06,470:INFO:Preloading libraries
2024-11-03 06:10:06,471:INFO:Set up data.
2024-11-03 06:10:06,474:INFO:Set up index.
2024-11-03 06:10:06,608:INFO:Initializing predict_model()
2024-11-03 06:10:06,609:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:06,609:INFO:Checking exceptions
2024-11-03 06:10:06,609:INFO:Preloading libraries
2024-11-03 06:10:06,609:INFO:Set up data.
2024-11-03 06:10:06,613:INFO:Set up index.
2024-11-03 06:10:06,729:INFO:Initializing predict_model()
2024-11-03 06:10:06,729:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6B68FD970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:06,729:INFO:Checking exceptions
2024-11-03 06:10:06,729:INFO:Preloading libraries
2024-11-03 06:10:06,730:INFO:Set up data.
2024-11-03 06:10:06,735:INFO:Set up index.
2024-11-03 06:10:06,851:INFO:Initializing predict_model()
2024-11-03 06:10:06,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB85E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:06,851:INFO:Checking exceptions
2024-11-03 06:10:06,851:INFO:Preloading libraries
2024-11-03 06:10:06,851:INFO:Set up data.
2024-11-03 06:10:06,856:INFO:Set up index.
2024-11-03 06:10:06,976:INFO:Initializing predict_model()
2024-11-03 06:10:06,976:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:06,976:INFO:Checking exceptions
2024-11-03 06:10:06,976:INFO:Preloading libraries
2024-11-03 06:10:06,977:INFO:Set up data.
2024-11-03 06:10:06,982:INFO:Set up index.
2024-11-03 06:10:07,101:INFO:Initializing predict_model()
2024-11-03 06:10:07,101:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:07,101:INFO:Checking exceptions
2024-11-03 06:10:07,101:INFO:Preloading libraries
2024-11-03 06:10:07,102:INFO:Set up data.
2024-11-03 06:10:07,106:INFO:Set up index.
2024-11-03 06:10:07,235:INFO:Initializing predict_model()
2024-11-03 06:10:07,235:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:07,235:INFO:Checking exceptions
2024-11-03 06:10:07,235:INFO:Preloading libraries
2024-11-03 06:10:07,236:INFO:Set up data.
2024-11-03 06:10:07,239:INFO:Set up index.
2024-11-03 06:10:07,375:INFO:Initializing predict_model()
2024-11-03 06:10:07,375:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:07,375:INFO:Checking exceptions
2024-11-03 06:10:07,375:INFO:Preloading libraries
2024-11-03 06:10:07,375:INFO:Set up data.
2024-11-03 06:10:07,378:INFO:Set up index.
2024-11-03 06:10:07,524:INFO:Initializing predict_model()
2024-11-03 06:10:07,524:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:07,524:INFO:Checking exceptions
2024-11-03 06:10:07,524:INFO:Preloading libraries
2024-11-03 06:10:07,524:INFO:Set up data.
2024-11-03 06:10:07,527:INFO:Set up index.
2024-11-03 06:10:07,656:INFO:Initializing predict_model()
2024-11-03 06:10:07,656:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966E20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:07,656:INFO:Checking exceptions
2024-11-03 06:10:07,656:INFO:Preloading libraries
2024-11-03 06:10:07,656:INFO:Set up data.
2024-11-03 06:10:07,660:INFO:Set up index.
2024-11-03 06:10:07,793:INFO:Initializing predict_model()
2024-11-03 06:10:07,793:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:07,794:INFO:Checking exceptions
2024-11-03 06:10:07,794:INFO:Preloading libraries
2024-11-03 06:10:07,794:INFO:Set up data.
2024-11-03 06:10:07,798:INFO:Set up index.
2024-11-03 06:10:07,939:INFO:Initializing predict_model()
2024-11-03 06:10:07,940:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:07,940:INFO:Checking exceptions
2024-11-03 06:10:07,940:INFO:Preloading libraries
2024-11-03 06:10:07,940:INFO:Set up data.
2024-11-03 06:10:07,944:INFO:Set up index.
2024-11-03 06:10:08,077:INFO:Initializing predict_model()
2024-11-03 06:10:08,077:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:08,078:INFO:Checking exceptions
2024-11-03 06:10:08,078:INFO:Preloading libraries
2024-11-03 06:10:08,078:INFO:Set up data.
2024-11-03 06:10:08,081:INFO:Set up index.
2024-11-03 06:10:08,215:INFO:Initializing predict_model()
2024-11-03 06:10:08,216:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:08,216:INFO:Checking exceptions
2024-11-03 06:10:08,216:INFO:Preloading libraries
2024-11-03 06:10:08,217:INFO:Set up data.
2024-11-03 06:10:08,221:INFO:Set up index.
2024-11-03 06:10:08,343:INFO:Initializing predict_model()
2024-11-03 06:10:08,343:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:08,343:INFO:Checking exceptions
2024-11-03 06:10:08,343:INFO:Preloading libraries
2024-11-03 06:10:08,344:INFO:Set up data.
2024-11-03 06:10:08,348:INFO:Set up index.
2024-11-03 06:10:08,482:INFO:Initializing predict_model()
2024-11-03 06:10:08,482:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:08,482:INFO:Checking exceptions
2024-11-03 06:10:08,482:INFO:Preloading libraries
2024-11-03 06:10:08,482:INFO:Set up data.
2024-11-03 06:10:08,486:INFO:Set up index.
2024-11-03 06:10:08,617:INFO:Initializing predict_model()
2024-11-03 06:10:08,617:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:08,617:INFO:Checking exceptions
2024-11-03 06:10:08,617:INFO:Preloading libraries
2024-11-03 06:10:08,617:INFO:Set up data.
2024-11-03 06:10:08,621:INFO:Set up index.
2024-11-03 06:10:08,764:INFO:Initializing predict_model()
2024-11-03 06:10:08,764:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:08,764:INFO:Checking exceptions
2024-11-03 06:10:08,764:INFO:Preloading libraries
2024-11-03 06:10:08,764:INFO:Set up data.
2024-11-03 06:10:08,768:INFO:Set up index.
2024-11-03 06:10:08,899:INFO:Initializing predict_model()
2024-11-03 06:10:08,899:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6AE966F40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:08,899:INFO:Checking exceptions
2024-11-03 06:10:08,899:INFO:Preloading libraries
2024-11-03 06:10:08,899:INFO:Set up data.
2024-11-03 06:10:08,903:INFO:Set up index.
2024-11-03 06:10:09,030:INFO:Initializing predict_model()
2024-11-03 06:10:09,030:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BBFC1B80>)
2024-11-03 06:10:09,030:INFO:Checking exceptions
2024-11-03 06:10:09,030:INFO:Preloading libraries
2024-11-03 06:10:09,032:INFO:Set up data.
2024-11-03 06:10:09,037:INFO:Set up index.
2024-11-03 06:10:09,158:INFO:Initializing predict_model()
2024-11-03 06:10:09,159:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008040>)
2024-11-03 06:10:09,159:INFO:Checking exceptions
2024-11-03 06:10:09,159:INFO:Preloading libraries
2024-11-03 06:10:09,159:INFO:Set up data.
2024-11-03 06:10:09,164:INFO:Set up index.
2024-11-03 06:10:09,289:INFO:Initializing predict_model()
2024-11-03 06:10:09,289:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC008280>)
2024-11-03 06:10:09,289:INFO:Checking exceptions
2024-11-03 06:10:09,289:INFO:Preloading libraries
2024-11-03 06:10:09,290:INFO:Set up data.
2024-11-03 06:10:09,293:INFO:Set up index.
2024-11-03 06:10:09,419:INFO:Initializing predict_model()
2024-11-03 06:10:09,419:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D6BBFB8580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['max_market_cap', 'min_market_cap',
                                             'price_volatility', 'mcap_range',
                                             'price_acceleration',
                                             'max_tx_density', 'avg_tx_density',
                                             'peak_volume', 'volume_volatility',
                                             'max_accounts', 'avg_accounts',
                                             'max_concentration',
                                             'avg_concentration'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=9,
                                        n_estimators=130, n_jobs=-1,
                                        random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D6BC0081F0>)
2024-11-03 06:10:09,419:INFO:Checking exceptions
2024-11-03 06:10:09,419:INFO:Preloading libraries
2024-11-03 06:10:09,419:INFO:Set up data.
2024-11-03 06:10:09,422:INFO:Set up index.
